<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:services="services.*" width="1024" height="720"
					   creationComplete="init(event)"
					   closing="closingHandler(event)"
					   xmlns:crud="view.forms.crud.*" 
					   xmlns:components="view.components.*" 
					   xmlns:forms="view.forms.*" 
					   xmlns:view="view.*"
					   showStatusBar="false">
	<fx:Script>
		<![CDATA[
			import mx.rpc.events.FaultEvent;
			import model.Server;
			import embeddedServer.EmbeddedServer;
			
			import locales.Locale;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			
			import resources.images.Images;
			
			import services.MasterDataService;
			import services.crud.ActivationService;
			
			import utils.FaultHandler;
			import utils.Utils;
			import utils.config.Config;
			import utils.log.DebugLog;
			
			import view.components.Mask;

			private static var eventToFunctionsMap:Dictionary = new Dictionary();

			private var server:EmbeddedServer;
			
			public static var SERVER_READY:String = "serverReady";
			
			protected function init(event:FlexEvent):void
			{
				DebugLog.log("INFO: ------------------ Running Sistema Hotelero ------------------");
				//centers main window on screen
 				Utils.centerWindowOnScreen(this);
				this.maximize(); 

				if(Config.getInstance().isEnabledLocalServer()){
					server = new EmbeddedServer();
					if(server.initialize()){
						Mask.show(Locale.getInstance().getCurrentLocale().messages.startingServer);
						server.addEventListener(EmbeddedServer.SERVER_STARTED,serverStartedHandler);
						server.startTomcat();
					}
				}else{
					serverStartedHandler(null);
				}
				
			}
			
			private function serverStartedHandler(event:Event):void{
				
				//activateApplication();
				
				Mask.close();
				createMasterData();
			}
			
			
			
			public function activateApplication():void
			{
				new ActivationService().retrieveAll(retrieveAll_resultHandler, FaultHandler.defaultFaultHandler);
			}
			
			
			
			private function retrieveAll_resultHandler(event:ResultEvent,token:Object=null):void {
				var serverCollection:ArrayCollection = event.result as ArrayCollection;
				if(serverCollection.length == 0){
					new ActivationService().activateApplication(activateApp_resultHandler, closeApp_faultHandler);
				}
				else{
					Mask.close();
					createMasterData();
				}
			}
			
			private function activateApp_resultHandler(event:ResultEvent,token:Object=null):void {
				var activateApp:Boolean = event.result as Boolean;
				if(activateApp){
					var server:Server = new Server();
					server.active = true;
					new ActivationService().createRecord(server, create_resultHandler, FaultHandler.defaultFaultHandler);
					
				}
			}
			
			
			public function closeApp_faultHandler(event:FaultEvent=null,token:Object=null):void {
				Mask.close();
				Mask.show(Locale.getInstance().getCurrentLocale().activation.appNotActive);
			}
			
			
			private function create_resultHandler(event:ResultEvent,token:Object=null):void {
				Mask.close();
				createMasterData();
			}
			
			
			
			//Stops server before closing
			protected function closingHandler(event:Event):void
			{
				if (server != null){
					Mask.show(Locale.getInstance().getCurrentLocale().messages.stoppingServer);
					server.stopTomcat();
				}
			}
			
			
			
			protected function createMasterData():void
			{
				Mask.show(Locale.getInstance().getCurrentLocale().messages.creatingMasterData);
				
				new MasterDataService().createMasterData(createMasterData_success, FaultHandler.defaultFaultHandler);
			}
			
			private function createMasterData_success(event:ResultEvent,token:Object=null):void {
				Mask.close();
				//Dispatches "server ready" event
				DebugLog.log("INFO: Server ready to process requests...");
				SistemaHotelero.dispatchEvent(new Event(SERVER_READY));
			}
			
			//Static event dispatcher implementation
			static public function addEventListener(type:String, listener:Function):void{
				if(eventToFunctionsMap[type]==null){
					eventToFunctionsMap[type] = new ArrayCollection();
				}
				eventToFunctionsMap[type].addItem(listener);
			}
			
			static public function removeEventListener(type:String, listener:Function):void{
				if(eventToFunctionsMap[type]!=null){
					var ac:ArrayCollection = eventToFunctionsMap[type];
					var index:int = -1;
					for (var i:int=0; i<ac.length ; i++){
						var f:Function = ac.getItemAt(i) as Function;
						if(f==listener){
							index=i;
							break;
						}
					}
					if(index!=-1){
						ac.removeItemAt(index);
					}
				}
			}
			
			static public function dispatchEvent(event:Event):void{
				if(eventToFunctionsMap[event.type]!=null){
					var ac:ArrayCollection = eventToFunctionsMap[event.type];
					for (var i:int=0; i<ac.length ; i++){
						var f:Function = ac.getItemAt(i) as Function;
						f(event);
					}
				}
			}
			
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
	</fx:Declarations>

	<s:Group id="backgroundRect" width="100%" height="100%">
		<s:BitmapImage source="{Images.background}" left="0" right="0" top="0" bottom="0" scaleMode="stretch"/>
	</s:Group>
	<s:Group width="100%" height="100%">
		<!-- HEADER PANEL -->
		<view:HeaderPanel width="100%" id="headerPanel" />

		<!-- MAIN PANEL -->
		<view:MainPanel height="100%" width="100%" loc="{headerPanel.loc}"/>
	</s:Group>
	
</s:WindowedApplication>