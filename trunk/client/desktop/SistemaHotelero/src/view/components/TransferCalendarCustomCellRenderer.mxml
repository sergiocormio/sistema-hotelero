<?xml version="1.0" encoding="utf-8"?>
<s:GridItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx" clipAndEnableScrolling="true">
	<fx:Script>
		<![CDATA[
			import model.ReservationForm;
			import model.StateReservationForm;
			import model.Transfer;
			import model.TransferType;
			
			import mx.collections.ArrayCollection;
			import mx.controls.dataGridClasses.DataGridListData;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import spark.components.DataGrid;
			import spark.components.Image;
			
			private var busImg:Image = new Image();
			private var planeImg:Image = new Image();
			
			override public function prepare(hasBeenRecycled:Boolean):void {
				//				lblData.text = data[column.dataField]
			}
			
			// Write String to labelDisplay component. 
			override public function set label(value:String):void 
			{ 
				super.label = value; 
				lblData.text = label; 
				
				// Determine the RGB color value from the data item.
				// 				if (label == "red")
				//					backgroundColor = 0xFF0000;
				//				if (label == "green")
				//					backgroundColor = 0x00FF00;
				//				if (label == "blue")
				//					backgroundColor = 0x0000FF;
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				if(column == null || data == null){
					return;
				}
				
				//all cells must be centered
				lblData.horizontalCenter = 0;
				background.color = Colors.WHITE_COLOR;
				img1.source = null;
				img2.source = null;
				if(column.columnIndex == 0){
					background.color = Colors.GRAY_COLOR;
					data[column.dataField] = data[column.dataField];// + ":00";
					return;
				}
				
				
				var qtyBus:int = 0;
				var qtyAirport:int = 0;
				
				var list:ArrayCollection; // = new ArrayCollection();
				if(data[column.dataField] is ArrayCollection){
					list = data[column.dataField] as ArrayCollection;
				}else{
					return;
				}
				//else if(data is Transfer){
				//	list.addItem(data);
				//}
				
				for each (var o:Object in list){
					if (o is Transfer){
						var transfer:Transfer = o as Transfer;
						switch(transfer.serviceType.transferType){
							case TransferType.ONE_WAY_BUS:
							case TransferType.ROUND_TRIP_BUS:
								qtyBus++;
								break;
							case TransferType.ONE_WAY_FLIGHT:
							case TransferType.ROUND_TRIP_FLIGHT:
								qtyAirport++;
								break;
						}
					}
				}
				//Calculates result based on quantities
				if(qtyBus>0){
					//busImg.source = 
					//mainGroup.addElement(busImg);
					img1.source = Icons.bus;
				}
				if(qtyAirport>0){
					//planeImg.source = Icons.plane;
					//mainGroup.addElement(planeImg);
					if(img1.source==null){
						img1.source = Icons.plane;
					}else{
						img2.source = Icons.plane;
					}
				}
					
				
				var qtyTransfers:int = list.length;
				
				//Calculate result based on quantities
				if(qtyTransfers==1){
					background.color = Colors.YELLOW_COLOR;
					
				}else if(qtyTransfers>1){
					background.color = Colors.RED_COLOR;
					lblData.setStyle("color",Colors.WHITE_COLOR);
				}
			}
		]]>
	</fx:Script>
	<s:Rect top="0" bottom="0" right="0" left="0">
		<s:fill>
			<s:SolidColor id="background" color="{Colors.WHITE_COLOR}"/>
		</s:fill>
	</s:Rect>
	<s:HGroup id="mainGroup" top="5" bottom="5" height="100%" width="100%" verticalAlign="middle" horizontalAlign="center">
		<s:Label id="lblData" fontWeight="bold"/><!-- top="9" left="7" -->
		<s:Image id="img1"/>
		<s:Image id="img2"/>
	</s:HGroup>
</s:GridItemRenderer>