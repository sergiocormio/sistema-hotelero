<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
			xmlns:s="library://ns.adobe.com/flex/spark" 
			xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300"
			creationComplete="init(event)">
	<fx:Metadata> 
		[Event(name="itemSelected", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import spark.events.GridSelectionEvent;
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.containers.HBox;
			import mx.controls.Label;
			import mx.controls.LinkButton;
			import mx.controls.Spacer;
			import mx.events.FlexEvent;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import spark.events.GridEvent;
			
			
			[Bindable]
			public var lineColor:uint = Colors.GRAY_COLOR;
			
			[Bindable]
			public var bgColor:uint = Colors.RED_COLOR;
			
			[Bindable]
			public var loc:Object;
			
			[Bindable]
			public var columns:IList;
			
			[Bindable]
			public var pageSize:Number = 10;
			
			/**
			 * List containing all records
			 */
			[Bindable]
			public var dataProvider:IList;
			
			/**
			 * List containing only the current page
			 */
			[Bindable]
			private var _currentPage:IList;
			
			/**
			 * Specifies the minimum bounds for the currently selected page
			 */
			private var minBound:Number;
			
			/**
			 * Specifies the maximum bounds for the currently selected page
			 */
			private var maxBound:Number;
			
			
			private var currentPageNumber:Number = 1;
			
			/**
			 * Navigate to previous page
			 */
			private function prevPage(event:MouseEvent):void
			{
				if(currentPageNumber > 1)
				{
					grid.selectedIndex = -1;
					
					currentPageNumber--;
					minBound = minBound - pageSize;
					maxBound = minBound + pageSize-1;
					// should never happen
					if(minBound < 0){
						minBound = 0;
					}
					
					nextButton.enabled = true;
					if(currentPageNumber == 1){
						prevButton.enabled = false;
					}
					else{
						prevButton.enabled = true;
					}
					
					updateCurrentPage();
					updatePagesLabel();
					
				}
			}
			
			/**
			 * Navigate to next page
			 */
			private function nextPage(event:MouseEvent):void
			{
				if(currentPageNumber < getNumberOfPages())
				{
					grid.selectedIndex = -1;
					
					currentPageNumber++;
					if(dataProvider.length > 0){
						minBound = minBound + pageSize;
						maxBound = maxBound + pageSize;
						if(maxBound > dataProvider.length-1){
							maxBound = dataProvider.length-1;
						}
						
						prevButton.enabled = true;
						if(currentPageNumber == getNumberOfPages()){
							nextButton.enabled = false;
						}
						else{
							nextButton.enabled = true;
						}
						
						updateCurrentPage();
						updatePagesLabel();
						
					}
				}
			}
			
			
			
			
			
			protected function selectionChangeHandler(event:GridSelectionEvent):void
			{
				dispatchEvent(new Event('itemSelected'));
			}

						
			protected function init(event:FlexEvent):void
			{
				setFirstPage();				
			}
			
			
			private function setFirstPage():void
			{
				currentPageNumber = 1;
				minBound = 0;
				prevButton.enabled = false;
				if(dataProvider.length > pageSize){
					maxBound = pageSize-1;
					updateCurrentPage();
					nextButton.enabled = true;
				}
				else{
					maxBound = dataProvider.length-1;
					_currentPage = dataProvider;
					nextButton.enabled = false;
				}
				updatePagesLabel();
			}
			
			private function updateCurrentPage():void
			{
				_currentPage = new ArrayCollection();
				for(var i:Number = minBound; i <= maxBound; i++){
					_currentPage.addItem(dataProvider.getItemAt(i));
				}
			}
			
			private function getNumberOfPages():Number
			{
				return Math.ceil(dataProvider.length / pageSize);
			}
			
			
			public function refresh():void
			{
				grid.selectedItem = -1;
				setFirstPage();
			}
			
			private function updatePagesLabel():void
			{
				if(dataProvider != null && dataProvider.length > 0){
					pagesLabel.text = loc.grid.page + " " + currentPageNumber + " " + loc.grid.of + " " + getNumberOfPages();
				}
				else{
					pagesLabel.text = "";
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:Rect width="100%" height="100%" horizontalCenter="0" verticalCenter="0" radiusX="5">
		<s:stroke>
			<s:SolidColorStroke color="{lineColor}" weight="1"/>
		</s:stroke>
		<s:fill><s:SolidColor color="{bgColor}"/></s:fill>
	</s:Rect>
	<s:VGroup height="100%" width="100%" paddingRight="5" paddingLeft="5" paddingTop="5" paddingBottom="5">
		<s:DataGrid id="grid" width="100%" height="100%" dataProvider="{_currentPage}" skinClass="view.skins.CustomDataGridSkin" alternatingRowColors="{Colors.ALTERNATING_ROW_COLORS}"
					columns="{columns}" selectionChange="selectionChangeHandler(event)" toolTip="{loc.messages.clickForMoreInfo}"/>
		
		<s:HGroup horizontalAlign="center" verticalAlign="middle" width="100%">
			<s:Button id="prevButton" label="{loc.grid.previous}" click="prevPage(event)" icon="{Icons.previousArrow}"></s:Button>
			<s:Label id="pagesLabel" color="{lineColor}" paddingLeft="5" paddingRight="5"></s:Label>
			<s:Button id="nextButton" label="{loc.grid.next}" click="nextPage(event)" icon="{Icons.nextArrow}" iconPlacement="right"></s:Button>
		</s:HGroup>
		
		
	</s:VGroup>
</s:Group>
