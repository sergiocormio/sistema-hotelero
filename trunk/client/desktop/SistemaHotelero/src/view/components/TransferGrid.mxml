<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 >
	<fx:Script>
		<![CDATA[
			import locales.Locale;
			
			import model.Alternative;
			import model.Occupation;
			import model.OccupationPK;
			import model.ReservationForm;
			import model.Room;
			import model.StateReservationForm;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.gridClasses.GridColumn;
			import spark.events.GridEvent;
			import spark.skins.spark.DefaultGridItemRenderer;
			
			import utils.DateTimeUtils;
			import utils.WindowsUtils;
			
			import view.forms.ReservationFormSummary;
			
			
			[Bindable]
			private var calendarRows:ArrayCollection;
			
			private var roomIdToCalendarRowMap:Dictionary;
			
			private var titleWindow:TitleWindow;
			
			private const IT_IS_AN_ALTERNATIVE:String = "Alternative";
			
			private const DAY_PREFIX_COLUMN:String = "day_";
			
			private const HOUR_COLUMN:String = "hour";
			
			[Bindable]
			public var loc:Object = Locale.getInstance().getCurrentLocale();
			
			public var dateFrom:Date;
			
			public var dateTo:Date;
			
			public var hoursToShow:ArrayCollection;
			
			[Bindable]
			public var transfers:ArrayCollection;
			
			public var editable:Boolean = false; //grid is not editable by default
			
			private function addHourColumn():void{
				var roomColumn:GridColumn = new GridColumn();
				roomColumn.headerText = loc.transfer.hour;
				roomColumn.dataField = "transfer.hour";
				roomColumn.itemRendererFunction = selectRenderer;
				
				grid.columns.addItem(roomColumn);
			}
			
			private function addDayColumns(dateFrom:Date,dateTo:Date):void{
				var i:int = 0;
				while(DateTimeUtils.rollDaysToDate(dateFrom,i) <= dateTo){
					var auxDate:Date = DateTimeUtils.rollDaysToDate(dateFrom,i);
					var col:GridColumn = DateTimeUtils.getColumnForDate(auxDate,DAY_PREFIX_COLUMN + i);
					col.labelFunction = calendarFormat;
					col.itemRendererFunction = selectRenderer;
					
					grid.columns.addItem(col);
					i++;
				}
			}
			
			/**
			 * Chooses a renderer dependendig on "column"
			 */ 
			private function selectRenderer(item:Object, column: GridColumn):IFactory
			{
				if(item!=null){
					return new ClassFactory(view.components.CalendarCustomCellRenderer);
				}else{
					return new ClassFactory(DefaultGridItemRenderer);
				}
			}
			
			private function calendarFormat(item:Object,column:GridColumn):String
			{
				var qtyAlternative:int = 0;
				var qtyConfirmed:int = 0;
				var qtyPreBooking:int = 0;
				var qtyCancelled:int = 0;
				var qtyExpired:int = 0;
				
				var result:String = '';
				var value:ArrayCollection = item [column.dataField] as ArrayCollection;
				if(value != null){
					for each (var o:Object in value){
						if (o is String){
							qtyAlternative++;
						}else if (o is ReservationForm){
							var resForm:ReservationForm = o as ReservationForm;
							switch(resForm.state){
								case StateReservationForm.CONFIRMED:
									qtyConfirmed++;
									break;
								case StateReservationForm.PRE_BOOKING:
									qtyPreBooking++;
									break;
								case StateReservationForm.CANCELLED:
									qtyCancelled++;
									break;
								case StateReservationForm.EXPIRED:
									qtyExpired++;
									break;
							}
						}
					}
					//Calculate result based on quantities
					if(qtyConfirmed>0){
						result += StateReservationForm.convertToLabel(StateReservationForm.CONFIRMED,loc);
					}
					if(qtyPreBooking>0){
						if (result.length > 0 ) {result += ", "}
						result += StateReservationForm.convertToLabel(StateReservationForm.PRE_BOOKING,loc);
					}
					if(qtyCancelled>0){
						if (result.length > 0 ) {result += ", "}
						result += StateReservationForm.convertToLabel(StateReservationForm.CANCELLED,loc);
					}
					if(qtyExpired>0){
						if (result.length > 0 ) {result += ", "}
						result += StateReservationForm.convertToLabel(StateReservationForm.EXPIRED,loc);
					}
					if(qtyAlternative>0){
						if (result.length > 0 ) {result += ", "}
						result += "X";
					}
					
				}
				
				return result;
				
			}
			
			private function loadHoursToShow():void{
				/* for each (var room:Room in roomsToShow){
					var roomId:Object = room.id;
					var row:Object = new Object();
					row[ROOM_COLUMN] = room;
					calendarRows.addItem(row);
					roomIdToCalendarRowMap[roomId] = row;
				} */
			}
			
			public function init():void
			{
				roomIdToCalendarRowMap = new Dictionary();
				calendarRows = new ArrayCollection();
				
				loadHoursToShow();
				//adds columns to the grid
				grid.columns = new ArrayList();
				addHourColumn();
				addDayColumns(dateFrom,dateTo);
				
				//loadOccupationsOnGrid(occupations);
			}
			
			private function loadOccupationsOnGrid(occupations:ArrayCollection):void{
				for each (var occupation:Occupation in occupations){
					var isNew:Boolean = false;
					var roomId:Object = occupation.id.room.id;
					var row:Object = roomIdToCalendarRowMap[roomId];
					var attributeName:String = DAY_PREFIX_COLUMN + DateTimeUtils.getQuantityOfDays(dateFrom,occupation.id.date);
					
					if( row[attributeName] == null){
						//every cell has an ArrayCollection, could have more than 1 reservationForm
						row[attributeName] = new ArrayCollection();
					}
					var cellArray:ArrayCollection = row[attributeName] as ArrayCollection;
					//alternatives In Calendar have reservationForm as Null
					if( occupation.id.reservationForm == null){ //it's an alternative
						cellArray.addItem(IT_IS_AN_ALTERNATIVE);
					}else{
						cellArray.addItem(occupation.id.reservationForm);
					}
				}
			}
			
			protected function gridClickHandler(event:GridEvent):void
			{
				/* if(!editable){	return;	} */
				var row:Object = event.item;
				//if there was a valid row o user clicked on room cell, do nothing.
				if(row == null || event.columnIndex == 0) { 
					return;
				}
				
				//i.e: event.item has a room and a day_0 that it's an ArrayCollection
				var day:String = event.column.dataField;
				var transfersInDay:ArrayCollection = row[day];
				
				if(editable){
					//nothing to do
				}else{ //if it is not editable
					//if it's not an empty cell... shows the transfers summary
					if(transfersInDay != null){
						/* var form:ReservationFormSummary = new ReservationFormSummary();
						form.loc = loc;
						form.reservationForms = transfersInDay;
						form.addEventListener("okClicked",titleWindow_close);
						titleWindow = WindowsUtils.openDialog(loc.reservationForm.plural + " - " + event.column.headerText,form); */
					}
				}
			}
			
			private function titleWindow_close(evt:Object):void {
				PopUpManager.removePopUp(titleWindow);
			}
						
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:DataGrid id="grid" width="100%" height="100%" dataProvider="{calendarRows}" skinClass="view.skins.CustomDataGridSkin"
				gridClick="gridClickHandler(event)"/>
</s:Group>
