<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 >
	<fx:Script>
		<![CDATA[
			import locales.Locale;
			
			import model.Alternative;
			import model.Occupation;
			import model.OccupationPK;
			import model.ReservationForm;
			import model.Room;
			import model.StateReservationForm;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.gridClasses.GridColumn;
			import spark.events.GridEvent;
			import spark.skins.spark.DefaultGridItemRenderer;
			
			import utils.DateTimeUtils;
			import utils.WindowsUtils;
			
			import view.forms.ReservationFormSummary;

			
			[Bindable]
			private var calendarRows:ArrayCollection;
			
			private var roomIdToCalendarRowMap:Dictionary;
			
			private var titleWindow:TitleWindow;

			private const IT_IS_AN_ALTERNATIVE:String = "Alternative";
			
			private const DAY_PREFIX_COLUMN:String = "day_";
			
			private const ROOM_COLUMN:String = "room";
			
			//cell Renderers
			private var defaultGridItemRenderer:IFactory = new ClassFactory(DefaultGridItemRenderer);
			private var calendarCustomCellRenderer:IFactory = new ClassFactory(view.components.CalendarCustomCellRenderer);
			
			[Bindable]
			public var loc:Object = Locale.getInstance().getCurrentLocale();
			
			public var occupations:ArrayCollection = new ArrayCollection();
			
			public var dateFrom:Date;
			
			public var dateTo:Date;
			
			public var roomsToShow:ArrayCollection; //roomsToShow even if these don't have occupation
			
			public var editable:Boolean = false; //grid is not editable by default
			
			//Contains all the occupations generated manually by user's clicks
			public var manualOccupations:ArrayCollection = new ArrayCollection(); 
			
			
			private function addRoomColumn():void{
				var roomColumn:GridColumn = new GridColumn();
				roomColumn.headerText = loc.room.singular;
				roomColumn.dataField = "room.number";
				roomColumn.itemRendererFunction = selectRenderer;
				roomColumn.width = 80;
				grid.columns.addItem(roomColumn);
			}
			
			private function addDayColumns(dateFrom:Date,dateTo:Date):void{
				var i:int = 0;
				while(DateTimeUtils.rollDaysToDate(dateFrom,i) <= dateTo){
					var auxDate:Date = DateTimeUtils.rollDaysToDate(dateFrom,i);
					var col:GridColumn = DateTimeUtils.getColumnForDate(auxDate,DAY_PREFIX_COLUMN + i);
					col.labelFunction = calendarFormat;
					col.itemRendererFunction = selectRenderer;
					
					grid.columns.addItem(col);
					i++;
				}
			}
			
			/**
			 * Chooses a renderer dependendig on "column"
			 */ 
			private function selectRenderer(item:Object, column: GridColumn):IFactory
			{
				if(item!=null){
					return calendarCustomCellRenderer;
				}else{ 
					return defaultGridItemRenderer;
				}
			}

			private function calendarFormat(item:Object,column:GridColumn):String
			{
				var qtyAlternative:int = 0;
				var qtyConfirmed:int = 0;
				var qtyPreBooking:int = 0;
				var qtyCancelled:int = 0;
				var qtyExpired:int = 0;
				
				var result:String = '';
				var value:ArrayCollection = item [column.dataField] as ArrayCollection;
				if(value != null){
					for each (var o:Object in value){
					     if (o is String){
							 qtyAlternative++;
						 }else if (o is ReservationForm){
							 var resForm:ReservationForm = o as ReservationForm;
							 switch(resForm.state){
								 case StateReservationForm.CONFIRMED:
									 qtyConfirmed++;
									 break;
								 case StateReservationForm.PRE_BOOKING:
									 qtyPreBooking++;
									 break;
								 case StateReservationForm.CANCELLED:
									 qtyCancelled++;
									 break;
								 case StateReservationForm.EXPIRED:
									 qtyExpired++;
									 break;
							 }
						 }
					}
					//Calculate result based on quantities
					if(qtyConfirmed>0){
						result += StateReservationForm.convertToLabel(StateReservationForm.CONFIRMED,loc);
					}
					if(qtyPreBooking>0){
						if (result.length > 0 ) {result += ", "}
						result += StateReservationForm.convertToLabel(StateReservationForm.PRE_BOOKING,loc);
					}
					if(qtyCancelled>0){
						if (result.length > 0 ) {result += ", "}
						result += StateReservationForm.convertToLabel(StateReservationForm.CANCELLED,loc);
					}
					if(qtyExpired>0){
						if (result.length > 0 ) {result += ", "}
						result += StateReservationForm.convertToLabel(StateReservationForm.EXPIRED,loc);
					}
					if(qtyAlternative>0){
						if (result.length > 0 ) {result += ", "}
						result += "X";
					}

				}
				
				return result;
			
			}
			
			private function loadRoomsToShow():void{
				for each (var room:Room in roomsToShow){
					var roomId:Object = room.id;
					var row:Object = new Object();
					row[ROOM_COLUMN] = room;
					calendarRows.addItem(row);
					roomIdToCalendarRowMap[roomId] = row;
				}
			}
			
			public function init():void
			{
				roomIdToCalendarRowMap = new Dictionary();
				calendarRows = new ArrayCollection();

				loadRoomsToShow();
				//adds columns to the grid
				grid.columns = new ArrayList();
				addRoomColumn();
				addDayColumns(dateFrom,dateTo);
				
				loadOccupationsOnGrid(occupations);
				//loads manualOccupations too, to avoid missing them on refresh
				loadOccupationsOnGrid(manualOccupations);
				
			}
			
			private function loadOccupationsOnGrid(occupations:ArrayCollection):void{
				for each (var occupation:Occupation in occupations){
					var isNew:Boolean = false;
					var roomId:Object = occupation.id.room.id;
					var row:Object = roomIdToCalendarRowMap[roomId];
					var attributeName:String = DAY_PREFIX_COLUMN + DateTimeUtils.getQuantityOfDays(dateFrom,occupation.id.date);
					
					if( row[attributeName] == null){
						//every cell has an ArrayCollection, could have more than 1 reservationForm
						row[attributeName] = new ArrayCollection();
					}
					var cellArray:ArrayCollection = row[attributeName] as ArrayCollection;
					//alternatives In Calendar have reservationForm as Null
					if( occupation.id.reservationForm == null){ //it's an alternative
						cellArray.addItem(IT_IS_AN_ALTERNATIVE);
					}else{
						cellArray.addItem(occupation.id.reservationForm);
					}
				}
			}
			
			protected function gridClickHandler(event:GridEvent):void
			{
				/* if(!editable){	return;	} */
				var row:Object = event.item;
				//if there was a valid row o user clicked on room cell, do nothing.
				if(row == null || event.columnIndex < 1) { 
					return;
				}
				
				//i.e: event.item has a room and a day_0 that it's an ArrayCollection
				var day:String = event.column.dataField;
				var reservationForms:ArrayCollection = row[day];
				
				if(editable){
					//if it's an empty cell... adds an ArrayCollection
					if(reservationForms == null){
						reservationForms = new ArrayCollection();
						row[day] = reservationForms;
					}	
					
					//if there isn't a confirmed reservation on that cell..
					if(!hasConfirmedReservation(reservationForms)){
						//calculates date from "day"
						var dayNumber:String = day.substr(DAY_PREFIX_COLUMN.length);
						var date:Date = DateTimeUtils.rollDaysToDate(dateFrom,int(dayNumber));
						//if already has an Alternative, removes it
						if(hasAlternativeReservation(reservationForms)){
							removeAlternative(reservationForms,row[ROOM_COLUMN],date);
						}else{
							addAlternative(reservationForms,row[ROOM_COLUMN],date);
						}
						//repaints the cell
						grid.invalidateCell(event.rowIndex,event.columnIndex);
					}
				}else{ //if is not editable
					//if it's not an empty cell... shows the reservation forms summary
					if(reservationForms != null){
						var form:ReservationFormSummary = new ReservationFormSummary();
						form.loc = loc;
						form.reservationForms = reservationForms;
						form.addEventListener("okClicked",titleWindow_close);
						titleWindow = WindowsUtils.openDialog(loc.reservationForm.plural + " - " + event.column.headerText,form);
					}
					
				}
			}

			private function titleWindow_close(evt:Object):void {
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function hasConfirmedReservation(reservationForms:ArrayCollection):Boolean{
				return hasStateReservation(reservationForms,StateReservationForm.CONFIRMED);
			}
			
			private function hasAlternativeReservation(reservationForms:ArrayCollection):Boolean{
				return hasStateReservation(reservationForms,IT_IS_AN_ALTERNATIVE);
			}
			
			//returns true if there is a reservation in reservationForms with state = "state"
			//note: state can be IT_IS_AN_ALTERNATIVE
			private function hasStateReservation(reservationForms:ArrayCollection,state:String):Boolean{
				var found:Boolean = false;
				for each (var o:Object in reservationForms){
					if(o is String){
						if (o == state){
							found=true;
							break;
						}
					}
					else if (o is ReservationForm){
						var resForm:ReservationForm = o as ReservationForm;
						if (resForm.state ==  state){
							found=true;
							break;
						}
					}
				}
				return found;
			}
			
			//removes an Alternative from an Array of reservationForms and from mannualOccupations
			private function removeAlternative(reservationForms:ArrayCollection,room:Room,date:Date):void{
				//removes from reservationForms
				for (var i:int = 0 ; i<reservationForms.length ; i++){
					var o:Object = reservationForms[i];
					if(o is String){
						reservationForms.removeItemAt(i);
						break;
					}
				}
				//removes from manual occupations
				for (var j:int = 0 ; j<manualOccupations.length ; j++){
					var manualOccupation:Occupation = manualOccupations[j];
					if(manualOccupation.id.room.id == room.id && manualOccupation.id.date.getTime() == date.getTime() 
						&& manualOccupation.id.reservationForm == null){
						manualOccupations.removeItemAt(j);
						break;
					}
				}
			}
			
			//adds alternative to reservationForms and to manualOccupations 
			private function addAlternative(reservationForms:ArrayCollection,room:Room,date:Date):void{
				reservationForms.addItem(IT_IS_AN_ALTERNATIVE);
				var manualOccupation:Occupation = new Occupation();
				manualOccupation.id = new OccupationPK();
				manualOccupation.id.room = room;
				manualOccupation.id.date = date;
				manualOccupations.addItem(manualOccupation);
			}
			
			//returns an Alternative provided by user selection
			public function getUserAlternative():Alternative{
				var alternative:Alternative = new Alternative();
				alternative.occupations = manualOccupations;
				return alternative;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:DataGrid id="grid" width="100%" height="100%" dataProvider="{calendarRows}" skinClass="view.skins.CustomDataGridSkin"
			gridClick="gridClickHandler(event)" toolTip="{loc.messages.clickForMoreInfo}"/>
</s:Group>
