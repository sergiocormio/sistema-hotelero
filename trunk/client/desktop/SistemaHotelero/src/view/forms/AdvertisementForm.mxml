<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="100%" height="100%" creationComplete="init(event)" 
		  xmlns:ns="http://www.adobe.com/2006/fc" xmlns:crud="view.forms.crud.*" xmlns:individual="view.forms.crud.individual.*" xmlns:components="view.components.*" >
	<fx:Script>
		<![CDATA[
			import flash.sampler.NewObjectSample;
			
			import locales.Locale;
			
			import model.Customer;
			import model.EmailRequest;
			import model.Month;
			import model.Region;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import services.EmailService;
			import services.crud.ConsumptionService;
			import services.crud.CountryService;
			import services.crud.CustomerService;
			import services.crud.RegionService;
			import services.crud.RoomService;
			
			import spark.components.gridClasses.GridColumn;
			import spark.events.GridSelectionEvent;
			
			import utils.DateTimeUtils;
			import utils.FaultHandler;
			import utils.config.UserSettings;
			
			import view.components.Mask;
			
			[Bindable]
			public var loc:Object;
			
			[Bindable]
			private var customers:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var regions:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var months:ArrayCollection;
			
			
			public function init(event:FlexEvent):void
			{
				loadPlaces();
				loadMonths();
				emailBodyEditor.htmlText = '<img src="/under_construction.jpg" />';
				
			}
			
			private function loadPlaces():void
			{
				retrieveRegions();
			}
			
			private function updateMonthSelection():void
			{
				if(allMonths.selected)
				{
					var arrayLength:int = (monthsMultiList.dataProvider as ArrayCollection).length;
					var vector:Vector.<int> = new Vector.<int>(arrayLength);
					
					for (var i:Number = 0; i < arrayLength; i++) {
						vector[i] = i;
					}
					
					monthsMultiList.selectedIndices = vector;
				}
				else
				{
					monthsMultiList.selectedIndices = null;
				}
			}
			
			private function loadMonths():void{
				months = new ArrayCollection();
				for each (var id:String in Month.monthIds){
					months.addItem(new Month(id, loc));
				}
			}
			
			private function retrieveRegions():void{
				new RegionService().retrieveAll(retrieveRegions_resultHandler, FaultHandler.defaultFaultHandler);
			}
			
			private function retrieveRegions_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the rooms ComboBox
				regions.removeAll();
				regions.addAll(event.result as ArrayCollection);
				
				// we should not take into account countries without regions because when a customer is created,
				// the region field is mandatory (we do not support customers without regions)
				//retrieveCountriesWithoutRegions();
			}
			

			private function insertImage():void {}
			
			private function preview():void {
			
				var toList:ArrayCollection = new ArrayCollection();
				toList.addItem(UserSettings.getInstance().getEmailTest());
				
				var emailReq:EmailRequest = createEmailRequest(toList);
				
				Mask.show();
				new EmailService().sendEmail(emailReq, sendTestEmail_resultHandler, FaultHandler.defaultFaultHandler);
			}		
			
			
			
			
			
			private function checkFilter():void {
			
				if(regionsCombo.selectedIndices == null || regionsCombo.selectedIndices.length == 0 ||
				   monthsMultiList.selectedIndices == null || monthsMultiList.selectedIndices.length == 0){
					return;
				}
				
				var selectedRegions:ArrayCollection = new ArrayCollection();
				
				for each (var selectedRegionIndex:int in regionsCombo.selectedIndices){
					selectedRegions.addItem(regions.getItemAt(selectedRegionIndex));
				}
				
				var selectedMonths:ArrayCollection = new ArrayCollection();
				
				// set months indices (e.g: January=0, February=1 and so on)
				for each (var selectedMonthIndex:int in monthsMultiList.selectedIndices){
					selectedMonths.addItem(selectedMonthIndex);
				}
							
				new CustomerService().retrieveCustomers(selectedRegions, selectedMonths, retrieveCustomers_resultHandler, FaultHandler.defaultFaultHandler);
			}		
			
			
			private function retrieveCustomers_resultHandler(event:ResultEvent,token:Object=null):void {
				var selectedCustomers:ArrayCollection = event.result as ArrayCollection;
				if(selectedCustomers == null || selectedCustomers.length == 0){
					Alert.show(loc.advertisement.error.noCustomerSelected);
					return;
				}
			
				sendEmail(selectedCustomers);
			}
			
			private function sendEmail(selectedCustomers:ArrayCollection): void {
				
				var emails:ArrayCollection = new ArrayCollection();
				
				for each(var customer:Customer in selectedCustomers){
					
					if(customer.email != null && customer.email != ""){
						emails.addItem(customer.email);
					}
				}
								
				var emailReq:EmailRequest = createEmailRequest(emails);
				
				Mask.show();
				new EmailService().sendEmail(emailReq, sendEmail_resultHandler, FaultHandler.defaultFaultHandler);
			}
			
			
			private function createEmailRequest(to:ArrayCollection): EmailRequest{
				
				var emailReq:EmailRequest = new EmailRequest();
				
				emailReq.from = UserSettings.getInstance().getEmailSender();
				emailReq.password = UserSettings.getInstance().getPassword();
				emailReq.toList = to;
				emailReq.isHtml = true;
				emailReq.subject = subjectText.text;
				emailReq.body = emailBodyEditor.htmlText;
				//emailReq.body = "<P ALIGN='LEFT'><FONT FACE='Courier New' SIZE='48' COLOR='#993333' LETTERSPACING='0' KERNING='0'>fdgh<B><I><U>dfghd</U></I></B>f</FONT></P>";
			
				return emailReq;
			}
			
			private function sendEmail_resultHandler(event:ResultEvent,token:Object=null):void {
				Mask.close();
				Alert.show(loc.advertisement.emailSent);
			}
			
			private function sendTestEmail_resultHandler(event:ResultEvent,token:Object=null):void {
				Mask.close();
				Alert.show(loc.advertisement.emailTestSent + ": " + UserSettings.getInstance().getEmailTest());
			}
			
			private function retrieveCountriesWithoutRegions():void
			{
				new CountryService().retrieveCountriesWithoutRegions(retrieveCountriesWithoutRegions_resultHandler, FaultHandler.defaultFaultHandler);
			}
			
			private function retrieveCountriesWithoutRegions_resultHandler(event:ResultEvent,token:Object=null):void {
				//adds countries without regions
				regions.addAll(event.result as ArrayCollection);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
	</fx:Declarations>
	<mx:VDividedBox height="100%" width="100%">
		<s:Group width="100%" height="100%">
			<s:Rect width="100%" height="100%">
				<s:stroke>
					<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
				</s:stroke>
				<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
			</s:Rect>
			<s:VGroup height="100%" width="100%" horizontalAlign="center" paddingBottom="30">
				<s:Form>
					<s:layout>
						<s:FormLayout gap="-14"/>
					</s:layout>  
					
					<s:FormItem id="subjectItem" label="{loc.advertisement.subject}:" required="true">
						<s:TextInput id="subjectText" widthInChars="40"/>
					</s:FormItem>
				</s:Form>	
				<s:HGroup width="80%" height="100%" gap="5" horizontalAlign="center">
						
					<mx:RichTextEditor id="emailBodyEditor" width="100%" height="100%" title="{loc.advertisement.body}"/>
						
					<s:Group width="100%" height="100%">
						<s:Rect width="100%" height="100%" radiusX="5">
							<s:stroke>
								<s:SolidColorStroke color="{Colors.RED_COLOR}" weight="2"/>
							</s:stroke>
						</s:Rect>
						<s:VGroup gap="5" width="100%" height="100%">
							<s:Form height="100%">
								<s:layout>
									<s:FormLayout gap="-14"/>
								</s:layout>  
								
								<s:FormItem id="countriesItem" label="{loc.advertisement.SendEmailsTo}:" required="true">
									<s:HGroup>
										<components:MultiSelectList id="regionsCombo" dataProvider="{regions}" labelField="qualifiedName" 
												allowMultipleSelection="true" maxHeight="240"/>
																	
										<s:Button width="24" height="24" click="loadPlaces();"
												  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
									</s:HGroup>
								</s:FormItem>
																
								<s:FormItem id="monthsItem" label="{loc.advertisement.birthMonth}:" required="false">
									<s:HGroup>
										<components:MultiSelectList id="monthsMultiList" dataProvider="{months}" labelField="label" 
												allowMultipleSelection="true"/>
										<s:Button width="24" height="24" click="loadMonths();"
												  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
										<s:CheckBox id="allMonths" label="{loc.advertisement.all}" click="updateMonthSelection()" />
									</s:HGroup>
								</s:FormItem>
							</s:Form>
							
							<s:HGroup gap="5" width="100%" height="100%" verticalAlign="bottom" paddingBottom="15" paddingLeft="15">
								<s:Button label="{loc.button.insertImage}" click="insertImage()" />
								<s:Button label="{loc.button.preview}" click="preview()" />
								<s:Button label="{loc.button.send}" click="checkFilter()" />
							</s:HGroup>
						</s:VGroup>
					</s:Group>
				</s:HGroup>
			</s:VGroup>	
		</s:Group>
		
	</mx:VDividedBox>
</s:VGroup>
