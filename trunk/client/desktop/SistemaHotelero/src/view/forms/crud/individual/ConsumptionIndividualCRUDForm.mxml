<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="100%" height="100%" creationComplete="init(event)">
	<fx:Metadata> 
		[Event(name="cancelClicked", type="flash.events.Event")]
		[Event(name="saveSuccess", type="flash.events.Event")]
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import locales.Locale;
			import utils.FaultHandler;
			
			import model.Consumption;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.RegExpValidationResult;
			import mx.validators.ValidationResult;
			import mx.validators.Validator;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import services.crud.ConsumptionService;
			import services.crud.RoomService;
			
			import spark.events.IndexChangeEvent;
			
			import utils.WindowsUtils;
			[Bindable]
			public var loc:Object;
			
			[Bindable]
			public var isUpdate:Boolean;
			
			[Bindable]
			private var rooms:ArrayCollection = new ArrayCollection();
			
			
			private var _currentConsumption:Consumption;
			
			public function get currentConsumption():Consumption
			{
				return _currentConsumption;
			}
			
			public function set currentConsumption(value:Consumption):void
			{
				_currentConsumption = value;
				//load whole form
				
				if(_currentConsumption.room!=null){
					WindowsUtils.autoSelectComboBox(roomsCombo, _currentConsumption.room);
				}else{
					roomsCombo.selectedIndex = 0;
				}
				
				dateChooser.selectedDate = _currentConsumption.date;
				descriptionText.text = _currentConsumption.description;
				if(_currentConsumption.price >= 0)
				{
					priceText.text = _currentConsumption.price.toString();
				}
				else{
					priceText.text = "";
				}
			}

			protected function init(event:FlexEvent):void
			{
				_currentConsumption = new Consumption();
				//autoloads all combos
				retrieveRooms();
				
				setInitialFocus();
			}
			
			private function retrieveRooms():void{
				new RoomService().retrieveAll(retrieveRooms_resultHandler,FaultHandler.defaultFaultHandler);
			}
			
			private function retrieveRooms_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the rooms ComboBox
				rooms.removeAll();
				rooms.addAll(event.result as ArrayCollection);
			}
			
			private function ConsumptionSaved_resultHandler(event:ResultEvent,token:Object=null):void {
				dispatchEvent(new Event("saveSuccess"));
			}
			
						
			private function allFieldsAreValid():Boolean{
				
				setEnabledValidators(true);
				
				var valArray:Array = new Array();
				
				valArray.push(roomValidator);
				valArray.push(dateValidator);
				valArray.push(descriptionValidator);
				valArray.push(priceValidator);
								
				var validatorErrorArray:Array = Validator.validateAll(valArray);
				var isValidForm:Boolean = validatorErrorArray.length == 0;
				
				setEnabledValidators(false);
				
				return isValidForm;
			}
			
			
			
			private function setEnabledValidators(enabled:Boolean):void{
				roomValidator.enabled = enabled;
				dateValidator.enabled = enabled;
				descriptionValidator.enabled = enabled;
				priceValidator.enabled = enabled;
			}
			
			protected function save():void
			{
				// validate all data
				if(!allFieldsAreValid()){
					return;
				}
				
				//fills all fields
				currentConsumption.date = dateChooser.selectedDate;
				currentConsumption.room = roomsCombo.selectedItem;
				currentConsumption.description = descriptionText.text;
				currentConsumption.price = new Number(priceText.text);
								
				//calls service
				new ConsumptionService().createRecord(currentConsumption,ConsumptionSaved_resultHandler, FaultHandler.defaultFaultHandler);
			}
			
			protected function cancel():void
			{
				dispatchEvent(new Event("cancelClicked"));
			}
			
						
			protected function setInitialFocus():void
			{
				if(enabled){
					roomsCombo.setFocus();
				}
			}
			
			public function refreshForm():void{
				//TODO Complete this method
				retrieveRooms();
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:NumberValidator id="roomValidator" 
							enabled="false"
							required="true"
							requiredFieldError="{loc.validator.requiredFieldError}"
							minValue="0"
							lowerThanMinError="{loc.validator.requiredFieldError}" 
							source="{roomsCombo}"
							property="selectedIndex" 
							/>
		<mx:NumberValidator id="priceValidator"
							enabled="false"
							required="true"
							requiredFieldError="{loc.validator.requiredFieldError}"
							minValue="0"
							domain="real"
							allowNegative="false"
							precision="2"
							precisionError="{loc.validator.precisionError}"
							separationError="{loc.validator.invalidFieldValueError}"
							negativeError="{loc.validator.invalidFieldValueError}"
							lowerThanMinError="{loc.validator.invalidFieldValueError}"
							invalidCharError="{loc.validator.invalidFieldValueError}"
							invalidFormatCharsError="{loc.validator.invalidFieldValueError}"
							decimalPointCountError="{loc.validator.invalidFieldValueError}"
							source="{priceText}"
							property="text"
							/>
		<mx:StringValidator id="descriptionValidator"
							enabled="false"
							required="true"
							requiredFieldError="{loc.validator.requiredFieldError}"
							source="{descriptionText}"
							property="text"
							/>
		<mx:DateValidator id="dateValidator"
						  enabled="false"
						  required="true"
						  requiredFieldError="{loc.validator.requiredFieldError}"
						  inputFormat="{loc.date.format}"
						  formatError="{loc.validator.invalidFieldValueError}"
						  invalidCharError="{loc.validator.invalidFieldValueError}"
						  wrongDayError="{loc.validator.invalidFieldValueError}"
						  wrongLengthError="{loc.validator.invalidFieldValueError}"
						  wrongMonthError="{loc.validator.invalidFieldValueError}"
						  wrongYearError="{loc.validator.invalidFieldValueError}"
						  source="{dateChooser}"
						  property="text"
						  />
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
		</s:stroke>
		<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
	</s:Rect>
	<s:VGroup width="100%" height="100%">
		<s:HGroup width="100%" height="100%" horizontalAlign="center">
			<s:Form>
				<s:layout>
					<s:FormLayout gap="-14"/>
				</s:layout>  
		
				<s:FormItem id="roomItem" label="{loc.consumption.roomNumber}:" enabled="{!isUpdate}" required="true">
					<s:HGroup>
						<s:ComboBox id="roomsCombo" dataProvider="{rooms}"
									labelField="number" requireSelection="true"/>
						<s:Button width="24" height="24" click="retrieveRooms();"
								  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
						<!--
						<s:Button width="24" height="24" click="addDocumentType();" icon="{Icons.add}"
								  toolTip="{loc.button.add}"/>
						-->
					</s:HGroup>
				</s:FormItem>
				
				<s:FormItem label="{loc.consumption.description}:" required="true" enabled="{!isUpdate}">
					<s:TextInput id="descriptionText"/>
				</s:FormItem>
				
			</s:Form>
			<s:Form>
				<s:layout>
					<s:FormLayout gap="-14"/>
				</s:layout>
				
				<s:FormItem label="{loc.consumption.date}:">
					<mx:DateField id="dateChooser" width="120"
								  dayNames="{Locale.getInstance().dayNamesAbbr}" editable="true"
								  formatString="{loc.dateFormat.toUpperCase()}"
								  monthNames="{Locale.getInstance().monthNames}"/>
				</s:FormItem>
				
				<s:FormItem label="{loc.consumption.price}:" required="true" enabled="{!isUpdate}">
					<s:TextInput id="priceText"/>
				</s:FormItem>
				
			</s:Form>
		</s:HGroup>
		<!-- BUTTONS -->
		<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
			<s:Button label="{loc.button.save}" click="save()" icon="{Icons.save}"/>
			<s:Button label="{loc.button.cancel}" click="cancel()" icon="{Icons.cancel}"/>
		</s:HGroup>
		<s:Spacer height="5"/>
	</s:VGroup>
</s:Group>
