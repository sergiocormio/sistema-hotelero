<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="100%" height="100%" creationComplete="init(event)">
	<fx:Metadata> 
		[Event(name="cancelClicked", type="flash.events.Event")]
		[Event(name="saveSuccess", type="flash.events.Event")]
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import locales.Locale;
			
			import model.Country;
			import model.Customer;
			import model.CustomerPK;
			import model.Language;
			import model.Region;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.RegExpValidationResult;
			import mx.validators.ValidationResult;
			
			import resources.icons.Icons;
			
			import services.CountryService;
			import services.CustomerService;
			import services.DocumentTypeService;
			import services.LanguageService;
			import services.RegionService;
			
			import spark.events.IndexChangeEvent;
			
			import utils.WindowsUtils;
			[Bindable]
			public var loc:Object;
			
			[Bindable]
			public var isUpdate:Boolean;
			
			private var _currentCustomer:Customer;
			
			[Bindable]
			private var documentTypes:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var countries:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var regions:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var languages:ArrayCollection = new ArrayCollection();
			
			private var titleWindow:TitleWindow;
			private var docTypeForm:DocumentTypeIndividualCRUDForm;
			private var countryForm:CountryIndividualCRUDForm;
			private var regionForm:RegionIndividualCRUDForm;
			private var languageForm:LanguageIndividualCRUDForm;
			
			public function get currentCustomer():Customer
			{
				return _currentCustomer;
			}
			
			public function set currentCustomer(value:Customer):void
			{
				_currentCustomer = value;
				//load whole form
				if(_currentCustomer.id!=null){
					idNumberText.text = _currentCustomer.id.idNumber;
					WindowsUtils.autoSelectComboBox(documentTypesCombo,_currentCustomer.id.docType);
				}else{
					idNumberText.text = null;
					documentTypesCombo.selectedIndex = 0;
				}
				firstNameText.text = _currentCustomer.firstName;
				lastNameText.text = _currentCustomer.lastName;
				emailText.text = _currentCustomer.email;
				professionText.text = _currentCustomer.profession;
				dateOfBirthChooser.selectedDate = _currentCustomer.dateOfBirth;
				lastLodgementDateChooser.selectedDate = _currentCustomer.lastLodgementDate;
				if(_currentCustomer.region!=null){
					WindowsUtils.autoSelectComboBox(countriesCombo,_currentCustomer.region.country);
					WindowsUtils.autoSelectComboBox(regionsCombo,_currentCustomer.region);
				}else{
					countriesCombo.selectedIndex = -1;
					regionsCombo.selectedIndex = -1;
				}
				if(_currentCustomer.language!=null){
					WindowsUtils.autoSelectComboBox(languagesCombo,_currentCustomer.language);
				}else{
					languagesCombo.selectedIndex = -1;	
				}
			}

			protected function init(event:FlexEvent):void
			{
				//autoloads all combos
				retrieveDocumentTypes();
				retrieveCountries();
				retrieveRegions();
				retrieveLanguages();
				setInitialFocus();
			}
			
			private function retrieveDocumentTypes():void{
				var docTypeServ:DocumentTypeService = new DocumentTypeService();
				docTypeServ.retrieveAll(retrieveDocumentTypes_resultHandler,faultHandler);
			}
			
			private function addDocumentType():void{
				docTypeForm = new DocumentTypeIndividualCRUDForm();
				docTypeForm.loc = loc;
				docTypeForm.isUpdate = false;
				docTypeForm.addEventListener("saveSuccess",docType_saveSuccess);
				docTypeForm.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.button.newLabel + ": " + loc.documentType.singular,docTypeForm,this);
			}
			
			private function titleWindow_close(evt:Object):void {
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function docType_saveSuccess(evt:Object):void {
				documentTypes.addItem(docTypeForm.currentDocType);
				WindowsUtils.autoSelectComboBox(documentTypesCombo, docTypeForm.currentDocType);
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function addCountry():void{
				countryForm = new CountryIndividualCRUDForm();
				countryForm.loc = loc;
				countryForm.isUpdate = false;
				countryForm.addEventListener("saveSuccess",country_saveSuccess);
				countryForm.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.button.newLabel + ": " + loc.country.singular,countryForm,this);
			}
			
			private function country_saveSuccess(evt:Object):void {
				countries.addItem(countryForm.currentCountry);
				WindowsUtils.autoSelectComboBox(countriesCombo, countryForm.currentCountry);
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function addLanguage():void{
				languageForm = new LanguageIndividualCRUDForm();
				languageForm.loc = loc;
				languageForm.isUpdate = false;
				languageForm.addEventListener("saveSuccess",language_saveSuccess);
				languageForm.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.button.newLabel + ": " + loc.language.singular,languageForm,this);
			}
			
			private function language_saveSuccess(evt:Object):void {
				languages.addItem(languageForm.currentLanguage);
				WindowsUtils.autoSelectComboBox(languagesCombo, languageForm.currentLanguage);
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function addRegion():void{
				regionForm = new RegionIndividualCRUDForm();
				regionForm.countryPreSelected = countriesCombo.selectedItem;
				regionForm.loc = loc;
				regionForm.isUpdate = false;
				regionForm.addEventListener("saveSuccess",region_saveSuccess);
				regionForm.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.button.newLabel + ": " + loc.region.singular,regionForm,this);
			}
			
			private function region_saveSuccess(evt:Object):void {
				regions.addItem(regionForm.currentRegion);
				WindowsUtils.autoSelectComboBox(regionsCombo, regionForm.currentRegion);
				PopUpManager.removePopUp(titleWindow);
			}

				
			private function retrieveDocumentTypes_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the documentTypes ComboBox
				documentTypes.removeAll();
				documentTypes.addAll(event.result as ArrayCollection);
			}
			
			private function customerSaved_resultHandler(event:ResultEvent,token:Object=null):void {
				dispatchEvent(new Event("saveSuccess"));
			}
			
			private function retrieveCountries():void{
				var countryServ:CountryService = new CountryService();
				countryServ.retrieveAll(retrieveCountries_resultHandler,faultHandler);
			}
			
			private function retrieveCountries_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the ComboBox
				countries.removeAll();
				countries.addAll(event.result as ArrayCollection);
			}
			
			private function retrieveRegions(country:Country = null):void{
				var regionServ:RegionService = new RegionService();
				if(country==null){
					regionServ.retrieveAll(retrieveRegions_resultHandler,faultHandler);
				}else{
					regionServ.retrieveRegions(country,retrieveRegions_resultHandler,faultHandler);
				}
			}
			
			private function retrieveRegions_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the ComboBox
				regions.removeAll();
				regions.addAll(event.result as ArrayCollection);
			}
			
			//LANGUAGES
			private function retrieveLanguages():void{
				var langServ:LanguageService = new LanguageService();
				langServ.retrieveAll(retrieveLanguages_resultHandler,faultHandler);
			}
			
			private function retrieveLanguages_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the ComboBox
				languages.removeAll();
				languages.addAll(event.result as ArrayCollection);
			}
			
			// Handle a message fault.
			private function faultHandler(event:FaultEvent,token:Object=null):void {
				Alert.show("Received fault: " + event.fault + "\n");
			}
			
			private function allFieldsAreValid():Boolean{
				var valid:Boolean = true;
				comboboxValidator.enabled = true;
				if(comboboxValidator.validate().type == "valid"){
					regExpV.expression = documentTypesCombo.selectedItem.regExp;
					regExpV.enabled = true;
					if(regExpV.validate().type != "valid"){
						valid = false;
					}
				}else{
					valid = false;
				}
				enabledValidators(false);
				return valid;
			}
			
			private function enabledValidators(enabled:Boolean):void{
				comboboxValidator.enabled = enabled;
				regExpV.enabled = enabled;
			}
			
			protected function save():void
			{
				//TODO: validate all data
				if(!allFieldsAreValid()){
					return;
				}
				//fills all fields
				if(currentCustomer.id == null){
					currentCustomer.id = new CustomerPK();
				}
				currentCustomer.id.idNumber = idNumberText.text;
				currentCustomer.id.docType = documentTypesCombo.selectedItem;
				currentCustomer.firstName = firstNameText.text;
				currentCustomer.lastName = lastNameText.text;
				currentCustomer.email = emailText.text;
				currentCustomer.lastLodgementDate = lastLodgementDateChooser.selectedDate;
				currentCustomer.dateOfBirth = dateOfBirthChooser.selectedDate;
				currentCustomer.profession = professionText.text;
				currentCustomer.language = languagesCombo.selectedItem;
				currentCustomer.region = regionsCombo.selectedItem;
				
				//calls service
				if(isUpdate){
					new CustomerService().updateRecord(currentCustomer,customerSaved_resultHandler,faultHandler);
				}else{
					new CustomerService().createRecord(currentCustomer,customerSaved_resultHandler,faultHandler);
				}
				
			}
			
			protected function cancel():void
			{
				dispatchEvent(new Event("cancelClicked"));
			}
			
			private function handleResult(event:ValidationResultEvent):void {
				if (event.type == "valid")
				{
					// For valid events, the results Array contains
					// RegExpValidationResult objects.
					var xResult:RegExpValidationResult;
					
					for (var i:uint = 0; i < event.results.length; i++)
					{
						xResult = event.results[i];
						trace(xResult.matchedIndex + " " +
							xResult.matchedString + "\n");
					}
				}
				else
				{
					// Not necessary, but if you needed to access it, 
					// the results array contains ValidationResult objects. 
					var result:ValidationResult =event.results[0];
				}       
			}
			
			protected function countriesCombo_changeHandler(event:IndexChangeEvent):void
			{
				//Loads regions to selected country
				retrieveRegions(countriesCombo.selectedItem as Country);
			}
			
			protected function regionsCombo_changeHandler(event:IndexChangeEvent):void
			{
				// selects automatically its country
				var region:Region = regionsCombo.selectedItem as Region;
				countriesCombo.selectedItem = region.country;
			}
			
			protected function setInitialFocus():void
			{
				if(enabled){
					if(isUpdate){
						firstNameText.setFocus();
					}else{
						idNumberText.setFocus();
					}
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:RegExpValidator id="regExpV" enabled="false"
							expression="{documentTypesCombo.selectedItem.regExp}" flags="g"
							invalid="handleResult(event);"
							noMatchError="{loc.validator.regExp.noMatchError}" property="text"
							source="{idNumberText}" valid="handleResult(event);"/>
		<mx:EmailValidator id="emV" property="text" required="false" source="{emailText}"/>
		<mx:NumberValidator id="comboboxValidator" enabled="false"
							lowerThanMinError="{loc.validator.requiredFieldError}" minValue="0"
							property="selectedIndex" source="{documentTypesCombo}"/>
	</fx:Declarations>
	<s:HGroup width="100%" height="100%" horizontalAlign="center">
		<s:Form>
			<s:layout>
				<s:FormLayout gap="-14"/>
			</s:layout>  
	
			<s:FormItem label="{loc.customerPK.idNumber}:" required="true" enabled="{!isUpdate}">
				<s:TextInput id="idNumberText"/>
			</s:FormItem>
			<s:FormItem id="docTypeItem" label="{loc.documentType.singular}:" enabled="{!isUpdate}">
				<s:HGroup>
					<s:ComboBox id="documentTypesCombo" dataProvider="{documentTypes}"
								labelField="name"/>
					<s:Button width="24" height="24" click="retrieveDocumentTypes();"
							  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
					<s:Button width="24" height="24" click="addDocumentType();" icon="{Icons.add}"
							  toolTip="{loc.button.add}"/>
				</s:HGroup>
			</s:FormItem>
			<s:FormItem label="{loc.customer.firstName}:">
				<s:TextInput id="firstNameText"/>
			</s:FormItem>
			<s:FormItem label="{loc.customer.lastName}:">
				<s:TextInput id="lastNameText"/>
			</s:FormItem>
			<s:FormItem label="{loc.customer.email}:">
				<s:TextInput id="emailText" widthInChars="15"/>
			</s:FormItem>
			<s:FormItem label="{loc.customer.profession}:">
				<s:TextInput id="professionText"/>
			</s:FormItem>
		</s:Form>
		<s:Form>
			<s:layout>
				<s:FormLayout gap="-14"/>
			</s:layout>  
			
			<s:FormItem label="{loc.customer.dateOfBirth}:">
				<mx:DateField id="dateOfBirthChooser" width="120"
							  dayNames="{Locale.getInstance().dayNamesAbbr}" editable="true"
							  formatString="{loc.dateFormat.toUpperCase()}"
							  monthNames="{Locale.getInstance().monthNames}"/>
			</s:FormItem>
			<s:FormItem label="{loc.customer.lastLodgementDate}:">
				<mx:DateField id="lastLodgementDateChooser" width="120"
							  dayNames="{Locale.getInstance().dayNamesAbbr}" editable="true"
							  formatString="{loc.dateFormat.toUpperCase()}"
							  monthNames="{Locale.getInstance().monthNames}"/>
			</s:FormItem>
			<s:FormItem id="countryItem" label="{loc.country.singular}:">
				<s:HGroup>
					<s:ComboBox id="countriesCombo" dataProvider="{countries}" labelField="name" change="countriesCombo_changeHandler(event)"/>
					<s:Button width="24" height="24" click="retrieveCountries();"
							  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
					<s:Button width="24" height="24" click="addCountry();" icon="{Icons.add}"
							  toolTip="{loc.button.add}"/>
				</s:HGroup>
			</s:FormItem>
			<s:FormItem id="regionItem" label="{loc.region.singular}:">
				<s:HGroup>
					<s:ComboBox id="regionsCombo" dataProvider="{regions}" labelField="name" change="regionsCombo_changeHandler(event)"/>
					<s:Button width="24" height="24" click="retrieveRegions();"
							  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
					<s:Button width="24" height="24" click="addRegion();" icon="{Icons.add}"
							  toolTip="{loc.button.add}"/>
				</s:HGroup>
			</s:FormItem>
			<s:FormItem id="languageItem" label="{loc.language.singular}:">
				<s:HGroup>
					<s:ComboBox id="languagesCombo" dataProvider="{languages}" labelField="name"/>
					<s:Button width="24" height="24" click="retrieveLanguages();"
							  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
					<s:Button width="24" height="24" click="addLanguage();" icon="{Icons.add}"
							  toolTip="{loc.button.add}"/>
				</s:HGroup>
			</s:FormItem>
		</s:Form>
	</s:HGroup>
	<!-- BUTTONS -->
	<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
		<s:Button label="{loc.button.save}" click="save()" icon="{Icons.save}"/>
		<s:Button label="{loc.button.cancel}" click="cancel()" icon="{Icons.cancel}"/>
	</s:HGroup>
	<s:Spacer height="5"/>
</s:VGroup>
