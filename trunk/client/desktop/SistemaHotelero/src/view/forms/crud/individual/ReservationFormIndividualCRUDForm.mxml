<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" creationComplete="init()">
	<fx:Metadata> 
		[Event(name="cancelClicked", type="flash.events.Event")]
		[Event(name="saveSuccess", type="flash.events.Event")]
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import locales.Locale;
			
			import model.ReservationForm;
			import model.StateReservationForm;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import services.crud.CustomerService;
			import services.crud.ReservationFormService;
			
			import utils.WindowsUtils;
			
			[Bindable]
			public var loc:Object;
			
			[Bindable]
			public var isUpdate:Boolean;
			
			[Bindable]
			public var customers:ArrayCollection  = new ArrayCollection();
			
			[Bindable]
			private var reservationFormStates:ArrayCollection; 
			
			private var _currentReservationForm:ReservationForm;
			
			private var titleWindow:TitleWindow;
			private var customerForm:CustomerIndividualCRUDForm;
			
			public function get currentReservationForm():ReservationForm
			{
				return _currentReservationForm;
			}
			
			public function set currentReservationForm(value:ReservationForm):void
			{
				_currentReservationForm = value;
			}
			
			private function save():void{
				//TODO: validate all data
				//if(!allFieldsAreValid()){
				//	return;
				//}
				
				
				//calls service
				if(isUpdate){
					new ReservationFormService().updateRecord(_currentReservationForm,reservationFormSaved_resultHandler,faultHandler);
				}else{
					new ReservationFormService().createRecord(_currentReservationForm,reservationFormSaved_resultHandler,faultHandler);
				}
			}
			
			private function reservationFormSaved_resultHandler(event:ResultEvent,token:Object=null):void {
				_currentReservationForm = event.result as ReservationForm;
				dispatchEvent(new Event("saveSuccess"));
			}
			
			private function cancel():void{
				dispatchEvent(new Event("cancelClicked"));
			}
			
			// Handle a message fault.
			private function faultHandler(event:FaultEvent,token:Object=null):void {
				Alert.show("Received fault: " + event.fault + "\n");
			}
			
			protected function init():void
			{
				currentReservationForm = new ReservationForm();
				retrieveCustomers();
				loadStates();
			}
			
			private function retrieveCustomers():void{
				var customerServ:CustomerService = new CustomerService();
				customerServ.retrieveAll(retrieveCustomers_resultHandler,faultHandler);
			}
			
			private function retrieveCustomers_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the documentTypes ComboBox
				customers.removeAll();
				customers.addAll(event.result as ArrayCollection);
			}
			
			private function addCustomer():void{
				customerForm = new CustomerIndividualCRUDForm();
				customerForm.loc = loc;
				customerForm.isUpdate = false;
				customerForm.addEventListener("saveSuccess",customer_saveSuccess);
				customerForm.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.button.newLabel + ": " + loc.customer.singular,customerForm);
			}
			
			private function titleWindow_close(evt:Object):void {
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function customer_saveSuccess(evt:Object):void {
				customers.addItem(customerForm.currentCustomer);
				WindowsUtils.autoSelectComboBox(customersCombo, customerForm.currentCustomer);
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function loadStates():void{
				reservationFormStates = new ArrayCollection();
				for each (var id:String in StateReservationForm.stateReservationIds){
					reservationFormStates.addItem(new StateReservationForm(id, loc));
				}
				
				//select by default the first one if there no current Object
				if(currentReservationForm == null || currentReservationForm.state == null){
					stateList.selectedIndex = 0;
				}else{
					WindowsUtils.autoSelectDropDownList(stateList,currentReservationForm.state.id);
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
		</s:stroke>
		<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
	</s:Rect>
	<s:VGroup width="100%" height="100%">
		<s:HGroup width="100%" horizontalAlign="center">
			<s:Form>
				<s:layout>
					<s:FormLayout gap="-14"/>
				</s:layout>  
				
				<s:FormItem label="{loc.reservationForm.id}:" required="true" enabled="false">
					<s:TextInput id="idText"/>
				</s:FormItem>
				
				<s:FormItem id="customerItem" label="{loc.customer.singular}:" required="true">
					<s:HGroup>
						<s:ComboBox id="customersCombo" dataProvider="{customers}" labelField="lastName"/>
						<s:Button width="24" height="24" click="retrieveCustomers();"
								  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
						<s:Button width="24" height="24" click="addCustomer();" icon="{Icons.add}"
								  toolTip="{loc.button.add}"/>
					</s:HGroup>
				</s:FormItem>
				
				<s:FormItem label="{loc.reservationForm.state.singular}:" required="true">
					<s:HGroup verticalAlign="middle">
						<s:DropDownList id="stateList" dataProvider="{reservationFormStates}" width="150"/>
						<s:Button width="24" height="24" click="loadStates();"
								  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
					</s:HGroup>
				</s:FormItem>
				
				<s:FormItem label="{loc.reservationForm.dateFrom}:" required="true">
					<mx:DateField id="dateFromChooser" width="120"
								  dayNames="{Locale.getInstance().dayNamesAbbr}" editable="true"
								  formatString="{loc.dateFormat.toUpperCase()}"
								  monthNames="{Locale.getInstance().monthNames}"/>
				</s:FormItem>
				
				<s:FormItem label="{loc.reservationForm.dateTo}:" required="true">
					<mx:DateField id="dateToChooser" width="120"
								  dayNames="{Locale.getInstance().dayNamesAbbr}" editable="true"
								  formatString="{loc.dateFormat.toUpperCase()}"
								  monthNames="{Locale.getInstance().monthNames}"/>
				</s:FormItem>
				
				<s:FormItem label="{loc.reservationForm.adultsQuantity}:" required="true">
					<s:NumericStepper id="adultsQtyStepper" maximum="{Number.MAX_VALUE}" width="50"/>
				</s:FormItem>
				
				<s:FormItem label="{loc.reservationForm.childrenQuantity}:" required="true">
					<s:NumericStepper id="childrenQtyStepper" maximum="{Number.MAX_VALUE}" width="50"/>
				</s:FormItem>
				
			</s:Form>
		</s:HGroup>
		<!-- BUTTONS -->
		<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
			<s:Button label="{loc.button.save}" icon="{Icons.save}" click="save()"/>
			<s:Button label="{loc.button.cancel}" icon="{Icons.cancel}" click="cancel()"/>
		</s:HGroup>
		<s:Spacer height="5"/>
	</s:VGroup>
</s:Group>
