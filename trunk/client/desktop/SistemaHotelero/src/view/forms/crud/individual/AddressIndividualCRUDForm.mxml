<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" creationComplete="init(event)">
	<fx:Metadata> 
		[Event(name="cancelClicked", type="flash.events.Event")]
		[Event(name="saveSuccess", type="flash.events.Event")]
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import mx.containers.TitleWindow;
			import spark.events.IndexChangeEvent;
			import model.Region;
			import services.crud.CountryService;
			import services.crud.RegionService;
			import mx.collections.ArrayCollection;
			import model.Address;
			import model.Country;
			
			import mx.controls.Alert;
			import mx.controls.Text;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import utils.FaultHandler;
			import utils.WindowsUtils;
			import mx.managers.PopUpManager;
			
			[Bindable]
			public var loc:Object;
			
			[Bindable]
			private var countries:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var regions:ArrayCollection = new ArrayCollection();
			
			private var _currentAddress:Address = new Address();
			
			private var titleWindow:TitleWindow;
			private var countryForm:CountryIndividualCRUDForm;
			private var regionForm:RegionIndividualCRUDForm;
			
			public function get currentAddress():Address
			{
				return _currentAddress;
			}

			public function set currentAddress(value:Address):void
			{
				_currentAddress = value;
			}

			private function allFieldsAreValid():Boolean{
				
				setEnabledValidators(true);
				
				var valArray:Array = new Array();
				
				valArray.push(streetValidator);
				valArray.push(cityValidator);
				valArray.push(zipCodeValidator);
				valArray.push(stateValidator);
				valArray.push(countryValidator);
				valArray.push(regionValidator);
				
				var validatorErrorArray:Array = Validator.validateAll(valArray);
				var allFieldsAreValid:Boolean = validatorErrorArray.length == 0;
				
				setEnabledValidators(false);
				return allFieldsAreValid;
			}
			
			private function setEnabledValidators(enabled:Boolean):void{
				streetValidator.enabled = enabled;
				cityValidator.enabled = enabled;
				zipCodeValidator.enabled = enabled;
				stateValidator.enabled = enabled;
				countryValidator.enabled = enabled;
				regionValidator.enabled = enabled;
			}
			
			private function save():void{
				// validate all data
				if(!allFieldsAreValid()){
					return;
				}
				
				if(_currentAddress == null){
					_currentAddress = new Address();
				}
				
				_currentAddress.street = streetText.text;
				_currentAddress.city = cityText.text;
				_currentAddress.zipCode = zipCodeText.text;
				_currentAddress.state = stateText.text;
				_currentAddress.region = regionsCombo.selectedItem; //a region contains a country (composition)
				
				dispatchEvent(new Event("saveSuccess"));
			}
			
			
			private function cancel():void{
				dispatchEvent(new Event("cancelClicked"));
			}
			
			protected function init(event:FlexEvent):void
			{
				//documentTypeText.setFocus();
				if(_currentAddress != null){
					streetText.text = _currentAddress.street;
					cityText.text = _currentAddress.city;
					zipCodeText.text = _currentAddress.zipCode;
					stateText.text = _currentAddress.state;
				}
				
				retrieveCountries();
			}
			
			private function titleWindow_close(evt:Object):void {
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function addCountry():void{
				countryForm = new CountryIndividualCRUDForm();
				countryForm.loc = loc;
				countryForm.isUpdate = false;
				countryForm.addEventListener("saveSuccess",country_saveSuccess);
				countryForm.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.button.newLabel + ": " + loc.country.singular,countryForm,this);
			}
			
			private function country_saveSuccess(evt:Object):void {
				countries.addItem(countryForm.currentCountry);
				WindowsUtils.autoSelectComboBox(countriesCombo, countryForm.currentCountry);
				PopUpManager.removePopUp(titleWindow);
			}
			
			
			private function addRegion():void{
				regionForm = new RegionIndividualCRUDForm();
				regionForm.countryPreSelected = countriesCombo.selectedItem;
				regionForm.loc = loc;
				regionForm.isUpdate = false;
				regionForm.addEventListener("saveSuccess",region_saveSuccess);
				regionForm.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.button.newLabel + ": " + loc.region.singular,regionForm,this);
			}
			
			private function region_saveSuccess(evt:Object):void {
				regions.addItem(regionForm.currentRegion);
				WindowsUtils.autoSelectComboBox(regionsCombo, regionForm.currentRegion);
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function retrieveCountries():void{
				var countryServ:CountryService = new CountryService();
				countryServ.retrieveAll(retrieveCountries_resultHandler,FaultHandler.defaultFaultHandler);
			}
			
			private function retrieveCountries_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the ComboBox
				countries.removeAll();
				countries.refresh();
				countries.addAll(event.result as ArrayCollection);
				
				if(_currentAddress != null && _currentAddress.region != null){
					WindowsUtils.autoSelectComboBox(countriesCombo,_currentAddress.region.country);
					
					retrieveRegions(_currentAddress.region.country);
				}else{
					countriesCombo.selectedIndex = 0;
					//filter by the first element 
					retrieveRegions(countriesCombo.selectedItem as Country);
				}
				
			}
			
			private function retrieveRegions(country:Country = null):void{
				var regionServ:RegionService = new RegionService();
				if(country==null){
					regionServ.retrieveAll(retrieveRegions_resultHandler,FaultHandler.defaultFaultHandler);
				}else{
					regionServ.retrieveRegions(country,retrieveRegions_resultHandler,FaultHandler.defaultFaultHandler);
				}
			}
			
			private function retrieveRegions_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the ComboBox
				regions.removeAll();
				regions.refresh();
				regions.addAll(event.result as ArrayCollection);
				
				if(_currentAddress != null && _currentAddress.region != null){
					WindowsUtils.autoSelectComboBox(regionsCombo,_currentAddress.region);
				}else{
					regionsCombo.selectedIndex = 0;
				}
			}
			
			
			protected function countriesCombo_changeHandler(event:IndexChangeEvent):void
			{
				//as the country has changed, the current region is not specified
				if(_currentAddress != null && _currentAddress.region != null){
					_currentAddress.region = null;
				}
				
				//Loads regions to selected country
				retrieveRegions(countriesCombo.selectedItem as Country);
			}
			
			protected function regionsCombo_changeHandler(event:IndexChangeEvent):void
			{
				// selects automatically its country
				var region:Region = regionsCombo.selectedItem as Region;
				
				WindowsUtils.autoSelectComboBox(countriesCombo,region.country);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:StringValidator id="streetValidator" 
							enabled="false"
							required="false"
							requiredFieldError="{loc.validator.requiredFieldError}" 
							source="{streetText}"
							property="text"/>
		<mx:StringValidator id="cityValidator" 
							enabled="false"
							required="false"
							requiredFieldError="{loc.validator.requiredFieldError}" 
							source="{cityText}"
							property="text"/>
		<mx:StringValidator id="zipCodeValidator" 
							enabled="false"
							required="false"
							requiredFieldError="{loc.validator.requiredFieldError}" 
							source="{zipCodeText}"
							property="text"/>
		<mx:StringValidator id="stateValidator" 
							enabled="false"
							required="false"
							requiredFieldError="{loc.validator.requiredFieldError}" 
							source="{stateText}"
							property="text"/>
		<mx:NumberValidator id="countryValidator"
							enabled="false"
							required="false"
							requiredFieldError="{loc.validator.requiredFieldError}"
							minValue="0"
							lowerThanMinError="{loc.validator.requiredFieldError}" 
							source="{countriesCombo}"
							property="selectedIndex" 
							/>
		<mx:NumberValidator id="regionValidator"
							enabled="false"
							required="false"
							requiredFieldError="{loc.validator.requiredFieldError}"
							minValue="0"
							lowerThanMinError="{loc.validator.requiredFieldError}" 
							source="{regionsCombo}"
							property="selectedIndex" 
							/>
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
		</s:stroke>
		<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
	</s:Rect>
	<s:VGroup width="100%" height="100%">
		<s:HGroup width="100%" horizontalAlign="center">
			<s:Form>
				<s:layout>
					<s:FormLayout gap="-14"/>
				</s:layout>  
				
				<s:FormItem label="{loc.customer.address.street}:" required="false">
					<s:TextInput id="streetText" width="210"/>
				</s:FormItem>
				<s:FormItem label="{loc.customer.address.city}:" required="false">
					<s:TextInput id="cityText"/>
				</s:FormItem>
				<s:FormItem label="{loc.customer.address.zipCode}:" required="false">
					<s:TextInput id="zipCodeText"/>
				</s:FormItem>
				<s:FormItem label="{loc.customer.address.state}:" required="false">
					<s:TextInput id="stateText"/>
				</s:FormItem>
				<s:FormItem id="countryItem" label="{loc.country.singular}:" required="true">
					<s:HGroup>
						<s:ComboBox id="countriesCombo" dataProvider="{countries}" labelField="name" 
									change="countriesCombo_changeHandler(event)" requireSelection="true"/>
						<s:Button width="24" height="24" click="retrieveCountries();"
								  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
						<s:Button width="24" height="24" click="addCountry();" icon="{Icons.add}"
								  toolTip="{loc.button.add}"/>
					</s:HGroup>
				</s:FormItem>
				<s:FormItem id="regionItem" label="{loc.region.singular}:" required="true">
					<s:HGroup>
						<s:ComboBox id="regionsCombo" dataProvider="{regions}" labelField="name" 
									change="regionsCombo_changeHandler(event)" requireSelection="true"/>
						<s:Button width="24" height="24" click="retrieveRegions();"
								  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
						<s:Button width="24" height="24" click="addRegion();" icon="{Icons.add}"
								  toolTip="{loc.button.add}"/>
					</s:HGroup>
				</s:FormItem>
			</s:Form>
		</s:HGroup>
		<!-- BUTTONS -->
		<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
			<s:Button label="{loc.button.save}" icon="{Icons.save}" click="save()"/>
			<s:Button label="{loc.button.cancel}" icon="{Icons.cancel}" click="cancel()"/>
		</s:HGroup>
		<s:Spacer height="5"/>
	</s:VGroup>
</s:Group>
