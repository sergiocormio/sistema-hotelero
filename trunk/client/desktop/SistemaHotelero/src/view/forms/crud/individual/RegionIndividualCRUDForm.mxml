<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" creationComplete="init(event)">
	<fx:Metadata> 
		[Event(name="cancelClicked", type="flash.events.Event")]
		[Event(name="saveSuccess", type="flash.events.Event")]
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import model.Country;
			import model.Region;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import resources.icons.Icons;
			
			import services.CountryService;
			import services.RegionService;
			
			import utils.WindowsUtils;
			
			[Bindable]
			public var loc:Object;
			
			[Bindable]
			public var isUpdate:Boolean;
			
			[Bindable]
			private var countries:ArrayCollection = new ArrayCollection();
			
			public var countryPreSelected:Country;			
			
			private var _currentRegion:Region;
			
			private var titleWindow:TitleWindow;
			private var countryForm:CountryIndividualCRUDForm;
			
			
			
			protected function init(event:FlexEvent):void
			{
				//autoloads all combos
				retrieveCountries();
				countriesCombo.setFocus();
			}
			
			public function get currentRegion():Region
			{
				return _currentRegion;
			}

			public function set currentRegion(value:Region):void
			{
				_currentRegion = value;
				regionText.text = _currentRegion.name;
				WindowsUtils.autoSelectComboBox(countriesCombo,_currentRegion.country);
			}

			private function save():void{
				//TODO: validate all data
				//if(!allFieldsAreValid()){
				//	return;
				//}
				_currentRegion = new Region();
				_currentRegion.name = regionText.text;
				_currentRegion.country = countriesCombo.selectedItem;
				
				//calls service
				if(isUpdate){
					new RegionService().updateRecord(_currentRegion,regionSaved_resultHandler,faultHandler);
				}else{
					new RegionService().createRecord(_currentRegion,regionSaved_resultHandler,faultHandler);
				}
			}
			
			private function regionSaved_resultHandler(event:ResultEvent,token:Object=null):void {
				_currentRegion = event.result as Region;
				dispatchEvent(new Event("saveSuccess"));
			}
			
			private function cancel():void{
				dispatchEvent(new Event("cancelClicked"));
			}
			
			// Handle a message fault.
			private function faultHandler(event:FaultEvent,token:Object=null):void {
				Alert.show("Received fault: " + event.fault + "\n");
			}
			
			private function addCountry():void{
				countryForm = new CountryIndividualCRUDForm();
				countryForm.loc = loc;
				countryForm.isUpdate = false;
				countryForm.addEventListener("saveSuccess",country_saveSuccess);
				countryForm.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.button.newLabel + ": " + loc.country.singular,countryForm,this);
			}
			
			private function country_saveSuccess(evt:Object):void {
				countries.addItem(countryForm.currentCountry);
				WindowsUtils.autoSelectComboBox(countriesCombo, countryForm.currentCountry);
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function titleWindow_close(evt:Object):void {
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function retrieveCountries():void{
				var countryServ:CountryService = new CountryService();
				countryServ.retrieveAll(retrieveCountries_resultHandler,faultHandler);
			}
			
			private function retrieveCountries_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the ComboBox
				countries.removeAll();
				countries.addAll(event.result as ArrayCollection);
				//preselects a country
				if(countryPreSelected != null){
					WindowsUtils.autoSelectComboBox(countriesCombo,countryPreSelected);
					countryPreSelected = null;
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:HGroup width="100%" horizontalAlign="center">
		<s:Form>
			<s:layout>
				<s:FormLayout gap="-14"/>
			</s:layout>  
			
			<s:FormItem id="countryItem" label="{loc.country.singular}:">
				<s:HGroup>
					<s:ComboBox id="countriesCombo" dataProvider="{countries}" labelField="name"/>
					<s:Button width="24" height="24" click="retrieveCountries();"
							  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
					<s:Button width="24" height="24" click="addCountry();" icon="{Icons.add}"
							  toolTip="{loc.button.add}"/>
				</s:HGroup>
			</s:FormItem>
			
			<s:FormItem label="{loc.region.name}:" required="true">
				<s:TextInput id="regionText"/>
			</s:FormItem>
			
		</s:Form>
	</s:HGroup>
	<!-- BUTTONS -->
	<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
		<s:Button label="{loc.button.save}" icon="{Icons.save}" click="save()"/>
		<s:Button label="{loc.button.cancel}" icon="{Icons.cancel}" click="cancel()"/>
	</s:HGroup>
	<s:Spacer height="5"/>
</s:VGroup>
