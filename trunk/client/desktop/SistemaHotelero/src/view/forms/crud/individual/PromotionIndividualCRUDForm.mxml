<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" creationComplete="init()">
	<fx:Metadata> 
		[Event(name="closeClicked", type="flash.events.Event")]
		[Event(name="cancelClicked", type="flash.events.Event")]
		[Event(name="saveSuccess", type="flash.events.Event")]
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import locales.Locale;
			
			import model.Promotion;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import services.crud.PromotionService;
			import services.crud.RoomTypeService;
			import services.crud.SeasonService;
			
			import utils.FaultHandler;
			import utils.WindowsUtils;
			
			[Bindable]
			public var loc:Object;
			
			[Bindable]
			public var isUpdate:Boolean;
			
			//ROOM TYPE			
			[Bindable]
			private var roomTypes:ArrayCollection = new ArrayCollection();
			
			private var roomTypeForm:RoomTypeIndividualCRUDForm;
			
			private var titleWindow:TitleWindow;
			private var _currentPromotion:Promotion = new Promotion();
			
			private var roomTypePreSelected:Object;
			
			public function get currentPromotion():Promotion
			{
				return _currentPromotion;
			}
			
			public function set currentPromotion(value:Promotion):void
			{
				_currentPromotion = value;
				
				if(_currentPromotion.id != null){
					WindowsUtils.autoSelectComboBox(roomTypesCombo, _currentPromotion.roomType);
				}

				//avoids showing NaN
				if(_currentPromotion.price >= 0){
					priceText.text = _currentPromotion.price.toString();
				}else{
					priceText.text = '';
				}
				
				nameText.text = currentPromotion.name;
				descriptionText.text = currentPromotion.description;
				dateFromChooser.selectedDate = currentPromotion.dateFrom;
				dateToChooser.selectedDate = currentPromotion.dateTo;
			
			}
			
			/**
			 * Converts this Form in a PromotionView form 
			 */
			public function convertToPromotionView():void
			{
				buttonsGroup.removeAllElements();
				var closeButton:Button = new Button();
				closeButton.label = loc.button.close;
				closeButton.setStyle("icon",Icons.ok);
				closeButton.addEventListener(MouseEvent.CLICK,close);
				buttonsGroup.addElement(closeButton);
				//makes read-only all the components
				nameText.editable = false;
				descriptionText.editable = false;
				roomTypeItem.enabled = false;
				dateFromChooser.enabled = false;
				dateToChooser.enabled = false;
				priceText.editable = false;
			}
			
			private function close(event:Event = null):void{
				dispatchEvent(new Event("closeClicked"));
			}
			
			private function allFieldsAreValid():Boolean{
				
				setEnabledValidators(true);
				
				var valArray:Array = new Array();
				
				valArray.push(nameValidator);
				valArray.push(roomTypeValidator);
				valArray.push(dateFromValidator);
				valArray.push(dateToValidator);
				valArray.push(priceValidator);
				
				var validatorErrorArray:Array = Validator.validateAll(valArray);;
				var isValidForm:Boolean = validatorErrorArray.length == 0;
				
				setEnabledValidators(false);
				
				return isValidForm;
				
			}
			
			private function setEnabledValidators(enabled:Boolean):void{
				nameValidator.enabled = enabled;
				roomTypeValidator.enabled = enabled;
				dateFromValidator.enabled = enabled;
				dateToValidator.enabled = enabled;
				priceValidator.enabled = enabled;
			}
			
			private function save():void{
				// validate all data
				if(!allFieldsAreValid()){
					return;
				}
				
				//_currentPromotion.name = PromotionText.text;
				
				//fills all fields
				_currentPromotion.name = nameText.text;
				_currentPromotion.description = descriptionText.text;
				_currentPromotion.roomType = roomTypesCombo.selectedItem;
				_currentPromotion.dateFrom = dateFromChooser.selectedDate;
				_currentPromotion.dateTo = dateToChooser.selectedDate;
				_currentPromotion.price = Number(priceText.text);
				
				//calls service
				if(isUpdate){
					new PromotionService().updateRecord(_currentPromotion,PromotionSaved_resultHandler,FaultHandler.defaultFaultHandler);
				}else{
					new PromotionService().createRecord(_currentPromotion,PromotionSaved_resultHandler,FaultHandler.defaultFaultHandler);
				}
			}
			
			private function PromotionSaved_resultHandler(event:ResultEvent,token:Object=null):void {
				_currentPromotion = event.result as Promotion;
				dispatchEvent(new Event("saveSuccess"));
			}
			
			private function cancel(event:Event = null):void{
				dispatchEvent(new Event("cancelClicked"));
			}
			
			protected function init():void
			{
				currentPromotion = new Promotion();
				//PromotionText.setFocus();
				retrieveRoomTypes();
			}
			
			public function refreshForm():void{
				retrieveRoomTypes();
			}
			
			
			private function titleWindow_close(evt:Object):void {
				PopUpManager.removePopUp(titleWindow);
			}
			
			//Room Type
			private function retrieveRoomTypes():void{
				var roomTypeServ:RoomTypeService = new RoomTypeService();
				roomTypeServ.retrieveAll(retrieveRoomTypes_resultHandler,FaultHandler.defaultFaultHandler);
			}
			
			private function retrieveRoomTypes_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the ComboBox
				roomTypes.removeAll();
				roomTypes.addAll(event.result as ArrayCollection);
				//preselects a roomType
				if(roomTypePreSelected != null){
					WindowsUtils.autoSelectComboBox(roomTypesCombo,roomTypePreSelected);
					roomTypePreSelected = null;
				}
			}
			
			private function addRoomType():void{
				roomTypeForm = new RoomTypeIndividualCRUDForm();
				roomTypeForm.loc = loc;
				roomTypeForm.isUpdate = false;
				roomTypeForm.addEventListener("saveSuccess",roomType_saveSuccess);
				roomTypeForm.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.button.newLabel + ": " + loc.roomType.singular,roomTypeForm,this);
			}
			
			private function roomType_saveSuccess(evt:Object):void {
				roomTypes.addItem(roomTypeForm.currentRoomType);
				WindowsUtils.autoSelectComboBox(roomTypesCombo, roomTypeForm.currentRoomType);
				PopUpManager.removePopUp(titleWindow);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:StringValidator id="nameValidator" 
							required="true"
							requiredFieldError="{loc.validator.requiredFieldError}" 
							source="{nameText}"
							property="text"/>
		<mx:NumberValidator id="roomTypeValidator"
							enabled="false"
							minValue="0"
							lowerThanMinError="{loc.validator.requiredFieldError}" 
							source="{roomTypesCombo}"
							property="selectedIndex"
							/>
		<mx:DateValidator id="dateFromValidator"
						  required="true"
						  requiredFieldError="{loc.validator.requiredFieldError}"
						  inputFormat="{loc.date.format}"
						  formatError="{loc.validator.invalidFieldValueError}"
						  invalidCharError="{loc.validator.invalidFieldValueError}"
						  wrongDayError="{loc.validator.invalidFieldValueError}"
						  wrongLengthError="{loc.validator.invalidFieldValueError}"
						  wrongMonthError="{loc.validator.invalidFieldValueError}"
						  wrongYearError="{loc.validator.invalidFieldValueError}"
						  source="{dateFromChooser}"
						  property="text"
						  />
		<mx:DateValidator id="dateToValidator"
						  required="true"
						  requiredFieldError="{loc.validator.requiredFieldError}"
						  inputFormat="{loc.date.format}"
						  formatError="{loc.validator.invalidFieldValueError}"
						  invalidCharError="{loc.validator.invalidFieldValueError}"
						  wrongDayError="{loc.validator.invalidFieldValueError}"
						  wrongLengthError="{loc.validator.invalidFieldValueError}"
						  wrongMonthError="{loc.validator.invalidFieldValueError}"
						  wrongYearError="{loc.validator.invalidFieldValueError}"
						  source="{dateToChooser}"
						  property="text"
						  />
		<mx:NumberValidator id="priceValidator"
							required="true"
							requiredFieldError="{loc.validator.requiredFieldError}"
							minValue="0"
							domain="real"
							allowNegative="false"
							precision="2"
							precisionError="{loc.validator.precisionError}"
							separationError="{loc.validator.invalidFieldValueError}"
							negativeError="{loc.validator.invalidFieldValueError}"
							lowerThanMinError="{loc.validator.invalidFieldValueError}"
							invalidCharError="{loc.validator.invalidFieldValueError}"
							invalidFormatCharsError="{loc.validator.invalidFieldValueError}"
							decimalPointCountError="{loc.validator.invalidFieldValueError}"
							source="{priceText}"
							property="text"
							/>
		
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
		</s:stroke>
		<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
	</s:Rect>
	<s:VGroup width="100%" height="100%">
		<s:HGroup width="100%" horizontalAlign="center">
			<s:Form>
				<s:layout>
					<s:FormLayout gap="-14"/>
				</s:layout>  
				
				<s:FormItem id="nameItem" label="{loc.promotion.name}:" required="true">
					<s:TextInput id="nameText"/>
				</s:FormItem>
				
				<s:FormItem label="{loc.promotion.description}:" required="false">
					<s:TextArea id="descriptionText"/>
				</s:FormItem>
				
			</s:Form>
			
			<s:Form>
				<s:layout>
					<s:FormLayout gap="-14"/>
				</s:layout>
				
				<s:FormItem id="roomTypeItem" label="{loc.roomType.singular}:">
					<s:HGroup>
						<s:ComboBox id="roomTypesCombo" dataProvider="{roomTypes}" labelField="name" requireSelection="true"/>
						<s:Button width="24" height="24" click="retrieveRoomTypes();"
								  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
						<s:Button width="24" height="24" click="addRoomType();" icon="{Icons.add}"
								  toolTip="{loc.button.add}"/>
					</s:HGroup>
				</s:FormItem>
				
				<s:FormItem label="{loc.promotion.dateFrom}:" required="true">
					<mx:DateField id="dateFromChooser" width="120"
								  dayNames="{Locale.getInstance().dayNamesAbbr}" editable="true"
								  formatString="{loc.dateFormat.toUpperCase()}"
								  monthNames="{Locale.getInstance().monthNames}"/>
				</s:FormItem>
				
				<s:FormItem label="{loc.promotion.dateTo}:" required="true">
					<mx:DateField id="dateToChooser" width="120"
								  dayNames="{Locale.getInstance().dayNamesAbbr}" editable="true"
								  formatString="{loc.dateFormat.toUpperCase()}"
								  monthNames="{Locale.getInstance().monthNames}"/>
				</s:FormItem>
				
				<s:FormItem label="{loc.promotion.totalPrice}:" required="true">
					<s:TextInput id="priceText"/>
				</s:FormItem>
			</s:Form>
		</s:HGroup>
		<!-- BUTTONS -->
		<s:HGroup id="buttonsGroup" width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
			<s:Button label="{loc.button.save}" icon="{Icons.save}" click="save()"/>
			<s:Button label="{loc.button.cancel}" icon="{Icons.cancel}" click="cancel()"/>
		</s:HGroup>
		<s:Spacer height="5"/>
	</s:VGroup>
</s:Group>
