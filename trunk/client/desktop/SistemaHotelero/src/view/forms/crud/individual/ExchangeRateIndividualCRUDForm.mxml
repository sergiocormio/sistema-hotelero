<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" creationComplete="init()">
	<fx:Metadata> 
		[Event(name="cancelClicked", type="flash.events.Event")]
		[Event(name="saveSuccess", type="flash.events.Event")]
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.formats.Float;
			
			import model.ExchangeRate;
			
			import mx.controls.Alert;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import services.crud.ExchangeRateService;
			
			import utils.FaultHandler;
			import utils.Utils;
			
			[Bindable]
			public var loc:Object;
			
			private var _isUpdate:Boolean;
			
			private var _currentExchangeRate:ExchangeRate;
			
			[Bindable]
			public function get isUpdate():Boolean
			{
				return _isUpdate;
			}

			public function set isUpdate(value:Boolean):void
			{
				_isUpdate = value;
				//disables Id if is update
				currencyCodeText.enabled = !_isUpdate;
			}

			public function get currentExchangeRate():ExchangeRate
			{
				return _currentExchangeRate;
			}
			
			public function set currentExchangeRate(value:ExchangeRate):void
			{
				_currentExchangeRate = value;
				currencyCodeText.text = _currentExchangeRate.id;
				exchangeRateText.text = _currentExchangeRate.name;
				currencySymbolText.text = _currentExchangeRate.currencySymbol;
				//avoids showing NaN
				if(_currentExchangeRate.valueAgainstReal >= 0){
					valueAgainstRealText.text = _currentExchangeRate.valueAgainstReal.toString();
				}else{
					valueAgainstRealText.text = '';
				}
			}
			
			private function allFieldsAreValid():Boolean{
				
				setEnabledValidators(true);
				
				var valArray:Array = new Array();
				
				valArray.push(ccyCodeValidator);
				valArray.push(exchangeRateValidator);
				valArray.push(valueAgainstRealValidator);
				
				var validatorErrorArray:Array = Validator.validateAll(valArray);;
				var isValidForm:Boolean = validatorErrorArray.length == 0;
				
				setEnabledValidators(false);
				
				return isValidForm;
				
			}
			
			private function setEnabledValidators(enabled:Boolean):void{
				ccyCodeValidator.enabled = enabled;
				exchangeRateValidator.enabled = enabled;
				valueAgainstRealValidator.enabled = enabled;
			}
			
			private function save():void{
				// validate all data
				if(!allFieldsAreValid()){
					return;
				}
				_currentExchangeRate.id = currencyCodeText.text;
				_currentExchangeRate.name = exchangeRateText.text;
				_currentExchangeRate.currencySymbol = currencySymbolText.text;
				_currentExchangeRate.valueAgainstReal = Number(valueAgainstRealText.text);
				
				//calls service
				if(isUpdate){
					new ExchangeRateService().updateRecord(_currentExchangeRate,exchangeRateSaved_resultHandler,FaultHandler.defaultFaultHandler);
				}else{
					new ExchangeRateService().createRecord(_currentExchangeRate,exchangeRateSaved_resultHandler,FaultHandler.defaultFaultHandler);
				}
			}
			
			private function exchangeRateSaved_resultHandler(event:ResultEvent,token:Object=null):void {
				_currentExchangeRate = event.result as ExchangeRate;
				dispatchEvent(new Event("saveSuccess"));
			}
			
			private function cancel():void{
				dispatchEvent(new Event("cancelClicked"));
			}
			
			protected function init():void
			{
				currentExchangeRate = new ExchangeRate();
				//exchangeRateText.setFocus();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:StringValidator id="ccyCodeValidator" 
							required="true"
							requiredFieldError="{loc.validator.requiredFieldError}" 
							source="{currencyCodeText}"
							property="text"
							/>
		<mx:StringValidator id="exchangeRateValidator" 
							required="true"
							requiredFieldError="{loc.validator.requiredFieldError}" 
							source="{exchangeRateText}"
							property="text"
							/>
		<mx:NumberValidator id="valueAgainstRealValidator"
							required="true"
							requiredFieldError="{loc.validator.requiredFieldError}"
							minValue="0"
							domain="real"
							allowNegative="false"
							precision="2"
							precisionError="{loc.validator.precisionError}"
							separationError="{loc.validator.invalidFieldValueError}"
							negativeError="{loc.validator.invalidFieldValueError}"
							lowerThanMinError="{loc.validator.invalidFieldValueError}"
							invalidCharError="{loc.validator.invalidFieldValueError}"
							invalidFormatCharsError="{loc.validator.invalidFieldValueError}"
							decimalPointCountError="{loc.validator.invalidFieldValueError}"
							source="{valueAgainstRealText}"
							property="text"
							/>
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
		</s:stroke>
		<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
	</s:Rect>
	<s:VGroup width="100%" height="100%">
		<s:HGroup width="100%" horizontalAlign="center">
			<s:Form>
				<s:layout>
					<s:FormLayout gap="-14"/>
				</s:layout>  
				
				<s:FormItem label="{loc.exchangeRate.currencyCode}:" required="true">
					<s:TextInput id="currencyCodeText"/>
				</s:FormItem>
				<s:FormItem label="{loc.exchangeRate.name}:" required="true">
					<s:TextInput id="exchangeRateText"/>
				</s:FormItem>
				<s:FormItem label="{loc.exchangeRate.currencySymbol}:" required="false">
					<s:TextInput id="currencySymbolText"/>
				</s:FormItem>
				<s:FormItem label="{loc.exchangeRate.valueAgainstReal}:" required="true">
					<s:TextInput id="valueAgainstRealText" restrict="., 0-9" changing="Utils.convertsToDecimalCharacterChangingEvent(event)"/>
				</s:FormItem>
			</s:Form>
		</s:HGroup>
		<!-- BUTTONS -->
		<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
			<s:Button label="{loc.button.save}" icon="{Icons.save}" click="save()"/>
			<s:Button label="{loc.button.cancel}" icon="{Icons.cancel}" click="cancel()"/>
		</s:HGroup>
		<s:Spacer height="5"/>
	</s:VGroup>
</s:Group>