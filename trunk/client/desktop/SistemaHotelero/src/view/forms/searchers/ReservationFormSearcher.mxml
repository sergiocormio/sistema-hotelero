<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="980" height="450"
		 creationComplete="init()">
	<fx:Metadata> 
		[Event(name="onCancel", type="flash.events.Event")]
		[Event(name="onSelect", type="flash.events.Event")]
	</fx:Metadata> 
	<fx:Declarations>
		<s:RadioButtonGroup id="filterSelected" itemClick="filterSelected_itemClickHandler(event)"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import locales.Locale;
			
			import model.Customer;
			import model.ReservationForm;
			import model.Room;
			import model.StateReservationForm;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.rpc.events.ResultEvent;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import services.crud.CustomerService;
			import services.crud.ReservationFormService;
			import services.crud.RoomService;
			
			import spark.events.GridSelectionEvent;
			import spark.skins.spark.DefaultGridItemRenderer;
			
			import utils.DateTimeUtils;
			import utils.FaultHandler;
			
			/* if empty: query all states, otherwise, filter by the specified states */
			[Bindable]
			public var statesToQuery:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var loc:Object = Locale.getInstance().getCurrentLocale();
			
			[Bindable]
			private var reservationForms:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var _reservationFormSelected:ReservationForm;
			
			[Bindable]
			private var customers:ArrayCollection  = new ArrayCollection();
			
			[Bindable]
			private var rooms:ArrayCollection  = new ArrayCollection();
			
			private function retrieveReservationForms_resultHandler(event:ResultEvent,token:Object=null):void {
				_reservationFormSelected = null;
				reservationForms.removeAll();
				reservationForms.refresh();
				reservationForms.addAll(event.result as ArrayCollection);
			}
			
			public function get reservationFormSelected():ReservationForm
			{
				return _reservationFormSelected;
			}

			protected function onSelect_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event("onSelect"));
			}
			
			private function stateFormat(item:Object,column:GridColumn):String
			{
				var value:String = item [column.dataField] as String; 
				return loc.reservationForm.state[value];
			}
			
			private function dateFormat(item:Object,column:GridColumn):String
			{
				return DateTimeUtils.formatDateWithPattern(item [column.dataField] as Date,loc.dateFormat);
			}
			
			protected function grid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				_reservationFormSelected = grid.selectedItem as ReservationForm;
			}
			
			private function retrieveCustomers():void{
				var customerServ:CustomerService = new CustomerService();
				customerServ.retrieveAll(retrieveCustomers_resultHandler,FaultHandler.defaultFaultHandler);
			}
			
			private function retrieveCustomers_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the ComboBox
				customers.removeAll();
				customers.refresh();
				customers.addAll(event.result as ArrayCollection);
			}
			
			private function retrieveRooms():void{
				var serv:RoomService = new RoomService();
				serv.retrieveAll(retrieveRooms_resultHandler,FaultHandler.defaultFaultHandler);
			}
			
			private function retrieveRooms_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the ComboBox
				rooms.removeAll();
				rooms.refresh();
				rooms.addAll(event.result as ArrayCollection);
			}
			
			protected function init():void
			{
				filterByRoom.selected = true;
				filterSelected_itemClickHandler(null);
				retrieveCustomers();
				retrieveRooms();
				dateChooser.selectedDate = new Date();
			}
			
			protected function consultButton_clickHandler(event:MouseEvent):void
			{
				_reservationFormSelected = null;
				filterReservationForms();						
			}
			
			protected function cleanButton_clickHandler(event:MouseEvent):void
			{
				cleanFilterForm();
				//refreshGrid();
			}
			
			private function cleanFilterForm():void
			{
				dateChooser.selectedDate = new Date();
				customersCombo.selectedIndex = -1;
				roomsCombo.selectedIndex = -1;
			}
			
			private function filterReservationForms():void
			{
				if(filterByRoom.selected){
					if(dateChooser.selectedDate != null && roomsCombo.selectedIndex>-1){
						var roomSelected:Room = roomsCombo.selectedItem as Room;
						new ReservationFormService().retrieveReservationFormsByDateAndRoom(dateChooser.selectedDate,roomSelected, statesToQuery, retrieveReservationForms_resultHandler, FaultHandler.defaultFaultHandler);
					}
				}else{
					var customer:Customer = null;
					
					if(customersCombo.selectedIndex > -1){
						customer = customersCombo.selectedItem as Customer;
						new ReservationFormService().retrieveReservationFormsByCustomer(customer, statesToQuery, retrieveReservationForms_resultHandler, FaultHandler.defaultFaultHandler);
					}
				}
				
			}
			
			protected function filterSelected_itemClickHandler(event:ItemClickEvent):void
			{
				if(filterByRoom.selected){
					roomsItem.enabled = true;
					dateItem.enabled = true;
					customerItem.enabled = false;
				}else{
					roomsItem.enabled = false;
					dateItem.enabled = false;
					customerItem.enabled = true;
				}
				
			}
			
		]]>
	</fx:Script>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
		</s:stroke>
		<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
	</s:Rect>
	<s:VGroup width="100%" height="100%" paddingBottom="10" paddingTop="10" paddingLeft="10" paddingRight="10">
		<s:HGroup width="100%" horizontalAlign="center">
			<s:VGroup horizontalAlign="right">
				<s:Spacer height="15"/>
				<s:RadioButton group="{filterSelected}" id="filterByRoom"/>
				<s:Spacer height="2"/>
				<s:RadioButton group="{filterSelected}" id="filterByCustomer"/>
			</s:VGroup>
			<s:Form>
				<s:layout>
					<s:FormLayout gap="-14"/>
				</s:layout>  
				
				<s:FormItem label="{loc.room.singular}:" id="roomsItem" required="false">
					<s:HGroup>
						<s:ComboBox id="roomsCombo" dataProvider="{rooms}" labelField="name"/>
						<s:Button width="24" height="24" click="retrieveRooms();"
								  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
					</s:HGroup>
				</s:FormItem>
				
				<s:FormItem id="customerItem" label="{loc.customer.singular}:"  required="true">
					<s:HGroup>
						<s:ComboBox id="customersCombo" dataProvider="{customers}" labelField="name" width="200"/>
						<s:Button width="24" height="24" click="retrieveCustomers();"
								  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
					</s:HGroup>
				</s:FormItem>
			</s:Form>
			<s:Form>
				<s:layout>
					<s:FormLayout gap="-14"/>
				</s:layout>
				
				<s:FormItem label="{loc.transfer.date}:" id="dateItem" required="true">
					<mx:DateField id="dateChooser" width="120"
								  dayNames="{Locale.getInstance().dayNamesAbbr}" editable="true"
								  formatString="{loc.dateFormat.toUpperCase()}"
								  monthNames="{Locale.getInstance().monthNames}"/>
				</s:FormItem>
				
			</s:Form>
		</s:HGroup>
		<s:HGroup width="100%" horizontalAlign="center">
			<s:Button id="consultButton" label="{loc.button.consult}" icon="{Icons.go}" click="consultButton_clickHandler(event)"/>
			<s:Button id="cleanButton" label="{loc.button.clean}" icon="{Icons.clean}" click="cleanButton_clickHandler(event)"/>
		</s:HGroup>
		<s:DataGrid id="grid" width="100%" height="100%" dataProvider="{reservationForms}" alternatingRowColors="{Colors.ALTERNATING_ROW_COLORS}" skinClass="view.skins.CustomDataGridSkin"
					selectionChange="grid_selectionChangeHandler(event)">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="id" headerText="{loc.reservationForm.id}"/>
					<s:GridColumn dataField="customer.name" headerText="{loc.customer.singular}"/>
					<s:GridColumn dataField="state" headerText="{loc.reservationForm.state.singular}"  labelFunction="stateFormat" itemRenderer="view.components.CalendarCustomCellRenderer"/>
					<s:GridColumn dataField="creationDate" headerText="{loc.reservationForm.creationDate}" labelFunction="dateFormat"/>
					<s:GridColumn dataField="dateFrom" headerText="{loc.reservationForm.dateFrom}" labelFunction="dateFormat"/>
					<s:GridColumn dataField="dateTo" headerText="{loc.reservationForm.dateTo}" labelFunction="dateFormat"/>
					<s:GridColumn dataField="adultsQuantity" headerText="{loc.reservationForm.adultsQuantity}"/>
					<s:GridColumn dataField="childrenQuantity" headerText="{loc.reservationForm.childrenQuantity}"/>
					<s:GridColumn dataField="pricePerDayWithDefaultCurrency" headerText="{loc.reservationForm.pricePerDay}"/>
					<s:GridColumn dataField="monetaryReserveWithDefaultCurrency" headerText="{loc.reservationForm.monetaryReserve}"/>
					<s:GridColumn dataField="bank.name" headerText="{loc.bank.singular}"/>
					<s:GridColumn dataField="bankDocumentNumber" headerText="{loc.reservationForm.bankDocumentNumber}"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		<s:HGroup width="100%" horizontalAlign="center">
			<s:Button id="okButton" label="{loc.button.accept}" icon="{Icons.ok}" click="onSelect_clickHandler(event)" enabled="{_reservationFormSelected!=null}"/>
			<s:Button id="cancelButton" label="{loc.button.cancel}" icon="{Icons.cancel}" click="dispatchEvent(new Event('onCancel'));"/>
		</s:HGroup>
	</s:VGroup>
</s:Group>
