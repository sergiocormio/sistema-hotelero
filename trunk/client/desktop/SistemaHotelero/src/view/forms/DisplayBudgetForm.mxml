<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%" height="100%" creationComplete="init(event)">
	<fx:Metadata> 
		[Event(name="cancelClicked", type="flash.events.Event")]
		//[Event(name="saveSuccess", type="flash.events.Event")]
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import locales.Locale;
			
			import model.Alternative;
			import model.AlternativeWrapper;
			import model.Budget;
			import model.ExchangeRate;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.RegExpValidationResult;
			import mx.validators.ValidationResult;
			import mx.validators.Validator;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import services.BudgetService;
			import services.crud.ExchangeRateService;
			
			import spark.events.IndexChangeEvent;
			
			import utils.DateTimeUtils;
			import utils.FaultHandler;
			import utils.PdfDisplayer;
			import utils.WindowsUtils;
			
			import view.components.Mask;
			
			
			[Bindable]
			public var loc:Object;
			
			[Bindable]
			private var exchangeRates:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var alternativeSelectedInDefaultPrice:Alternative;
			
			[Bindable]
			private var selectedExchangeRate:ExchangeRate; 
			
			[Bindable]
			private var budgetToShow:Budget;
			
			private var titleWindow:TitleWindow;
			private var budgetEmailResponse:BudgetEmailResponseForm;
			
			
			
			protected function cancel():void
			{
				dispatchEvent(new Event("cancelClicked"));
			}
			
			protected function init(event:FlexEvent):void
			{
				retrieveExchangeRates();
				
				budgetToShow = alternativeSelectedInDefaultPrice.budget;
				selectedExchangeRate = ExchangeRate.getDefault(loc);
				budgetToShow.exchangeRate = selectedExchangeRate;
				
				var alternativeWrapper:AlternativeWrapper = new AlternativeWrapper(budgetToShow.relatedAlternative);
				dateFromLabel.text = DateTimeUtils.formatDate(alternativeWrapper.dateFrom);
				dateToLabel.text = DateTimeUtils.formatDate(alternativeWrapper.dateTo);
				roomTypeLabel.text = budgetToShow.roomType.name;
				pricePerDayLabel.text = budgetToShow.pricePerDayWithCurrency;
				daysQtyLabel.text = budgetToShow.daysQuantity.toString();
				basePriceLabel.text = budgetToShow.basePriceWithCurrency;
				
				basePricePlusAllServicesIncludedInBasePriceWithCurrencyLabel.text = budgetToShow.basePricePlusAllServicesIncludedInBasePriceWithCurrency;
				
				valuesIn.label = loc.budget.valuesIn + " " + loc.exchangeRate.defaultCurrency.name.plural;
			}
			
			
			
			private function retrieveExchangeRates():void
			{
				var exchangeRatesService:ExchangeRateService = new ExchangeRateService();
				exchangeRatesService.retrieveAll(retrieveExchangeRates_resultHandler,FaultHandler.defaultFaultHandler);
			}
			
			private function retrieveExchangeRates_resultHandler(event:ResultEvent,token:Object=null):void
			{
				//fills the exchangeRates ComboBox
				exchangeRates.removeAll();
				exchangeRates.refresh();
				exchangeRates.addAll(event.result as ArrayCollection);
				
			}
			
			protected function convertToSelectecExchangeRate(event:IndexChangeEvent):void
			{
				selectedExchangeRate = exchangeratesCombo.selectedItem as ExchangeRate;
				
				var exchangeRatesService:ExchangeRateService = new ExchangeRateService();
				exchangeRatesService.convertTo(alternativeSelectedInDefaultPrice.budget, selectedExchangeRate,
													convert_resultHandler, FaultHandler.defaultFaultHandler);
			}
			
			private function convert_resultHandler(event:ResultEvent,token:Object=null):void
			{
				budgetToShow = event.result as Budget;
				budgetToShow.exchangeRate = selectedExchangeRate;
				
				var alternativeWrapper:AlternativeWrapper = new AlternativeWrapper(budgetToShow.relatedAlternative);
				dateFromLabel.text = DateTimeUtils.formatDate(alternativeWrapper.dateFrom);
				dateToLabel.text = DateTimeUtils.formatDate(alternativeWrapper.dateTo);
				
				roomTypeLabel.text = budgetToShow.roomType.name;
				pricePerDayLabel.text = budgetToShow.pricePerDayWithCurrency;
				daysQtyLabel.text = budgetToShow.daysQuantity.toString();
				basePriceLabel.text = budgetToShow.basePriceWithCurrency;
				
				basePricePlusAllServicesIncludedInBasePriceWithCurrencyLabel.text = budgetToShow.basePricePlusAllServicesIncludedInBasePriceWithCurrency;
				
				valuesIn.label = loc.budget.valuesIn + " " + selectedExchangeRate.name;
				
			}
			
			private function restoreDefaultExchangeRate():void
			{
				budgetToShow = alternativeSelectedInDefaultPrice.budget;
				selectedExchangeRate = ExchangeRate.getDefault(loc);
				budgetToShow.exchangeRate = selectedExchangeRate;
				
				roomTypeLabel.text = budgetToShow.roomType.name;
				pricePerDayLabel.text = budgetToShow.pricePerDayWithCurrency;
				daysQtyLabel.text = budgetToShow.daysQuantity.toString();
				basePriceLabel.text = budgetToShow.basePriceWithCurrency;
				
				basePricePlusAllServicesIncludedInBasePriceWithCurrencyLabel.text = budgetToShow.basePricePlusAllServicesIncludedInBasePriceWithCurrency;
				
				exchangeratesCombo.selectedIndex = -1;
				valuesIn.label = loc.budget.valuesIn + " " + loc.exchangeRate.defaultCurrency.name.plural;
			}
			
			protected function exportBudgetButton_clickHandler(event:MouseEvent):void
			{
				Mask.show();
				
				new BudgetService().exportData(budgetToShow, Locale.getInstance().getLocaleName(), selectedExchangeRate, displayPDF, FaultHandler.defaultFaultHandler);
			}
			
			
			protected function displayPDF(event:ResultEvent=null,token:Object=null):void
			{
				var pdfFile:ByteArray = event.result as ByteArray;
				
				PdfDisplayer.displayPdf(pdfFile);
				
				Mask.close();
			}
			
			protected function displayBudgetResponsePreview_clickHandler(event:MouseEvent):void
			{
				budgetEmailResponse = new BudgetEmailResponseForm();
				budgetEmailResponse.loc = loc;
				budgetEmailResponse.budget = budgetToShow;
				budgetEmailResponse.addEventListener("sentSuccess",budgetEmailResponse_sentSuccess);
				budgetEmailResponse.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.button.answerViaEmail, budgetEmailResponse, null, 900, 700);
			}
			
			
			protected function budgetEmailResponse_sentSuccess(evt:Object):void {
				
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function titleWindow_close(evt:Object):void {
				PopUpManager.removePopUp(titleWindow);
			}
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
		</s:stroke>
		<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
	</s:Rect>
	<s:VGroup width="100%" height="100%" >
		<s:Group width="100%" height="100%" >
			<s:Form>
				<s:layout>
					<s:FormLayout gap="0"/>
				</s:layout>
				<s:HGroup width="100%" horizontalAlign="center" gap="-40" paddingBottom="-20" verticalAlign="bottom" >
					
					<s:FormItem label="{loc.budget.apartment}:">
						<s:Label id="roomTypeLabel" text="{budgetToShow.roomType.name}" />
					</s:FormItem>
					<s:FormItem label="{loc.budget.from}:">	
						<s:Label id="dateFromLabel"/>
					</s:FormItem>
					<s:FormItem label="{loc.budget.to}:">
						<s:Label id="dateToLabel"/>
					</s:FormItem>
					
				</s:HGroup>
			</s:Form>
		</s:Group>
		<s:VGroup width="100%" height="100%" paddingLeft="5">
			<s:Line width="95%">
				<s:stroke>
					<s:SolidColorStroke color="{Colors.RED_COLOR}" weight="2" />
				</s:stroke>
			</s:Line>
			<s:Form>
				<s:layout>
					<s:FormLayout gap="-10"/>
				</s:layout>
				
				<s:FormHeading id="valuesIn" textAlign="left" fontWeight="bold" fontSize="12"/>
				
				<s:FormItem label="{loc.budget.pricePerDay}:">
					<s:Label id="pricePerDayLabel" text="{budgetToShow.pricePerDayWithCurrency}" />
				</s:FormItem>
				<s:FormItem label="{loc.budget.daysQuantity}:">
					<s:Label id="daysQtyLabel" text="{budgetToShow.daysQuantity}" />
				</s:FormItem>
				
				<s:FormItem label="{loc.budget.totalValue}:">
					<s:Label id="basePriceLabel" text="{budgetToShow.basePriceWithCurrency}" />
				</s:FormItem>
				
				<s:FormItem />
				
				<s:FormHeading label="{loc.budget.basePricePlusAddServices}:" textAlign="center" fontWeight="bold" fontSize="12"/>
							
				<s:DataGrid id="servicesToBeAddedInBasePrice" width="100%" height="80" dataProvider="{budgetToShow.servicePricesAddedInBasePrice}" 
							alternatingRowColors="{Colors.ALTERNATING_ROW_COLORS}" skinClass="view.skins.CustomDataGridSkin" >
					<s:columns>
						<s:ArrayList>
							<s:GridColumn dataField="serviceType.name" headerText="{loc.withh}"></s:GridColumn>
							<s:GridColumn dataField="priceWithCurrency" headerText="{loc.budget.price}"></s:GridColumn>
						</s:ArrayList>
					</s:columns>
				</s:DataGrid>
				
				<s:FormItem />			
				
				<s:FormItem label="{loc.budget.basePricePlusAllServicesIncludedInBasePrice}:">
					<s:Label id="basePricePlusAllServicesIncludedInBasePriceWithCurrencyLabel" text="{budgetToShow.basePricePlusAllServicesIncludedInBasePriceWithCurrency}" />
				</s:FormItem>
				
				<s:FormItem />
				
				<s:FormHeading label="{loc.budget.additionalServices}:" textAlign="center" fontWeight="bold" fontSize="12"/>
				
				<s:DataGrid id="additionalServices" width="100%" height="210" dataProvider="{budgetToShow.additionalServices}" 
					alternatingRowColors="{Colors.ALTERNATING_ROW_COLORS}" skinClass="view.skins.CustomDataGridSkin">
					<s:columns>
						<s:ArrayList>
							<s:GridColumn dataField="name" headerText="{loc.budget.detail}"></s:GridColumn>
							<s:GridColumn dataField="priceWithCurrency" headerText="{loc.budget.price}"></s:GridColumn>
						</s:ArrayList>
					</s:columns>
				</s:DataGrid>
				
				<s:FormItem />
				
				<s:FormItem label="{loc.budget.convertPricesTo}:">
					<s:HGroup>
						<s:ComboBox id="exchangeratesCombo" dataProvider="{exchangeRates}" labelField="name" 
									change="convertToSelectecExchangeRate(event)" requireSelection="false"/>
						<s:Button label="{loc.button.clean}" icon="{Icons.clean}" click="restoreDefaultExchangeRate()"
								    toolTip="{loc.button.clean}"/>
					</s:HGroup>
				</s:FormItem>
			</s:Form>
			
			<!-- BUTTONS -->
			<s:HGroup width="100%" horizontalAlign="center" verticalAlign="middle">
				<s:Button label="{loc.button.print}" click="exportBudgetButton_clickHandler(event)" icon="{Icons.export}"/>
				<s:Button label="{loc.button.answerViaEmail}" click="displayBudgetResponsePreview_clickHandler(event)" icon="{Icons.sendEmailSmall}"/>
				<s:Button label="{loc.button.cancel}" click="cancel()" icon="{Icons.cancel}"/>
			</s:HGroup>
			<s:Spacer height="5"/>
		</s:VGroup>
	</s:VGroup>	
</s:Group>

