<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:components="view.components.*">
	<fx:Script>
		<![CDATA[
			import locales.Locale;
			
			import model.Alternative;
			import model.AlternativeWrapper;
			import model.CheckAvailabilityRequest;
			import model.Occupation;
			import model.ReservationForm;
			import model.Room;
			import model.StateReservationForm;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import services.OccupationService;
			
			import utils.DateRange;
			import utils.DateTimeUtils;
			import utils.WindowsUtils;
			
			import view.forms.DisplayBudgetFrom;
			import view.forms.crud.ReservationFormCRUDForm;
			import view.forms.crud.individual.ReservationFormIndividualCRUDForm;
			
			
			[Bindable]
			public var loc:Object;
			
			[Bindable]
			public var alternatives:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var alternativeSelected:AlternativeWrapper;
			
			[Bindable]
			public var outOfPeriodAlternatives:ArrayCollection = new ArrayCollection();
			
			private var nextRangeIndex:int;
			private var outOfPeriodRanges:ArrayCollection;
			private var titleWindow:TitleWindow;
			private var reservationFormForm:ReservationFormIndividualCRUDForm;
			private var budgetForm:DisplayBudgetFrom;
			
			private function allFieldsAreValid():Boolean{
				
				setEnabledValidators(true);
				
				var valArray:Array = new Array();
				
				valArray.push(dateFromValidator);
				valArray.push(dateToValidator);
				
				var validatorErrorArray:Array = Validator.validateAll(valArray);;
				var isValidForm:Boolean = validatorErrorArray.length == 0;
				
				setEnabledValidators(false);
				
				return isValidForm;
				
			}
			
			private function setEnabledValidators(enabled:Boolean):void{
				dateFromValidator.enabled = enabled;
				dateToValidator.enabled = enabled;
			}
			
			
				
			protected function consultButton_clickHandler(event:MouseEvent):void
			{
				// Validate all form
				if(!allFieldsAreValid()){
					return;
				}
				outOfPeriodAlternatives.removeAll();
				outOfPeriodRanges = getOutOfPeriodRanges(variationStepper.value);
				nextRangeIndex = -1;
				//Call To the Service
				var serv:OccupationService = new OccupationService();
				//fills the request
				var request:CheckAvailabilityRequest = new CheckAvailabilityRequest();
				request.dateFrom = dateFromChooser.selectedDate;
				request.dateTo = dateToChooser.selectedDate;
				request.adultsQty = adultsQtyStepper.value;
				request.childrenQty = childrenQtyStepper.value;
				if(singleOrMarital.selectedValue == loc.availability.bed.marital){
					request.withMaritalBed = true;
				}else{
					request.withMaritalBed = false;
				}
				serv.checkAvailability(request,consult_resultHandler,consult_faultHandler);
			}
			
			//-------- OUT OF PERIOD -------
			private function consultOutOfPeriod_resultHandler(event:ResultEvent,token:Object=null):void {
				if(event!=null){
					outOfPeriodAlternatives.addAll(AlternativeWrapper.wrapAlternatives(event.result as ArrayCollection));
				}
				getNextAlternatives();
				
			}
			
			private function getNextAlternatives():void{
				//other alternatives
				nextRangeIndex++;
				if(nextRangeIndex<outOfPeriodRanges.length){
					var range:DateRange = outOfPeriodRanges.getItemAt(nextRangeIndex) as DateRange;
					var serv:OccupationService = new OccupationService();
					//fills the request
					var request:CheckAvailabilityRequest = new CheckAvailabilityRequest();
					request.dateFrom = range.dateFrom;
					request.dateTo = range.dateTo;
					request.adultsQty = adultsQtyStepper.value;
					request.childrenQty = childrenQtyStepper.value;
					if(singleOrMarital.selectedValue == loc.availability.bed.marital){
						request.withMaritalBed = true;
					}else{
						request.withMaritalBed = false;
					}
					serv.checkAvailability(request,consultOutOfPeriod_resultHandler,consultOutOfPeriod_faultHandler);
				}
			}
			
			private function consultOutOfPeriod_faultHandler(event:FaultEvent,token:Object=null):void {
				//continues through normal flow
				consultOutOfPeriod_resultHandler(null); 
			}
			
			//-------- IN PERIOD -------
			private function consult_resultHandler(event:ResultEvent,token:Object=null):void {
				alternatives.removeAll();
				if(event!=null){
					alternatives.addAll(AlternativeWrapper.wrapAlternatives(event.result as ArrayCollection));
				}
				getNextAlternatives();
			}
			
			
			private function consult_faultHandler(event:FaultEvent,token:Object=null):void {
				//continues through normal flow
				consult_resultHandler(null); 
			}
			
			// Handle a message fault.
			private function faultHandler(event:FaultEvent,token:Object=null):void {
				var errCode:String = event.fault.rootCause.errorCode;
				
				Alert.show( loc.validator.server.child(errCode).text(), loc.validator.error );
			}
			
			protected function cleanButton_clickHandler(event:MouseEvent):void
			{
				alternativeSelected = null;
				alternatives.removeAll();
				outOfPeriodAlternatives.removeAll();
			}
			
			
			private function getOutOfPeriodRanges(variation:int):ArrayCollection{
				var result:ArrayCollection = new ArrayCollection();
				var rangeAux:DateRange;
				for(var i:int = 1;i<=variation;i++){
					rangeAux = new DateRange(dateFromChooser.selectedDate,DateTimeUtils.rollDaysToDate(dateToChooser.selectedDate ,i));
					result.addItem(rangeAux);
					rangeAux = new DateRange(DateTimeUtils.rollDaysToDate(dateFromChooser.selectedDate,i),DateTimeUtils.rollDaysToDate(dateToChooser.selectedDate,i));
					result.addItem(rangeAux);
					rangeAux = new DateRange(DateTimeUtils.rollDaysToDate(dateFromChooser.selectedDate,i),dateToChooser.selectedDate);
					result.addItem(rangeAux);
					rangeAux = new DateRange(dateFromChooser.selectedDate,DateTimeUtils.rollDaysToDate(dateToChooser.selectedDate, (-1 * i)));
					result.addItem(rangeAux);
					rangeAux = new DateRange(DateTimeUtils.rollDaysToDate(dateFromChooser.selectedDate,(-1 * i)),DateTimeUtils.rollDaysToDate(dateToChooser.selectedDate , (-1 * i)));
					result.addItem(rangeAux);
					rangeAux = new DateRange(DateTimeUtils.rollDaysToDate(dateFromChooser.selectedDate,(-1 * i)),dateToChooser.selectedDate);
					result.addItem(rangeAux);
				}
				return result;
			}
			
			protected function alternativeGridSelectedChangedHandler(event:Event):void
			{
				if(alternativeGrid.selected == null){
					alternativeSelected = null;
				}else{
					alternativeSelected = alternativeGrid.selected;
					outOfPeriodAlternativeGrid.cleanSelection();
				}
			}
			
			protected function outOfPeriodAlternativeGridSelectedChangedHandler(event:Event):void
			{
				if(outOfPeriodAlternativeGrid.selected == null){
					alternativeSelected = null;
				}else{
					alternativeSelected = outOfPeriodAlternativeGrid.selected;
					alternativeGrid.cleanSelection();
				}
			}
			
			protected function bookButton_clickHandler():void
			{
				reservationFormForm = new ReservationFormIndividualCRUDForm();
				reservationFormForm.loc = loc;
				reservationFormForm.isUpdate = false;
				reservationFormForm.addEventListener("saveSuccess",reservationForm_saveSuccess);
				reservationFormForm.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.button.newLabel + ": " + loc.reservationForm.singular,reservationFormForm);
				//creates a reservationForm pre-loaded
				var rf:ReservationForm = new ReservationForm();
				rf.adultsQuantity = adultsQtyStepper.value;
				rf.childrenQuantity = childrenQtyStepper.value;
				rf.monetaryReserve = 0;
				rf.pricePerDay = alternativeSelected.alternative.budget.basePricePlusAllServicesIncludedInBasePrice;
				rf.dateFrom = alternativeSelected.dateFrom;
				rf.dateTo = alternativeSelected.dateTo;
				rf.creationDate = new Date();
				reservationFormForm.currentReservationForm = rf;
				reservationFormForm.alternative = alternativeSelected.alternative;
				var possibleStates:ArrayCollection = new ArrayCollection();
				possibleStates.addItem(new StateReservationForm(StateReservationForm.PRE_BOOKING, loc));
				reservationFormForm.setPossibleStates(possibleStates);
			}
			
			private function titleWindow_close(evt:Object):void {
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function reservationForm_saveSuccess(evt:Object):void {
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function displayBudget():void{
				budgetForm = new DisplayBudgetFrom();
				budgetForm.loc = loc;
				budgetForm.alternativeSelected = alternativeSelected;
				
				//budgetForm.addEventListener("saveSuccess",customer_saveSuccess);
				budgetForm.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.budget.title + ":", budgetForm);
			}
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:DateValidator id="dateFromValidator"
						  required="true"
						  requiredFieldError="{loc.validator.requiredFieldError}"
						  inputFormat="{loc.date.format}"
						  formatError="{loc.validator.invalidFieldValueError}"
						  invalidCharError="{loc.validator.invalidFieldValueError}"
						  wrongDayError="{loc.validator.invalidFieldValueError}"
						  wrongLengthError="{loc.validator.invalidFieldValueError}"
						  wrongMonthError="{loc.validator.invalidFieldValueError}"
						  wrongYearError="{loc.validator.invalidFieldValueError}"
						  source="{dateFromChooser}"
						  property="text"
						  />
		<mx:DateValidator id="dateToValidator"
						  required="true"
						  requiredFieldError="{loc.validator.requiredFieldError}"
						  inputFormat="{loc.date.format}"
						  formatError="{loc.validator.invalidFieldValueError}"
						  invalidCharError="{loc.validator.invalidFieldValueError}"
						  wrongDayError="{loc.validator.invalidFieldValueError}"
						  wrongLengthError="{loc.validator.invalidFieldValueError}"
						  wrongMonthError="{loc.validator.invalidFieldValueError}"
						  wrongYearError="{loc.validator.invalidFieldValueError}"
						  source="{dateToChooser}"
						  property="text"
						  />
		<s:RadioButtonGroup id="singleOrMarital"/>
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
		</s:stroke>
		<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
	</s:Rect>
	<s:VGroup height="100%" width="100%">
		<mx:VDividedBox height="100%" width="100%" paddingLeft="10" paddingRight="10" paddingBottom="10">
			<s:VGroup width="100%">
				<s:HGroup width="100%" height="100%" horizontalAlign="center">
					<s:Form>
						<s:layout>
							<s:FormLayout gap="-14"/>
						</s:layout>  
						
						<s:FormItem label="{loc.availability.dateFrom}:" required="true">
							<mx:DateField id="dateFromChooser" width="120"
										  dayNames="{Locale.getInstance().dayNamesAbbr}" editable="true"
										  formatString="{loc.dateFormat.toUpperCase()}"
										  monthNames="{Locale.getInstance().monthNames}" selectedDate="{new Date()}"/>
						</s:FormItem>
						
						<s:FormItem label="{loc.availability.dateTo}:" required="true">
							<mx:DateField id="dateToChooser" width="120"
										  dayNames="{Locale.getInstance().dayNamesAbbr}" editable="true"
										  formatString="{loc.dateFormat.toUpperCase()}"
										  monthNames="{Locale.getInstance().monthNames}" selectedDate="{new Date()}"/>
						</s:FormItem>
						
						<s:FormItem label="{loc.availability.variation}:" required="true">
							<s:HGroup verticalAlign="middle">
								<s:NumericStepper id="variationStepper" maximum="{Number.MAX_VALUE}" width="50"/>
								<s:Label text="{loc.availability.days}"/>				
							</s:HGroup>
						</s:FormItem>
					</s:Form>
					<s:Form>
						<s:layout>
							<s:FormLayout gap="-14"/>
						</s:layout>  
						
						<s:FormItem label="{loc.availability.adultsQuantity}:" required="true">
							<s:NumericStepper id="adultsQtyStepper" maximum="{Number.MAX_VALUE}" width="50"/>
						</s:FormItem>
						
						<s:FormItem label="{loc.availability.childrenQuantity}:" required="true">
							<s:NumericStepper id="childrenQtyStepper" maximum="{Number.MAX_VALUE}" width="50"/>
						</s:FormItem>
						
						<s:FormItem label="{loc.availability.bed.plural}:">
							<s:RadioButton id="single" groupName="singleOrMarital" label="{loc.availability.bed.single}" selected="true"/>
							<s:RadioButton id="marital" groupName="singleOrMarital" label="{loc.availability.bed.marital}"/>
						</s:FormItem>
					</s:Form>
				</s:HGroup>
				<s:HGroup width="100%" horizontalAlign="center">
					<s:Button id="consultButton" label="{loc.availability.consult}" icon="{Icons.go}" click="consultButton_clickHandler(event)"/>
					<s:Button id="cleanButton" label="{loc.availability.clean}" icon="{Icons.clean}" click="cleanButton_clickHandler(event)"/>
				</s:HGroup>
			</s:VGroup>
			<s:VGroup width="100%">
				<mx:VDividedBox height="100%" width="100%">
					<components:AlternativesGrid id="alternativeGrid" width="100%" height="50%" loc="{loc}" alternatives="{alternatives}" alternativeSelectedChanged="alternativeGridSelectedChangedHandler(event)"/>
					<s:VGroup width="100%" height="50%">
						<s:Label text="{loc.availability.otherAlternatives}:" fontWeight="bold"/>
						<components:AlternativesGrid id="outOfPeriodAlternativeGrid" width="100%" height="100%" loc="{loc}" alternatives="{outOfPeriodAlternatives}" alternativeSelectedChanged="outOfPeriodAlternativeGridSelectedChangedHandler(event)"/>
					</s:VGroup>
				</mx:VDividedBox>
			</s:VGroup>
		</mx:VDividedBox>
		<s:HGroup width="100%" horizontalAlign="right" paddingRight="10" paddingBottom="10">
			<s:Button label="{loc.alternative.buttons.budget}" enabled="{alternativeSelected!=null}" click="displayBudget()"/>
			<s:Button id="bookButton" label="{loc.alternative.buttons.book}" enabled="{alternativeSelected!=null}" click="bookButton_clickHandler()"/>
		</s:HGroup>
	</s:VGroup>
</s:Group>
