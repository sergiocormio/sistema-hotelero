<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:services="services.*" width="800" height="600"
					   creationComplete="init(event)" xmlns:crud="view.forms.crud.*" xmlns:components="view.components.*"
					   >

	<fx:Script>
		<![CDATA[
			import flashx.textLayout.events.ModelChange;
			
			import locales.Locale;
			
			import model.Customer;
			import model.CustomerPK;
			import model.DocumentType;
			import model.Serializable;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.messaging.ChannelSet;
			import mx.messaging.channels.AMFChannel;
			import mx.messaging.management.ObjectInstance;
			import mx.rpc.AbstractOperation;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.utils.ArrayUtil;
			import mx.utils.ObjectProxy;
			
			import services.DocumentTypeService;
			
			private	var lastCustomer:Customer;
			private var lastDocumentType:DocumentType;
			
			[Bindable]
			private var loc:Object = Locale.getInstance().getCurrentLocale();
			
			// Handle the recevied message.
			private function resultHandler(event:ResultEvent):void {
				ta.text += "Server responded: "+ event.result + "\n";
			}

			// Handle a message fault.
			private function faultHandler(event:FaultEvent,token:Object=null):void {
				ta.text += "Received fault: " + event.fault + "\n";
			}
			
			protected function init(event:FlexEvent):void
			{
				/*
				//TODO retrieve channel information from an external file
				var myChannel:AMFChannel = new AMFChannel("my-amf", "http://localhost:8400/SistemaHotelero/messagebroker/amf");
				var cs:ChannelSet = new ChannelSet();
				cs.addChannel(myChannel);
				customerService.channelSet = cs;
				documentTypeService.channelSet = cs;
				*/
			}
			
			protected function createDocumentType():void{
				if(lastDocumentType == null){
					var docType:DocumentType = new DocumentType();
					//docType.id = null;
					docType.name="DNI";
					docType.regExp = "^[0-9]";
					var docServ:DocumentTypeService = new DocumentTypeService();
					docServ.showBusyCursor=true;
					var token:AsyncToken = docServ.createRecord(docType);
					token.addResponder(new AsyncResponder(createDocumentType_resultHandler,faultHandler));
					
				}
			}
			
			
			protected function retrieveAllCustomers_resultHandler(event:ResultEvent):void
			{
				resultHandler(event);
			}
			
			protected function createDocumentType_resultHandler(event:ResultEvent,token:Object=null):void
			{
				ta.text +="succesfully\n";
			}
			
			protected function retrieveAllDocumentTypes_resultHandler(event:ResultEvent):void
			{
				resultHandler(event);
				for each (var dt:DocumentType in event.result){
					lastDocumentType = dt;
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>

	</fx:Declarations>
	
	<s:VGroup width="100%">
		<s:HGroup>
			<s:Button label="Create DNI" click="createDocumentType()"/>
			<s:Button label="Clean Area" click="ta.text=''"/>
			<components:LocaleChooser loc="{loc}" localeChanged="loc = Locale.getInstance().getCurrentLocale();"/>
		</s:HGroup>

		<s:TextArea id="ta" width="100%" height="50" editable="false" />
		
		<crud:CustomerCRUDForm loc="{loc}"/>
	</s:VGroup>
	
</s:WindowedApplication>