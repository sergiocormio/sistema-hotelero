<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" creationComplete="init(event)">
	<fx:Metadata> 
		[Event(name="cancelClicked", type="flash.events.Event")]
		[Event(name="saveSuccess", type="flash.events.Event")]
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import model.Url;
			import mx.containers.TitleWindow;
			import spark.events.IndexChangeEvent;
			import model.Region;
			import services.crud.CountryService;
			import services.crud.RegionService;
			import mx.collections.ArrayCollection;
			import model.Address;
			import model.Country;
			
			import mx.controls.Alert;
			import mx.controls.Text;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import utils.FaultHandler;
			import utils.WindowsUtils;
			import mx.managers.PopUpManager;
			
			[Bindable]
			public var loc:Object;
			
			public var defaultLinkProtocol:String = "http://";
			
			private var _currentUrl:Url = new Url();
			
			private var titleWindow:TitleWindow;
			
			public function get currentUrl():Url
			{
				return _currentUrl;
			}

			public function set currentUrl(value:Url):void
			{
				_currentUrl = value;
			}

			private function allFieldsAreValid():Boolean{
				
				setEnabledValidators(true);
				
				var valArray:Array = new Array();
				
				valArray.push(labelValidator);
				valArray.push(valueValidator);
				
				var validatorErrorArray:Array = Validator.validateAll(valArray);
				var allFieldsAreValid:Boolean = validatorErrorArray.length == 0;
				
				setEnabledValidators(false);
				return allFieldsAreValid;
			}
			
			private function setEnabledValidators(enabled:Boolean):void{
				labelValidator.enabled = enabled;
				valueValidator.enabled = enabled;
			}
			
			private function save():void{
				// validate all data
				if(!allFieldsAreValid()){
					return;
				}
				
				if(_currentUrl == null){
					_currentUrl = new Url();
				}
				
				_currentUrl.label = labelText.text;
				_currentUrl.value = valueText.text;
				
				dispatchEvent(new Event("saveSuccess"));
			}
			
			
			private function cancel():void{
				dispatchEvent(new Event("cancelClicked"));
			}
			
			protected function init(event:FlexEvent):void
			{
				valueText.text = defaultLinkProtocol;	
			}
			
			private function titleWindow_close(evt:Object):void {
				PopUpManager.removePopUp(titleWindow);
			}
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:StringValidator id="labelValidator" 
							enabled="false"
							required="true"
							requiredFieldError="{loc.validator.requiredFieldError}" 
							source="{labelText}"
							property="text"/>
		<mx:StringValidator id="valueValidator" 
							enabled="false"
							required="true"
							requiredFieldError="{loc.validator.requiredFieldError}" 
							source="{valueText}"
							property="text"/>
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
		</s:stroke>
		<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
	</s:Rect>
	<s:VGroup width="100%" height="100%">
		<s:HGroup width="100%" horizontalAlign="center">
			<s:Form>
				<s:layout>
					<s:FormLayout gap="-14"/>
				</s:layout>  
				
				<s:FormItem label="{loc.url.textToShow}:" required="true">
					<s:TextInput id="labelText" width="210"/>
				</s:FormItem>
				<s:FormItem label="{loc.url.single}:" required="true">
					<s:TextInput id="valueText" width="210"/>
				</s:FormItem>
			</s:Form>
		</s:HGroup>
		<!-- BUTTONS -->
		<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
			<s:Button label="{loc.button.save}" icon="{Icons.save}" click="save()"/>
			<s:Button label="{loc.button.cancel}" icon="{Icons.cancel}" click="cancel()"/>
		</s:HGroup>
		<s:Spacer height="5"/>
	</s:VGroup>
</s:Group>
