<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="100%" height="100%" creationComplete="init(event)" 
		  xmlns:ns="http://www.adobe.com/2006/fc" xmlns:crud="view.forms.crud.*" xmlns:individual="view.forms.crud.individual.*" xmlns:components="view.components.*" >
	<fx:Script>
		<![CDATA[
			import flash.sampler.NewObjectSample;
			
			import flashx.textLayout.*;
			import flashx.textLayout.conversion.ConversionType;
			import flashx.textLayout.conversion.TextConverter;
			import flashx.textLayout.elements.InlineGraphicElement;
			import flashx.textLayout.elements.ParagraphElement;
			import flashx.textLayout.elements.TextFlow;
			
			import locales.Locale;
			
			import model.Customer;
			import model.EmailRequest;
			import model.Month;
			import model.Region;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import services.EmailService;
			import services.crud.ConsumptionService;
			import services.crud.CountryService;
			import services.crud.CustomerService;
			import services.crud.RegionService;
			import services.crud.RoomService;
			
			import spark.components.gridClasses.GridColumn;
			import spark.events.GridSelectionEvent;
			
			import utils.DateTimeUtils;
			import utils.FaultHandler;
			import utils.config.UserSettings;
			
			import view.components.Mask;

			private var NO_REGION_ID, NO_BIRTHDATE_ID = -1;
			private var NO_BIRTHDATE:String = "noBirthdate";
			
			[Bindable]
			public var loc:Object;
			
			[Bindable]
			private var customers:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var regions:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var months:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var imageIds:ArrayCollection = new ArrayCollection();
			
			
			public function init(event:FlexEvent):void
			{
				loadPlaces();
				loadMonths();
			}
			
			private function loadPlaces():void
			{
				retrieveRegions();
			}
			
			
			private function updateRegionSelection():void
			{
				if(allRegions.selected)
				{
					var arrayLength:int = (regionsMultiList.dataProvider as ArrayCollection).length;
					var vector:Vector.<int> = new Vector.<int>(arrayLength);
					
					for (var i:Number = 0; i < arrayLength; i++) {
						vector[i] = i;
					}
					
					regionsMultiList.selectedIndices = vector;
				}
				else
				{
					regionsMultiList.selectedIndices = null;
				}
			}
			
			
			private function updateMonthSelection():void
			{
				if(allMonths.selected)
				{
					var arrayLength:int = (monthsMultiList.dataProvider as ArrayCollection).length;
					var vector:Vector.<int> = new Vector.<int>(arrayLength);
					
					for (var i:Number = 0; i < arrayLength; i++) {
						vector[i] = i;
					}
					
					monthsMultiList.selectedIndices = vector;
				}
				else
				{
					monthsMultiList.selectedIndices = null;
				} 
			}
			
			private function loadMonths():void{
				months = new ArrayCollection();
				months.addItem(new Month(NO_BIRTHDATE, loc)); //monthNumberInCalendar = -1 because NO_BIRTHDATE is not in monthIds collection;
				
				for each (var id:String in Month.monthIds){
					months.addItem(new Month(id, loc));
				}
			}
			
			private function retrieveRegions():void{
				new RegionService().retrieveAll(retrieveRegions_resultHandler, FaultHandler.defaultFaultHandler);
			}
			
			private function retrieveRegions_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the rooms ComboBox
				regions.removeAll();
				
				var noRegion:Region = new Region();
				noRegion.id = NO_REGION_ID;
				noRegion.name = loc.advertisement.noRegion;
				
				regions.addItem(noRegion);
				
				regions.addAll(event.result as ArrayCollection);
				
				// we should not take into account countries without regions because when a customer address is created,
				// the region and country fields are mandatory. 
				// So if the customer has an address it will have both region and country fields. 
				//retrieveCountriesWithoutRegions();
			}
			

			private function insertImage():void {
			
				var filter:FileFilter = new FileFilter(loc.advertisement.images, "*.jpg;*.jpeg;*.png;*.gif");
				var file:File= new File();
				file.addEventListener(Event.SELECT, onSelectToLoad);
				file.browse([filter]);
			}
			
			private function onSelectToLoad(e:Event):void
			{
				var sourceFile:String = e.target.nativePath;
			
				var img:InlineGraphicElement = new InlineGraphicElement();
				img.source = sourceFile;
				img.id = new String(imageIds.length + 1); //the image id will be the related image index in imageIds collection
				imageIds.addItem(img.id);
				
				var p:ParagraphElement = new ParagraphElement();
				p.addChild(img);
				
				emailBodyEditor._tf.addChild(p);
				emailBodyEditor._tf.flowComposer.updateAllControllers();
			}
			
			private function preview():void {
			
				var toList:ArrayCollection = new ArrayCollection();
				toList.addItem(UserSettings.getInstance().getEmailTest());
				
				var emailReq:EmailRequest = createEmailRequest(toList);
				
				Mask.show();
				new EmailService().sendEmail(emailReq, sendTestEmail_resultHandler, FaultHandler.defaultFaultHandler);
			}		
			
			
			
			
			
			private function checkFilter():void {
			
				if(regionsMultiList.selectedIndices == null || regionsMultiList.selectedIndices.length == 0){
					Alert.show(loc.advertisement.error.noRegionSelected);
					return;
				}
				
				if(monthsMultiList.selectedIndices == null || monthsMultiList.selectedIndices.length == 0){
					Alert.show(loc.advertisement.error.noMonthSelected);
					return;
				}
				
				// COLLECT SELECTED REGIONS
				var selectedRegions:ArrayCollection = new ArrayCollection();
				var includeCustomersWithoutRegion:Boolean = false;
				
				for each (var selectedRegionIndex:int in regionsMultiList.selectedIndices){
					var selectedRegion:Region = regions.getItemAt(selectedRegionIndex) as Region;
					if(selectedRegion.id == NO_REGION_ID){
						includeCustomersWithoutRegion = true;
					}
					else{
						selectedRegions.addItem(selectedRegion);
					}
					
				}
				
				// COLLECT SELECTED MONTHS
				var selectedMonths:ArrayCollection = new ArrayCollection();
				var includeCustomersWithoutBirthdate:Boolean = false;
				
				// set months indices (e.g: January=0, February=1 and so on)
				for each (var selectedMonthIndex:int in monthsMultiList.selectedIndices){
					var selectedMonth:Month = months.getItemAt(selectedMonthIndex) as Month;
					if(selectedMonth.monthNumberInCalendar == NO_BIRTHDATE_ID){
						includeCustomersWithoutBirthdate = true;
					}
					else{
						selectedMonths.addItem(selectedMonth.monthNumberInCalendar);
					}
				}
				
							
				new CustomerService().retrieveCustomers(selectedRegions, selectedMonths, 
														includeCustomersWithoutRegion,
														includeCustomersWithoutBirthdate, retrieveCustomers_resultHandler, FaultHandler.defaultFaultHandler);
			}		
			
			
			private function retrieveCustomers_resultHandler(event:ResultEvent,token:Object=null):void {
				var selectedCustomers:ArrayCollection = event.result as ArrayCollection;
				if(selectedCustomers == null || selectedCustomers.length == 0){
					Alert.show(loc.advertisement.error.noCustomerSelected);
					return;
				}
			
				sendEmail(selectedCustomers);
			}
			
			private function sendEmail(selectedCustomers:ArrayCollection): void {
				
				var emails:ArrayCollection = new ArrayCollection();
				
				for each(var customer:Customer in selectedCustomers){
					
					if(customer.email != null && customer.email != ""){
						emails.addItem(customer.email);
					}
				}
								
				var emailReq:EmailRequest = createEmailRequest(emails);
				
				Mask.show();
				new EmailService().sendEmail(emailReq, sendEmail_resultHandler, FaultHandler.defaultFaultHandler);
			}
			
			
			private function createEmailRequest(to:ArrayCollection): EmailRequest{
				
				var emailReq:EmailRequest = new EmailRequest();
				
				emailReq.from = UserSettings.getInstance().getEmailSender();
				emailReq.password = UserSettings.getInstance().getPassword();
				emailReq.toList = to;
				emailReq.isHtml = true;
				emailReq.subject = subjectText.text;
				
				emailReq.body = TextConverter.export(emailBodyEditor.editor.textFlow, TextConverter.TEXT_FIELD_HTML_FORMAT, ConversionType.STRING_TYPE).toString();
				
				return emailReq;
			}
			
			private function sendEmail_resultHandler(event:ResultEvent,token:Object=null):void {
				Mask.close();
				Alert.show(loc.advertisement.emailSent);
			}
			
			private function sendTestEmail_resultHandler(event:ResultEvent,token:Object=null):void {
				Mask.close();
				Alert.show(loc.advertisement.emailTestSent + ": " + UserSettings.getInstance().getEmailTest());
			}
			
			private function retrieveCountriesWithoutRegions():void
			{
				new CountryService().retrieveCountriesWithoutRegions(retrieveCountriesWithoutRegions_resultHandler, FaultHandler.defaultFaultHandler);
			}
			
			private function retrieveCountriesWithoutRegions_resultHandler(event:ResultEvent,token:Object=null):void {
				//adds countries without regions
				regions.addAll(event.result as ArrayCollection);
			}
			
			public function refreshForm():void{
				//to have latest countries and regions (and also to clean the previous user selection)
				loadPlaces();
				//mainly to clean the previous user selection (this info is static)
				loadMonths();
				//to clean the previous user selection
				allRegions.selected = false;
				allMonths.selected = false;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
		</s:stroke>
		<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
	</s:Rect>
	<s:VGroup height="100%" width="100%" horizontalAlign="center" paddingBottom="30" paddingLeft="30"
			  paddingRight="30" paddingTop="30">
		
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label text="{loc.advertisement.subject}:" fontWeight="bold"/>
			<s:TextInput id="subjectText" width="100%"/>
			<s:Label text="*" fontWeight="bold"/>
		</s:HGroup>
		
		<components:RichTextEditor id="emailBodyEditor" width="100%" height="100%" title="{loc.advertisement.body}" />
		
		<s:Group width="100%">
			<s:Rect width="100%" height="100%" radiusX="5">
				<s:stroke>
					<s:SolidColorStroke color="{Colors.RED_COLOR}" weight="2"/>
				</s:stroke>
			</s:Rect>
		
			<s:HGroup gap="5" width="100%">
				<s:Form>
					<s:layout>
						<s:FormLayout gap="-14"/>
					</s:layout>  
					
					<s:FormItem id="countriesItem" label="{loc.advertisement.SendEmailsTo}:" required="true">
						<s:HGroup>
							<components:MultiSelectList id="regionsMultiList" dataProvider="{regions}" labelField="qualifiedName" 
														allowMultipleSelection="true" height="180" width="280"/>
							
							<s:Button width="24" height="24" click="loadPlaces();"
									  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
							<s:CheckBox id="allRegions" label="{loc.advertisement.all}" click="updateRegionSelection()" />
						</s:HGroup>
					</s:FormItem>
				</s:Form>
				<s:Form>
					<s:layout>
						<s:FormLayout gap="-14"/>
					</s:layout>
					<s:FormItem id="monthsItem" label="{loc.advertisement.birthMonth}:" required="false">
						<s:HGroup>
							<components:MultiSelectList id="monthsMultiList" dataProvider="{months}" labelField="label" 
														allowMultipleSelection="true" height="180"/>
							<s:Button width="24" height="24" click="loadMonths();"
									  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
							<s:CheckBox id="allMonths" label="{loc.advertisement.all}" click="updateMonthSelection()" />
						</s:HGroup>
					</s:FormItem>
				</s:Form>
			</s:HGroup>
		</s:Group>
		
		
		<s:HGroup gap="5" width="100%" verticalAlign="middle" horizontalAlign="right">
			<s:Button label="{loc.button.insertImage}" click="insertImage()" icon="{Icons.insertImage}" iconPlacement="top"/>
			<s:Button label="{loc.button.preview}" click="preview()" icon="{Icons.preview}" iconPlacement="top" />
			<s:Button label="{loc.button.send}" click="checkFilter()" icon="{Icons.sendEmail}" iconPlacement="top" />
		</s:HGroup>
	</s:VGroup>	
		
</s:Group>
