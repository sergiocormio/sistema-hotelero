<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="980" height="250">
	<fx:Metadata> 
		[Event(name="onCancel", type="flash.events.Event")]
		[Event(name="onSelect", type="flash.events.Event")]
	</fx:Metadata> 
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import locales.Locale;
			
			import model.ReservationForm;
			
			import mx.collections.ArrayCollection;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import spark.events.GridSelectionEvent;
			import spark.skins.spark.DefaultGridItemRenderer;
			
			import utils.DateTimeUtils;
			
			[Bindable]
			public var loc:Object = Locale.getInstance().getCurrentLocale();
			
			[Bindable]
			private var _reservationForms:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var _reservationFormSelected:ReservationForm;
			
			public function get reservationFormSelected():ReservationForm
			{
				return _reservationFormSelected;
			}

			protected function onSelect_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event("onSelect"));
			}
			
			private function stateFormat(item:Object,column:GridColumn):String
			{
				var value:String = item [column.dataField] as String; 
				return loc.reservationForm.state[value];
			}
			
			private function dateFormat(item:Object,column:GridColumn):String
			{
				return DateTimeUtils.formatDateWithPattern(item [column.dataField] as Date,loc.dateFormat);
			}
			
			protected function grid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				_reservationFormSelected = grid.selectedItem as ReservationForm;
			}
			
		]]>
	</fx:Script>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
		</s:stroke>
		<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
	</s:Rect>
	<s:VGroup width="100%" height="100%" paddingBottom="10" paddingTop="10" paddingLeft="10" paddingRight="10">
		<s:DataGrid id="grid" width="100%" height="100%" dataProvider="{_reservationForms}" alternatingRowColors="{Colors.ALTERNATING_ROW_COLORS}" skinClass="view.skins.CustomDataGridSkin"
					selectionChange="grid_selectionChangeHandler(event)">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="id" headerText="{loc.reservationForm.id}"/>
					<s:GridColumn dataField="customer.name" headerText="{loc.customer.singular}"/>
					<s:GridColumn dataField="state" headerText="{loc.reservationForm.state.singular}"  labelFunction="stateFormat" itemRenderer="view.components.CalendarCustomCellRenderer"/>
					<s:GridColumn dataField="creationDate" headerText="{loc.reservationForm.creationDate}" labelFunction="dateFormat"/>
					<s:GridColumn dataField="dateFrom" headerText="{loc.reservationForm.dateFrom}" labelFunction="dateFormat"/>
					<s:GridColumn dataField="dateTo" headerText="{loc.reservationForm.dateTo}" labelFunction="dateFormat"/>
					<s:GridColumn dataField="adultsQuantity" headerText="{loc.reservationForm.adultsQuantity}"/>
					<s:GridColumn dataField="childrenQuantity" headerText="{loc.reservationForm.childrenQuantity}"/>
					<s:GridColumn dataField="pricePerDayWithDefaultCurrency" headerText="{loc.reservationForm.pricePerDay}"/>
					<s:GridColumn dataField="monetaryReserveWithDefaultCurrency" headerText="{loc.reservationForm.monetaryReserve}"/>
					<s:GridColumn dataField="bank.name" headerText="{loc.bank.singular}"/>
					<s:GridColumn dataField="bankDocumentNumber" headerText="{loc.reservationForm.bankDocumentNumber}"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		<s:HGroup width="100%" horizontalAlign="center">
			<s:Button id="okButton" label="OK" icon="{Icons.ok}" click="onSelect_clickHandler(event)" enabled="{_reservationFormSelected!=null}"/>
			<s:Button id="cancelButton" label="{loc.button.cancel}" icon="{Icons.cancel}" click="dispatchEvent(new Event('onCancel'));"/>
		</s:HGroup>
	</s:VGroup>
</s:Group>
