<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="980" height="450"
		 creationComplete="init()">
	<fx:Metadata> 
		[Event(name="onCancel", type="flash.events.Event")]
		[Event(name="onSelect", type="flash.events.Event")]
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import locales.Locale;
			
			import model.Country;
			import model.Customer;
			
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import services.crud.CountryService;
			import services.crud.CustomerService;
			
			import spark.events.GridSelectionEvent;
			
			import utils.DateTimeUtils;
			import utils.FaultHandler;
			[Bindable]
			public var loc:Object = Locale.getInstance().getCurrentLocale();

			[Bindable]
			private var customers:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var _customerSelected:Customer;
			
			[Bindable]
			private var countries:ArrayCollection = new ArrayCollection();
			
			protected function init():void
			{
				retrieveCountries();
				refreshGrid();
			}
			
			public function get customerSelected():Customer
			{
				return _customerSelected;
			}

			protected function onSelect_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event("onSelect"));
			}
			
			protected function grid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				_customerSelected = grid.selectedItem as Customer;
			}
			
			private function retrieveCountries():void{
				var countryServ:CountryService = new CountryService();
				countryServ.retrieveAll(retrieveCountries_resultHandler,FaultHandler.defaultFaultHandler);
			}
			
			private function retrieveCountries_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the ComboBox
				countries.removeAll();
				countries.refresh();
				countries.addAll(event.result as ArrayCollection);
				countriesComboSearch.selectedIndex = -1;
			}
			
			private function dateFormat(item:Object,column:GridColumn):String
			{
				return DateTimeUtils.formatDateWithPattern(item [column.dataField] as Date,loc.dateFormat);
			}
			
			protected function consultButton_clickHandler(event:MouseEvent):void
			{
				if(!validFilters()){
					return;
				}
				
				filterCustomers();						
			}
			
			private function validFilters():Boolean
			{
				var validFilters:Boolean = false;
				
				if(emailSearch.text != null && emailSearch.text != ""){				
					validFilters = true;
				}
				if(firstNameSearch.text != null && firstNameSearch.text != ""){
					validFilters = true;
				}
				if(lastNameSearch.text != null && lastNameSearch.text != ""){
					validFilters = true;
				}
				if(countriesComboSearch.selectedIndex > -1){
					validFilters = true;
				}
				return validFilters;
			}
			
			private function filterCustomers():void
			{
				var email:String = null;
				var firstName:String = null;
				var lastName:String  = null;
				var country:Country = null;
				
				if(emailSearch.text != null && emailSearch.text != ""){
					email = emailSearch.text; 
				}
				if(firstNameSearch.text != null && firstNameSearch.text != ""){
					firstName = firstNameSearch.text;
				}
				if(lastNameSearch.text != null && lastNameSearch.text != ""){
					lastName = lastNameSearch.text;
				}
				if(countriesComboSearch.selectedIndex > -1){
					country = countriesComboSearch.selectedItem as Country;
				}
				
				new CustomerService().retrieveCustomersBySearch(email, firstName, lastName, country, retrieveAll_resultHandler, FaultHandler.defaultFaultHandler);
			}
			
			private function retrieveAll_resultHandler(event:ResultEvent,token:Object=null):void {
				customers.removeAll();
				customers.refresh();
				customers.addAll(event.result as ArrayCollection);
				//grid.refresh();
			}
			
			protected function cleanButton_clickHandler(event:MouseEvent):void
			{
				cleanFilterForm();
				refreshGrid();
			}
			
			private function cleanFilterForm():void
			{
				emailSearch.text = null;
				firstNameSearch.text = null;
				lastNameSearch.text = null;
				countriesComboSearch.selectedIndex = -1;
			}
			
			protected function refreshGrid(event:Event=null):void
			{
				grid.selectedIndex = -1;
				retrieveAllCustomers();
			}
			
			private function retrieveAllCustomers():void{
				new CustomerService().retrieveAll(retrieveAll_resultHandler,FaultHandler.defaultFaultHandler);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
		</s:stroke>
		<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
	</s:Rect>
	<s:VGroup width="100%" height="100%" paddingBottom="10" paddingTop="10" paddingLeft="10" paddingRight="10">
		<!--FILTERS-->
		<s:HGroup width="100%" horizontalAlign="center" gap="-40" paddingTop="-8" verticalAlign="middle">
			<s:FormItem label="{loc.customer.email}:">
				<s:TextInput id="emailSearch" widthInChars="15"/>
			</s:FormItem>
			<s:FormItem label="{loc.customer.firstName}:">
				<s:TextInput id="firstNameSearch"/>
			</s:FormItem>
			<s:FormItem label="{loc.customer.lastName}:">
				<s:TextInput id="lastNameSearch"/>
			</s:FormItem>
			<s:FormItem id="countryItem" label="{loc.customer.address.country}:">
				<s:HGroup>
					<s:ComboBox id="countriesComboSearch" dataProvider="{countries}" labelField="name" width="120"/>
					<s:Button width="24" height="24" click="retrieveCountries();"
							  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
				</s:HGroup>
			</s:FormItem>
		</s:HGroup>
		<!--FILTERS BUTTONS-->
		<s:HGroup width="100%" horizontalAlign="center">
			<s:Button id="consultButton" label="{loc.button.consult}" icon="{Icons.go}" click="consultButton_clickHandler(event)"/>
			<s:Button id="cleanButton" label="{loc.button.clean}" icon="{Icons.clean}" click="cleanButton_clickHandler(event)"/>
		</s:HGroup>
		<s:DataGrid id="grid" width="100%" height="100%" dataProvider="{customers}" alternatingRowColors="{Colors.ALTERNATING_ROW_COLORS}" skinClass="view.skins.CustomDataGridSkin" 
					selectionChange="grid_selectionChangeHandler(event)" >
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="email" headerText="{loc.customer.email}"></s:GridColumn>
					<s:GridColumn dataField="firstName" headerText="{loc.customer.firstName}"></s:GridColumn>
					<s:GridColumn dataField="lastName" headerText="{loc.customer.lastName}"></s:GridColumn>
					<s:GridColumn dataField="dateOfBirth" headerText="{loc.customer.dateOfBirth}" labelFunction="dateFormat"></s:GridColumn>
					<s:GridColumn dataField="docType.name" headerText="{loc.documentType.singular}"></s:GridColumn>
					<s:GridColumn dataField="idNumber" headerText="{loc.customerPK.idNumber}"></s:GridColumn>
					<s:GridColumn dataField="addressAsTextOneLine" headerText="{loc.customer.address.single}"></s:GridColumn>
					<s:GridColumn dataField="language.name" headerText="{loc.language.singular}"></s:GridColumn>
					<s:GridColumn dataField="lastLodgementDate" headerText="{loc.customer.lastLodgementDate}" labelFunction="dateFormat"></s:GridColumn>
					<s:GridColumn dataField="profession" headerText="{loc.customer.profession}"></s:GridColumn>
					<s:GridColumn dataField="phoneNumber" headerText="{loc.customer.phoneNumber}"></s:GridColumn>
					<s:GridColumn dataField="cellphoneNumber" headerText="{loc.customer.cellphoneNumber}"></s:GridColumn>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		<s:HGroup width="100%" horizontalAlign="center">
			<s:Button id="okButton" label="{loc.button.accept}" icon="{Icons.ok}" click="onSelect_clickHandler(event)" enabled="{_customerSelected!=null}"/>
			<s:Button id="cancelButton" label="{loc.button.cancel}" icon="{Icons.cancel}" click="dispatchEvent(new Event('onCancel'));"/>
		</s:HGroup>
	</s:VGroup>
</s:Group>
