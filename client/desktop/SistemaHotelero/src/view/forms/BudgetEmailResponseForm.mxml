<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="100%" height="100%" creationComplete="init()" 
		  xmlns:ns="http://www.adobe.com/2006/fc" xmlns:crud="view.forms.crud.*" xmlns:individual="view.forms.crud.individual.*" xmlns:components="view.components.*" >
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.conversion.ITextExporter;
			import flash.sampler.NewObjectSample;
			
			import flashx.textLayout.*;
			import flashx.textLayout.conversion.ConversionType;
			import flashx.textLayout.conversion.ITextImporter;
			import flashx.textLayout.conversion.TextConverter;
			import flashx.textLayout.elements.Configuration;
			import flashx.textLayout.elements.InlineGraphicElement;
			import flashx.textLayout.elements.ParagraphElement;
			import flashx.textLayout.elements.TextFlow;
			import flashx.textLayout.formats.TextLayoutFormat;
			import flashx.textLayout.formats.WhiteSpaceCollapse;
			
			import locales.Locale;
			
			import model.AlternativeWrapper;
			import model.Budget;
			import model.Customer;
			import model.EmailRequest;
			import model.EmailTemplate;
			import model.EmailTemplatePK;
			import model.Month;
			import model.Region;
			import model.ServiceAddedInBasePrice;
			import model.ServiceType;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import services.EmailService;
			import services.crud.ConsumptionService;
			import services.crud.CountryService;
			import services.crud.CustomerService;
			import services.crud.EmailTemplateService;
			import services.crud.RegionService;
			import services.crud.RoomService;
			
			import spark.components.gridClasses.GridColumn;
			import spark.events.GridSelectionEvent;
			
			import utils.DateTimeUtils;
			import utils.FaultHandler;
			import utils.HtmlUtils;
			import utils.config.UserSettings;
			
			import view.components.Mask;

			[Bindable]
			public var loc:Object;
			
			[Bindable]
			public var budget:Budget;
			
			
			public function init():void
			{
				var emailTplPk:EmailTemplatePK = new EmailTemplatePK();
				emailTplPk.templateId = EmailTemplatePK.BUDGET_RESPONSE;
				emailTplPk.locale = Locale.getInstance().getLocaleName();
				
				new EmailTemplateService().getRecordById(emailTplPk, getEmailTpl_resultHandler, FaultHandler.defaultFaultHandler);
			}
			
			private function getEmailTpl_resultHandler(event:ResultEvent,token:Object=null):void
			{
				var emailTemaplate:EmailTemplate = event.result as EmailTemplate;
				
				var header:String = emailTemaplate.header.replace("</BODY></HTML>", "");
				var footer:String = emailTemaplate.footer.replace("<HTML><BODY>", "");
				
				var budgetInfo:String = createBudgetInfoHtml();
				
				var body:String = header + budgetInfo + footer; 
				
				var format:TextLayoutFormat = new TextLayoutFormat();
				format.whiteSpaceCollapse = WhiteSpaceCollapse.PRESERVE;
				var config:Configuration = new Configuration();
				config.textFlowInitialFormat = format;
				
				var importer:ITextImporter = TextConverter.getImporter(TextConverter.TEXT_FIELD_HTML_FORMAT, config);
				
				//emailBodyEditor.editor.textFlow = TextConverter.importToFlow(body, TextConverter.TEXT_FIELD_HTML_FORMAT);
				emailBodyEditor.editor.textFlow = importer.importToFlow(body);
				
				emailBodyEditor.editor.textFlow.flowComposer.updateAllControllers();
								
			}
			
			private function sendEmail(): void {
				
				if(!allFieldsAreValid()){
					return;
				}
					
				var emails:ArrayCollection = new ArrayCollection();
				
				emails.addItem(responseToText.text);
								
				var emailReq:EmailRequest = createEmailRequest(emails);
				
				Mask.show();
				new EmailService().sendEmail(emailReq, sendEmail_resultHandler, FaultHandler.defaultFaultHandler);
			}
			
			private function allFieldsAreValid():Boolean{
				
				setEnabledValidators(true);
				
				var valArray:Array = new Array();
				
				valArray.push(subjectValidator);
				valArray.push(responseToValidator);
				
				var validatorErrorArray:Array = Validator.validateAll(valArray);
				var allFieldsAreValid:Boolean = validatorErrorArray.length == 0;
				
				setEnabledValidators(false);
				return allFieldsAreValid;
			}
			
			private function setEnabledValidators(enabled:Boolean):void{
				subjectValidator.enabled = enabled;
				responseToValidator.enabled = enabled;
			}
			
			
			private function createEmailRequest(to:ArrayCollection): EmailRequest{
				
				var emailReq:EmailRequest = new EmailRequest();
				
				emailReq.from = UserSettings.getInstance().getEmailSender();
				emailReq.password = UserSettings.getInstance().getPassword();
				emailReq.toList = to;
				emailReq.isHtml = true;
				emailReq.subject = subjectText.text;
				
				emailReq.body = TextConverter.export(emailBodyEditor.editor.textFlow, TextConverter.TEXT_FIELD_HTML_FORMAT, ConversionType.STRING_TYPE).toString();
				
				return emailReq;
			}
			
			private function sendEmail_resultHandler(event:ResultEvent,token:Object=null):void {
				Mask.close();
				dispatchEvent(new Event("sentSuccess"));
				Alert.show(loc.budgetEmailResponse.emailSent);
			}
			
			
			public function refreshForm():void{
				init();
			}
			
			private function cancel():void{
				dispatchEvent(new Event("cancelClicked"));
			}
			
			private function createBudgetInfoHtml():String
			{
				var alternativeWrapper:AlternativeWrapper = new AlternativeWrapper(budget.relatedAlternative);
				var dateFrom:String = DateTimeUtils.formatDate(alternativeWrapper.dateFrom);
				var dateTo:String = DateTimeUtils.formatDate(alternativeWrapper.dateTo);
				var roomTypeName:String = budget.roomType.name;
				var roomTypeDesc:String = budget.roomType.description;
				var pricePerDay:String = budget.pricePerDayWithCurrency;
				var daysQty:String = budget.daysQuantity.toString();
				var basePrice:String = budget.basePriceWithCurrency;
				
				
				var dateFromToParagraph:String = loc.budgetEmailResponse.template.requestedPackage + "    " + loc.budget.from + " " + dateFrom + " " + loc.budget.to + " " + dateTo;
				var budgetInfo:String = HtmlUtils.getBoldParagraph(dateFromToParagraph);
				budgetInfo += HtmlUtils.getLineBreak();
				
				budgetInfo += HtmlUtils.getBoldParagraph(loc.budgetEmailResponse.template.ourAvailableRooms);
				budgetInfo += HtmlUtils.getLineBreak();
				
				budgetInfo += HtmlUtils.getBoldParagraph(loc.budget.apartment + ": " + roomTypeName);
				budgetInfo += HtmlUtils.getParagraph(roomTypeDesc);
				budgetInfo += HtmlUtils.getLineBreak();
				
				var pricePerDayParagraph:String = HtmlUtils.getTextWithTabs(loc.budget.pricePerDay + ": ") + pricePerDay;
				budgetInfo += HtmlUtils.getBoldParagraph(pricePerDayParagraph);
				
				var daysQuantityParagraph:String = HtmlUtils.getTextWithTabs(loc.budget.daysQuantity + ": ") + daysQty;
				budgetInfo += HtmlUtils.getBoldParagraph(daysQuantityParagraph);
				
				var totalValueParagraph:String = HtmlUtils.getTextWithTabs(loc.budget.totalValue + ": ") + basePrice;
				budgetInfo += HtmlUtils.getBoldParagraph(totalValueParagraph);
				
				budgetInfo += HtmlUtils.getLineBreak();
				var subtotalsParagraph:String = loc.budget.subtotalsWithServices + ":";
				budgetInfo += HtmlUtils.getBoldParagraph(subtotalsParagraph);
				
				// subtotals table!!!
				budgetInfo += createSubtotalsTable();				
				
				budgetInfo += HtmlUtils.getLineBreak();
				var basePricePlusAllParagraph:String = loc.budget.basePricePlusAllServicesIncludedInBasePrice + ": " + budget.basePricePlusAllServicesIncludedInBasePriceWithCurrency;
				budgetInfo += HtmlUtils.getBoldParagraph(basePricePlusAllParagraph);
				
				budgetInfo += HtmlUtils.getLineBreak();
				var doNotIncludeParagraph:String = loc.budgetEmailResponse.template.theseValuesDoNotInclude;
				budgetInfo += HtmlUtils.getBoldParagraph(doNotIncludeParagraph);
				
				// additional services table!!!
				budgetInfo += createAdditionalServicesTable();
				
				
				budgetInfo += HtmlUtils.getLineBreak();
				
				return budgetInfo;
			}
			
			private function createSubtotalsTable():String
			{
				var headers:ArrayCollection = new ArrayCollection();
				headers.addItem(loc.withh);
				headers.addItem(loc.budget.price);
				
				var data:ArrayCollection = new ArrayCollection();
				for each(var serviceAddedInBasePrice:ServiceAddedInBasePrice in budget.servicePricesAddedInBasePrice){
					var row:Array = new Array();
					row[loc.withh] = loc.withh + ": " + serviceAddedInBasePrice.serviceType.name;
					row[loc.budget.price] = serviceAddedInBasePrice.priceWithCurrency;
					data.addItem(row);
				}
				//return HtmlUtils.getTable(headers, data);
				//return HtmlUtils.getTableWithDivs(headers, data);
				return HtmlUtils.getList(headers, data);
			}
			
			private function createAdditionalServicesTable():String
			{
				var headers:ArrayCollection = new ArrayCollection();
				headers.addItem(loc.budget.detail);
				headers.addItem(loc.budget.price);
				
				var data:ArrayCollection = new ArrayCollection();
				for each(var serviceType:ServiceType in budget.additionalServices){
					var row:Array = new Array();
					row[loc.budget.detail] = serviceType.name;
					row[loc.budget.price] = serviceType.priceWithCurrency;
					data.addItem(row);
				}
				//return HtmlUtils.getTable(headers, data);
				//return HtmlUtils.getTableWithDivs(headers, data);
				return HtmlUtils.getList(headers, data);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:StringValidator id="subjectValidator" 
							enabled="false"
							required="true"
							requiredFieldError="{loc.validator.requiredFieldError}" 
							source="{subjectText}"
							property="text"/>
		<mx:EmailValidator id="responseToValidator" 
						   enabled="false"
						   required="true"
						   requiredFieldError="{loc.validator.requiredFieldError}"
						   invalidCharError="{loc.validator.invalidFieldValueError}"
						   invalidPeriodsInDomainError="{loc.validator.invalidFieldValueError}"
						   missingAtSignError="{loc.validator.invalidFieldValueError}"
						   missingPeriodInDomainError="{loc.validator.invalidFieldValueError}"
						   missingUsernameError="{loc.validator.invalidFieldValueError}"
						   tooManyAtSignsError="{loc.validator.invalidFieldValueError}"
						   source="{responseToText}"
						   property="text" 
						   />
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
		</s:stroke>
		<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
	</s:Rect>
	<s:VGroup height="100%" width="100%" horizontalAlign="center" paddingBottom="10" paddingLeft="10"
			  paddingRight="10" paddingTop="10">
		
		<s:Form>
			<s:layout>
				<s:FormLayout gap="0"/>
			</s:layout>
						
			<s:FormItem label="{loc.budgetEmailResponse.responseTo}:" required="true">
				<s:TextInput id="responseToText" width="210"/>
			</s:FormItem>
			
			<s:FormItem label="{loc.budgetEmailResponse.subject}:" required="true">
				<s:TextInput id="subjectText" width="300"/>
			</s:FormItem>
		</s:Form>		
		
		<!-- BODY -->
		<s:HGroup width="100%" height="100%" verticalAlign="middle">
			<components:RichTextEditor id="emailBodyEditor" width="100%" height="100%" title="{loc.budgetEmailResponse.message}" loc="{loc}"/>
		</s:HGroup>
		
		<!-- BUTTONS -->
		<s:HGroup gap="5" width="100%" verticalAlign="middle" horizontalAlign="center">
			<s:Button label="{loc.button.send}" click="sendEmail()" icon="{Icons.sendEmailSmall}"/>
			<s:Button label="{loc.button.cancel}" click="cancel()" icon="{Icons.cancel}" />
		</s:HGroup>
	</s:VGroup>	
		
</s:Group>
