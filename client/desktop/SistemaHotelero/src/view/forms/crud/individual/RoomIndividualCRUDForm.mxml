<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="100%" height="100%" creationComplete="init(event)">
	<fx:Metadata> 
		[Event(name="cancelClicked", type="flash.events.Event")]
		[Event(name="saveSuccess", type="flash.events.Event")]
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import model.Room;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import services.crud.RoomService;
			import services.crud.RoomTypeService;
			
			import utils.WindowsUtils;
			
			[Bindable]
			public var loc:Object;
			
			[Bindable]
			public var isUpdate:Boolean;
			
			[Bindable]
			private var roomTypes:ArrayCollection = new ArrayCollection();
			
			private var _currentRoom:Room = new Room(); 
			
			private var titleWindow:TitleWindow;
			private var roomTypeForm:RoomTypeIndividualCRUDForm;
			
			public function get currentRoom():Room
			{
				return _currentRoom;
			}
			
			public function set currentRoom(value:Room):void
			{
				_currentRoom = value;
				numberStepper.value = _currentRoom.number;
				descriptionText.text = _currentRoom.description;
				WindowsUtils.autoSelectComboBox(roomTypesCombo,_currentRoom.roomType);
				
				if(_currentRoom.withMaritalBed){
					maritalOrExtraBed.selectedValue = loc.room.withMaritalBed;
				}else{
					maritalOrExtraBed.selectedValue = loc.room.withExtraBed;
				}
				
				peopleQuantityStepper.value = _currentRoom.peopleQuantity;
			}
			
			private function retrieveRoomTypes():void{
				var countryServ:RoomTypeService = new RoomTypeService();
				countryServ.retrieveAll(retrieveRoomTypes_resultHandler,faultHandler);
			}
			
			private function roomType_saveSuccess(evt:Object):void {
				roomTypes.addItem(roomTypeForm.currentRoomType);
				WindowsUtils.autoSelectComboBox(roomTypesCombo, roomTypeForm.currentRoomType);
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function titleWindow_close(evt:Object):void {
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function addRoomType():void{
				roomTypeForm = new RoomTypeIndividualCRUDForm();
				roomTypeForm.loc = loc;
				roomTypeForm.isUpdate = false;
				roomTypeForm.addEventListener("saveSuccess",roomType_saveSuccess);
				roomTypeForm.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.button.newLabel + ": " + loc.roomType.singular,roomTypeForm,this);
			}
			
			private function retrieveRoomTypes_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the ComboBox
				roomTypes.removeAll();
				roomTypes.addAll(event.result as ArrayCollection);
			}
			
			private function save():void{
				//TODO: validate all data
				//if(!allFieldsAreValid()){
				//	return;
				//}
				
				_currentRoom.number = numberStepper.value;
				_currentRoom.description = descriptionText.text;
				_currentRoom.roomType = roomTypesCombo.selectedItem;
				_currentRoom.withExtraBed = false;
				_currentRoom.withMaritalBed = false;
				if(maritalOrExtraBed.selectedValue == loc.room.withMaritalBed){
					_currentRoom.withMaritalBed = true;
				}else{
					_currentRoom.withExtraBed = true;
				}
				
				_currentRoom.peopleQuantity = peopleQuantityStepper.value;
				
				//calls service
				if(isUpdate){
					new RoomService().updateRecord(_currentRoom,roomSaved_resultHandler,faultHandler);
				}else{
					new RoomService().createRecord(_currentRoom,roomSaved_resultHandler,faultHandler);
				}
			}
			
			private function roomSaved_resultHandler(event:ResultEvent,token:Object=null):void {
				_currentRoom = event.result as Room;
				dispatchEvent(new Event("saveSuccess"));
			}
			
			private function cancel():void{
				dispatchEvent(new Event("cancelClicked"));
			}
			
			// Handle a message fault.
			private function faultHandler(event:FaultEvent,token:Object=null):void {
				Alert.show("Received fault: " + event.fault + "\n");
			}
			
			protected function init(event:FlexEvent):void
			{
				//autoloads all combos
				retrieveRoomTypes();			
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:RadioButtonGroup id="maritalOrExtraBed"/>
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
		</s:stroke>
		<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
	</s:Rect>
	<s:VGroup width="100%" height="100%">
		<s:HGroup width="100%" horizontalAlign="center">
			<s:Form>
				<s:layout>
					<s:FormLayout gap="-14"/>
				</s:layout>  
				
				<s:FormItem label="{loc.room.number}:" required="true">
					<s:NumericStepper id="numberStepper" maximum="{Number.MAX_VALUE}" width="50"/>
				</s:FormItem>
				<s:FormItem id="roomTypeItem" label="{loc.roomType.singular}:" required="true">
					<s:HGroup>
						<s:ComboBox id="roomTypesCombo" dataProvider="{roomTypes}" labelField="name"/>
						<s:Button width="24" height="24" click="retrieveRoomTypes();"
								  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
						<s:Button width="24" height="24" click="addRoomType();" icon="{Icons.add}"
								  toolTip="{loc.button.add}"/>
					</s:HGroup>
				</s:FormItem>
				<s:FormItem label="{loc.room.peopleQuantity}:" required="true">
					<s:NumericStepper id="peopleQuantityStepper" maximum="{Number.MAX_VALUE}" minimum="1" width="50"/>
				</s:FormItem>
				<s:FormItem label="{loc.room.withExtraBed}:" required="true">
					<s:RadioButton id="marital" groupName="maritalOrExtraBed" label="{loc.room.withMaritalBed}" selected="true"/>
					<s:RadioButton id="extra" groupName="maritalOrExtraBed" label="{loc.room.withExtraBed}"/>
				</s:FormItem>
			</s:Form>
			<s:Form>
				<s:FormItem label="{loc.room.description}:" required="true">
					<s:TextArea id="descriptionText"/>
				</s:FormItem>
				
			</s:Form>
		</s:HGroup>
		<!-- BUTTONS -->
		<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
			<s:Button label="{loc.button.save}" click="save()" icon="{Icons.save}"/>
			<s:Button label="{loc.button.cancel}" click="cancel()" icon="{Icons.cancel}"/>
		</s:HGroup>
		<s:Spacer height="5"/>
	</s:VGroup>
</s:Group>