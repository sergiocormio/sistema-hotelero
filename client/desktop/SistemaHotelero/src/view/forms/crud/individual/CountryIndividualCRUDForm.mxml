<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" creationComplete="init(event)">
	<fx:Metadata> 
		[Event(name="cancelClicked", type="flash.events.Event")]
		[Event(name="saveSuccess", type="flash.events.Event")]
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import model.Country;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import services.crud.CountryService;
			
			import utils.FaultHandler;
			
			[Bindable]
			public var loc:Object;
			
			[Bindable]
			public var isUpdate:Boolean;
			
			private var _currentCountry:Country = new Country(); 

			public function get currentCountry():Country
			{
				return _currentCountry;
			}

			public function set currentCountry(value:Country):void
			{
				_currentCountry = value;
				countryText.text = _currentCountry.name;
			}
			
			private function allFieldsAreValid():Boolean{
				var valid:Boolean = true;
				setEnabledValidators(true);
				if(countryNameValidator.validate().type != "valid"){
					valid = false;
				}
				setEnabledValidators(false);
				return valid;
			}
			
			private function setEnabledValidators(enabled:Boolean):void{
				countryNameValidator.enabled = enabled;
			}
			
			private function save():void{
				// validate all data
				if(!allFieldsAreValid()){
					return;
				}
				 
				_currentCountry.name = countryText.text;
				
				//calls service
				if(isUpdate){
					new CountryService().updateRecord(_currentCountry,countrySaved_resultHandler,FaultHandler.defaultFaultHandler);
				}else{
					new CountryService().createRecord(_currentCountry,countrySaved_resultHandler,FaultHandler.defaultFaultHandler);
				}
			}
			
			private function countrySaved_resultHandler(event:ResultEvent,token:Object=null):void {
				_currentCountry = event.result as Country;
				dispatchEvent(new Event("saveSuccess"));
			}
			
			private function cancel():void{
				dispatchEvent(new Event("cancelClicked"));
			}
			
			protected function init(event:FlexEvent):void
			{
				//countryText.setFocus();				
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:StringValidator id="countryNameValidator" 
							required="true"
							requiredFieldError="{loc.validator.requiredFieldError}" 
							source="{countryText}"
							property="text"/>
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
		</s:stroke>
		<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
	</s:Rect>
	<s:VGroup width="100%" height="100%">
		<s:HGroup width="100%" horizontalAlign="center">
			<s:Form>
				<s:layout>
					<s:FormLayout gap="-14"/>
				</s:layout>  
				
				<s:FormItem label="{loc.country.name}:" required="true">
					<s:TextInput id="countryText"/>
				</s:FormItem>
				
			</s:Form>
		</s:HGroup>
		<!-- BUTTONS -->
		<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
			<s:Button label="{loc.button.save}" icon="{Icons.save}" click="save()"/>
			<s:Button label="{loc.button.cancel}" icon="{Icons.cancel}" click="cancel()"/>
		</s:HGroup>
		<s:Spacer height="5"/>
	</s:VGroup>
</s:Group>
