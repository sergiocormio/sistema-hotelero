<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" creationComplete="init()">
	<fx:Metadata> 
		[Event(name="cancelClicked", type="flash.events.Event")]
		[Event(name="saveSuccess", type="flash.events.Event")]
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import locales.Locale;
			
			import model.ServiceType;
			import model.Transfer;
			import model.TransferModality;
			import model.TransferType;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import services.crud.ReservationFormService;
			import services.crud.ServiceTypeService;
			import services.crud.TransferService;
			
			import spark.events.IndexChangeEvent;
			
			import utils.DateRange;
			import utils.FaultHandler;
			import utils.WindowsUtils;
			
			import view.forms.ReservationFormSearcher;
			
			private var titleWindow:TitleWindow;
			
			[Bindable]
			private var serviceTypes:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var loc:Object;
			
			[Bindable]
			public var isUpdate:Boolean;
			
			[Bindable]
			private var reservationForms:ArrayCollection = new ArrayCollection();
			
			private var _currentTransfer:Transfer;
			
			private var reservationFormSearcher:ReservationFormSearcher;
			
			public function get currentTransfer():Transfer
			{
				return _currentTransfer;
			}
			
			public function set currentTransfer(value:Transfer):void
			{
				_currentTransfer = value;
				if(_currentTransfer.id != null){
					transferId.text = _currentTransfer.id.toString();
				}else{
					transferId.text = "";
				}
				dateChooserTake.selectedDate = _currentTransfer.date;
				if(_currentTransfer.date!=null){
					hoursTake.value = _currentTransfer.date.hours;
					minutesTake.value = _currentTransfer.date.minutes;
				}
				if(_currentTransfer.serviceType!=null){
					WindowsUtils.autoSelectComboBox(serviceTypesCombo,_currentTransfer.serviceType);
				}
				sourceText.text = _currentTransfer.source;
				flightOrBusNumberText.text = _currentTransfer.flightOrBusNumber;
				companyText.text = _currentTransfer.companyName;
				if(_currentTransfer.transferModality == null || _currentTransfer.transferModality == TransferModality.TAKE){
					take.selected = true;
				}else{
					carryBack.selected = true;
				}
				modalityChange(null);
				
			}
			
			private function allFieldsAreValid():Boolean{
				
				setEnabledValidators(true);
				
				var valArray:Array = new Array();
				
				/* valArray.push(transferIdValidator); */
				valArray.push(transferDateValidatorCarryBack);
				valArray.push(transferDateValidatorTake);
				
				var validatorErrorArray:Array = Validator.validateAll(valArray);;
				var isValidForm:Boolean = validatorErrorArray.length == 0;
				
				setEnabledValidators(false);
				
				return isValidForm;
			}
			
			private function setEnabledValidators(enabled:Boolean):void{
				if(dateChooserItemCarryBack){
					transferDateValidatorCarryBack.enabled = enabled;
				}
				
				if(dateChooserItemTake){
					transferDateValidatorTake.enabled = enabled;
				}
			}
			
			private function save():void{
				// validate all data
				if(!allFieldsAreValid()){
					return;
				}
				
				_currentTransfer.id = transferId.text;
				_currentTransfer.serviceType = serviceTypesCombo.selectedItem;
				_currentTransfer.source = sourceText.text;
				_currentTransfer.companyName = companyText.text;
				_currentTransfer.flightOrBusNumber = flightOrBusNumberText.text;
				_currentTransfer.reservationForm = reservationFormsCombo.selectedItem;
				if(_currentTransfer.serviceType.transferType == TransferType.ROUND_TRIP_BUS ||
					_currentTransfer.serviceType.transferType == TransferType.ROUND_TRIP_FLIGHT){
					
				}else{
					if(take.selected){
						_currentTransfer.transferModality = TransferModality.TAKE; 
						_currentTransfer.date = dateChooserTake.selectedDate;
						if(_currentTransfer.date!=null){
							_currentTransfer.date.hours = hoursTake.value;
							_currentTransfer.date.minutes = minutesTake.value;
						}
					}else{ //carryBack
						_currentTransfer.transferModality = TransferModality.CARRY_BACK;
						_currentTransfer.date = dateChooserCarryBack.selectedDate;
						if(_currentTransfer.date!=null){
							_currentTransfer.date.hours = hoursCarryBack.value;
							_currentTransfer.date.minutes = minutesCarryBack.value;
						}
					}
				}
				
				//calls service
				if(isUpdate){
					new TransferService().updateRecord(_currentTransfer,transferSaved_resultHandler,FaultHandler.defaultFaultHandler);
				}else{
					new TransferService().createRecord(_currentTransfer,transferSaved_resultHandler,FaultHandler.defaultFaultHandler);
				}
			}
			
			private function transferSaved_resultHandler(event:ResultEvent,token:Object=null):void {
				_currentTransfer = event.result as Transfer;
				dispatchEvent(new Event("saveSuccess"));
			}
			
			private function cancel():void{
				dispatchEvent(new Event("cancelClicked"));
			}
			
			protected function init():void
			{
				_currentTransfer = new Transfer();
				retrieveServiceTypes();
				retrieveReservationForms();
				//transferId.setFocus();
			}
			
			//ServiceTypes
			private function retrieveServiceTypes():void{
				var serv: ServiceTypeService= new ServiceTypeService();
				serv.getTransferServiceTypes(retrieveServiceTypes_resultHandler,FaultHandler.defaultFaultHandler);
			}
			
			private function retrieveServiceTypes_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the ComboBox
				serviceTypes.removeAll();
				serviceTypes.addAll(event.result as ArrayCollection);
			}
			
			//RESERVATION FORMS
			private function retrieveReservationForms():void{
				var serv:ReservationFormService = new ReservationFormService();
				serv.retrieveAll(retrieveReservationForms_resultHandler,FaultHandler.defaultFaultHandler);
			}
			
			private function retrieveReservationForms_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the ComboBox
				reservationForms.removeAll();
				reservationForms.addAll(event.result as ArrayCollection);
				serviceTypesCombo_changeHandler(null);
			}
			
			private function searchReservationForm():void{
				reservationFormSearcher = new ReservationFormSearcher();
				reservationFormSearcher.loc = loc;
				reservationFormSearcher.addEventListener("onSelect",reservationFormSelected);
				reservationFormSearcher.addEventListener("onCancel",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.reservationForm.plural,reservationFormSearcher);
			}
			
			private function reservationFormSelected(evt:Object):void {
				PopUpManager.removePopUp(titleWindow);
				WindowsUtils.autoSelectComboBox(reservationFormsCombo,reservationFormSearcher.reservationFormSelected);
			}
			
			private function titleWindow_close(evt:Object):void {
				PopUpManager.removePopUp(titleWindow);
			}
			
			protected function serviceTypesCombo_changeHandler(event:IndexChangeEvent):void
			{
				var serviceType:ServiceType = serviceTypesCombo.selectedItem;
				if(serviceType==null){
					enableTwoDates(false);
					return;
				}
				switch(serviceType.transferType){
					case TransferType.ONE_WAY_BUS:
					case TransferType.ONE_WAY_FLIGHT:
						enableTwoDates(false);
						break;
					case TransferType.ROUND_TRIP_BUS:
					case TransferType.ROUND_TRIP_FLIGHT:
						enableTwoDates(true);
						break;
				}
				
			}
			
			private function enableTwoDates(enabled:Boolean):void
			{
				dateChooserItemTake.enabled = enabled;
				hourItemTake.enabled = enabled;
				dateChooserItemCarryBack.enabled = enabled;
				hourItemCarryBack.enabled = enabled;
				carryBack.enabled= !enabled;
				take.enabled = !enabled;
				
				if(enabled == false){
					modalityChange(null);
				}
			}
			
			protected function modalityChange(event:Event):void
			{
				dateChooserItemTake.enabled=false;
				hourItemTake.enabled=false;
				dateChooserItemCarryBack.enabled=false;
				hourItemCarryBack.enabled=false;
				if(carryBack.selected){
					dateChooserItemCarryBack.enabled=true;
					hourItemCarryBack.enabled=true;
				}else{
					dateChooserItemTake.enabled=true;
					hourItemTake.enabled=true;
				}
				
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<!--<mx:StringValidator id="transferIdValidator" 
							required="true"
							requiredFieldError="{loc.validator.requiredFieldError}" 
							source="{transferId}"
							property="text"
							/>-->
		<mx:DateValidator id="transferDateValidatorCarryBack"
						  required="true"
						  requiredFieldError="{loc.validator.requiredFieldError}"
						  inputFormat="{loc.date.format}"
						  formatError="{loc.validator.invalidFieldValueError}"
						  invalidCharError="{loc.validator.invalidFieldValueError}"
						  wrongDayError="{loc.validator.invalidFieldValueError}"
						  wrongLengthError="{loc.validator.invalidFieldValueError}"
						  wrongMonthError="{loc.validator.invalidFieldValueError}"
						  wrongYearError="{loc.validator.invalidFieldValueError}"
						  source="{dateChooserCarryBack}"
						  property="text"
						  />
		<mx:DateValidator id="transferDateValidatorTake"
						  required="true"
						  requiredFieldError="{loc.validator.requiredFieldError}"
						  inputFormat="{loc.date.format}"
						  formatError="{loc.validator.invalidFieldValueError}"
						  invalidCharError="{loc.validator.invalidFieldValueError}"
						  wrongDayError="{loc.validator.invalidFieldValueError}"
						  wrongLengthError="{loc.validator.invalidFieldValueError}"
						  wrongMonthError="{loc.validator.invalidFieldValueError}"
						  wrongYearError="{loc.validator.invalidFieldValueError}"
						  source="{dateChooserTake}"
						  property="text"
						  />
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
		</s:stroke>
		<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
	</s:Rect>
	<s:VGroup width="100%" height="100%">
		<s:HGroup width="100%" horizontalAlign="center">
			<s:Form>
				<s:layout>
					<s:FormLayout gap="-14"/>
				</s:layout>  
				<s:FormItem label="{loc.transfer.id}:" required="false">
					<s:TextInput id="transferId" enabled="false"/>
				</s:FormItem>
				<s:FormItem id="serviceTypeItem" label="{loc.serviceType.singular}:" required="true">
					<s:HGroup>
						<s:ComboBox id="serviceTypesCombo" dataProvider="{serviceTypes}" labelField="name" requireSelection="true" change="serviceTypesCombo_changeHandler(event)"/>
						<s:Button width="24" height="24" click="retrieveServiceTypes();"
								  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
						<!--<s:Button width="24" height="24" click="addServiceType();" icon="{Icons.add}"
						toolTip="{loc.button.add}"/>-->
					</s:HGroup>
				</s:FormItem>
				
				<s:FormItem label="{loc.transfer.companyName}:">
					<s:TextInput id="companyText" />
				</s:FormItem>
				
				<s:FormItem label="{loc.transferModality.singular}:" required="false">
					<s:RadioButton id="take" groupName="modality" label="{loc.transferModality.take}" selected="true"
								   click="modalityChange(null)"/>
				</s:FormItem>
				
				<s:FormItem id="dateChooserItemTake" label="{loc.transfer.date}:" required="true">
					<mx:DateField id="dateChooserTake" width="120"
								  dayNames="{Locale.getInstance().dayNamesAbbr}" editable="true"
								  formatString="{loc.dateFormat.toUpperCase()}"
								  monthNames="{Locale.getInstance().monthNames}"/>
				</s:FormItem>
				
				<s:FormItem id="hourItemTake" label="{loc.transfer.hour}:" required="true">
					<s:HGroup verticalAlign="middle">
						<s:NumericStepper id="hoursTake" minimum="0" maximum="23"/>
						<s:Label text=":"/>
						<s:NumericStepper id="minutesTake" minimum="0" maximum="59" stepSize="15" />
					</s:HGroup>
				</s:FormItem>
				
				
			</s:Form>
			<s:Form>
				<s:layout>
					<s:FormLayout gap="-14"/>
				</s:layout>
				<s:FormItem label="{loc.reservationForm.singular}:">
					<s:HGroup>
						<s:ComboBox id="reservationFormsCombo" dataProvider="{reservationForms}" 
									labelField="name" requireSelection="true"
									width="260"/>
						<s:Button width="24" height="24" click="retrieveReservationForms();"
								  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
						<s:Button width="24" height="24" click="searchReservationForm();" icon="{Icons.search}"
								  toolTip="{loc.button.search}"/>
					</s:HGroup>
				</s:FormItem>
				<s:FormItem label="{loc.transfer.source}:">
					<s:TextInput id="sourceText" />
				</s:FormItem>
				<s:FormItem label="{loc.transfer.flightOrBusNumber}:">
					<s:TextInput id="flightOrBusNumberText" />
				</s:FormItem>
				<s:FormItem required="false">
					<s:RadioButton id="carryBack" groupName="modality" label="{loc.transferModality.carryBack}"
								   click="modalityChange(null)"/>
				</s:FormItem>
				
				<s:FormItem id="dateChooserItemCarryBack" label="{loc.transfer.date}:" required="false">
					<mx:DateField id="dateChooserCarryBack" width="120"
								  dayNames="{Locale.getInstance().dayNamesAbbr}" editable="true"
								  formatString="{loc.dateFormat.toUpperCase()}"
								  monthNames="{Locale.getInstance().monthNames}"/>
				</s:FormItem>
				
				<s:FormItem id="hourItemCarryBack" label="{loc.transfer.hour}:" required="false">
					<s:HGroup verticalAlign="middle">
						<s:NumericStepper id="hoursCarryBack" minimum="0" maximum="23"/>
						<s:Label text=":"/>
						<s:NumericStepper id="minutesCarryBack" minimum="0" maximum="59" stepSize="15" />
					</s:HGroup>
				</s:FormItem>
			</s:Form>
		</s:HGroup>
		<!-- BUTTONS -->
		<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
			<s:Button label="{loc.button.save}" icon="{Icons.save}" click="save()"/>
			<s:Button label="{loc.button.cancel}" icon="{Icons.cancel}" click="cancel()"/>
		</s:HGroup>
		<s:Spacer height="5"/>
	</s:VGroup>
</s:Group>
