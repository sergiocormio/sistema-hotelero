<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="view.components.*"
		  width="100%" height="100%" creationComplete="init(event)">
	<fx:Metadata> 
		[Event(name="cancelClicked", type="flash.events.Event")]
		[Event(name="saveSuccess", type="flash.events.Event")]
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import locales.Locale;
			
			import model.Country;
			import model.Customer;
			import model.CustomerPK;
			import model.Language;
			import model.Region;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.RegExpValidationResult;
			import mx.validators.ValidationResult;
			import mx.validators.Validator;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import services.crud.CountryService;
			import services.crud.CustomerService;
			import services.crud.DocumentTypeService;
			import services.crud.LanguageService;
			import services.crud.RegionService;
			
			import spark.events.IndexChangeEvent;
			
			import utils.FaultHandler;
			import utils.WindowsUtils;
			
			
			[Bindable]
			public var loc:Object;
			
			[Bindable]
			public var isUpdate:Boolean;
			
			private var _currentCustomer:Customer;
			
			[Bindable]
			private var documentTypes:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var languages:ArrayCollection = new ArrayCollection();
			
			private var titleWindow:TitleWindow;
			private var addressForm:AddressIndividualCRUDForm;
			private var docTypeForm:DocumentTypeIndividualCRUDForm;
			private var languageForm:LanguageIndividualCRUDForm;
			
			public function get currentCustomer():Customer
			{
				return _currentCustomer;
			}
			
			public function set currentCustomer(value:Customer):void
			{
				_currentCustomer = value;
				//load whole form
				if(_currentCustomer.docType != null){
					WindowsUtils.autoSelectComboBox(documentTypesCombo,_currentCustomer.docType);
				}else{
					documentTypesCombo.selectedIndex = 0;
				}
				
				idNumberText.text = _currentCustomer.idNumber;
				
				firstNameText.text = _currentCustomer.firstName;
				lastNameText.text = _currentCustomer.lastName;
				emailText.text = _currentCustomer.email;
				professionText.text = _currentCustomer.profession;
				dateOfBirthChooser.selectedDate = _currentCustomer.dateOfBirth;
				lastLodgementDateChooser.selectedDate = _currentCustomer.lastLodgementDate;
				
				if(_currentCustomer.language!=null){
					WindowsUtils.autoSelectComboBox(languagesCombo,_currentCustomer.language);
				}else{
					languagesCombo.selectedIndex = -1;	
				}
				phoneNumberText.text = _currentCustomer.phoneNumber;
				cellphoneNumberText.text = _currentCustomer.cellphoneNumber;
				
				addressText.text = _currentCustomer.addressAsText; 
			
			}

			protected function init(event:FlexEvent):void
			{
				_currentCustomer = new Customer();
				//autoloads all combos
				autoloadCombos();
				setInitialFocus();
			}
			
			private function autoloadCombos():void{
				retrieveDocumentTypes();
				retrieveLanguages();
			}
			
			private function retrieveDocumentTypes():void{
				var docTypeServ:DocumentTypeService = new DocumentTypeService();
				docTypeServ.retrieveAll(retrieveDocumentTypes_resultHandler,FaultHandler.defaultFaultHandler);
			}
			
			private function addDocumentType():void{
				docTypeForm = new DocumentTypeIndividualCRUDForm();
				docTypeForm.loc = loc;
				docTypeForm.isUpdate = false;
				docTypeForm.addEventListener("saveSuccess",docType_saveSuccess);
				docTypeForm.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.button.newLabel + ": " + loc.documentType.singular,docTypeForm,this.owner);
			}
			
			private function titleWindow_close(evt:Object):void {
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function docType_saveSuccess(evt:Object):void {
				documentTypes.addItem(docTypeForm.currentDocType);
				WindowsUtils.autoSelectComboBox(documentTypesCombo, docTypeForm.currentDocType);
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function addLanguage():void{
				languageForm = new LanguageIndividualCRUDForm();
				languageForm.loc = loc;
				languageForm.isUpdate = false;
				languageForm.addEventListener("saveSuccess",language_saveSuccess);
				languageForm.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.button.newLabel + ": " + loc.language.singular,languageForm,this.owner);
			}
			
			private function language_saveSuccess(evt:Object):void {
				languages.addItem(languageForm.currentLanguage);
				WindowsUtils.autoSelectComboBox(languagesCombo, languageForm.currentLanguage);
				PopUpManager.removePopUp(titleWindow);
			}
			
				
			private function retrieveDocumentTypes_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the documentTypes ComboBox
				documentTypes.removeAll();
				documentTypes.refresh();
				documentTypes.addAll(event.result as ArrayCollection);
			}
			
			private function customerSaved_resultHandler(event:ResultEvent,token:Object=null):void {
				dispatchEvent(new Event("saveSuccess"));
			}
			
			
			
			//LANGUAGES
			private function retrieveLanguages():void{
				var langServ:LanguageService = new LanguageService();
				langServ.retrieveAll(retrieveLanguages_resultHandler,FaultHandler.defaultFaultHandler);
			}
			
			private function retrieveLanguages_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the ComboBox
				languages.removeAll();
				languages.refresh();
				languages.addAll(event.result as ArrayCollection);
			}
			
			private function allFieldsAreValid():Boolean{
				if(documentTypesCombo.selectedIndex >= 0){
					regExpValidator.expression = documentTypesCombo.selectedItem.regExp;
				}
				setEnabledValidators(true);
				
				var valArray:Array = new Array();
				
				valArray.push(emailValidator);
				valArray.push(docTypeValidator);
				valArray.push(regExpValidator);
				valArray.push(dateOfBirthValidator);
				valArray.push(lastLodgementDateValidator);
				valArray.push(langValidator);
				
				var validatorErrorArray:Array = Validator.validateAll(valArray);
				var isValidForm:Boolean = validatorErrorArray.length == 0;
				
				setEnabledValidators(false);
				
				/* 
				
				now the email is mandatory, so we do not need to validate that at least should be specified 
				the email or any phone number...
				
				if(isValidForm){
					isValidForm = validateEmailAndPhones();
				}
				*/
				return isValidForm;
				
			}
			
			private function validateEmailAndPhones():Boolean{
				var validForm:Boolean = false;
				if(emailText.text != null && emailText.text.length > 0){
					emailValidator.enabled = true;
					if(emailValidator.validate().type == "valid"){
						validForm = true;			
					}
					emailValidator.enabled = false;
					return validForm	//so as not to show the alert message if this field is invalid
				}
				
				if(phoneNumberText.text != null && phoneNumberText.text.length > 0){
					validForm = true;
				}
				
				if(cellphoneNumberText.text != null && cellphoneNumberText.text.length > 0){
					validForm = true;
				}
				
				if(!validForm){
					Alert.show(loc.validator.emptyEmailAndPhonesError, loc.validator.error);
				}
				return validForm;
			}
			
			private function setEnabledValidators(enabled:Boolean):void{
				emailValidator.enabled = enabled;
				docTypeValidator.enabled = enabled;
				regExpValidator.enabled = enabled;
				dateOfBirthValidator.enabled = enabled;
				lastLodgementDateValidator.enabled = enabled;
				langValidator.enabled = enabled;
			}
			
			protected function save():void
			{
				
				// validate all data
				if(!allFieldsAreValid()){
					return;
				}
				//fills all fields
				if(currentCustomer.id == null){
					currentCustomer.id = new CustomerPK();
				}
				// TODO check optional fields...
				
				currentCustomer.idNumber = idNumberText.text;
				currentCustomer.docType = documentTypesCombo.selectedItem;
				currentCustomer.firstName = firstNameText.text;
				currentCustomer.lastName = lastNameText.text;
				currentCustomer.email = emailText.text;
				currentCustomer.lastLodgementDate = lastLodgementDateChooser.selectedDate;
				currentCustomer.dateOfBirth = dateOfBirthChooser.selectedDate;
				currentCustomer.profession = professionText.text;
				currentCustomer.language = languagesCombo.selectedItem;
				currentCustomer.phoneNumber = phoneNumberText.text;
				currentCustomer.cellphoneNumber = cellphoneNumberText.text;
				
				//calls service
				if(isUpdate){
					new CustomerService().updateRecord(currentCustomer,customerSaved_resultHandler,FaultHandler.defaultFaultHandler);
				}else{
					new CustomerService().createRecord(currentCustomer,customerSaved_resultHandler,FaultHandler.defaultFaultHandler);
				}
				
			}
			
			protected function cancel():void
			{
				dispatchEvent(new Event("cancelClicked"));
			}
			
						
			protected function setInitialFocus():void
			{
				if(enabled){
					if(isUpdate){
						firstNameText.setFocus();
					}else{
						idNumberText.setFocus();
					}
				}
			}
			
			public function refreshForm():void{
				autoloadCombos();
			}
			
			private function editAddress():void{
				addressForm = new AddressIndividualCRUDForm();
				addressForm.loc = loc;
				addressForm.currentAddress = _currentCustomer.address;
				addressForm.addEventListener("saveSuccess",address_saveSuccess);
				addressForm.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.button.modify + ": " + loc.customer.address.single, addressForm, this.owner);
			}
			
			
			private function address_saveSuccess(evt:Object):void {
				_currentCustomer.address = addressForm.currentAddress;
				addressText.text = _currentCustomer.addressAsText; 
				PopUpManager.removePopUp(titleWindow);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:NumberValidator id="docTypeValidator" 
							enabled="false"
							required="false"
							requiredFieldError="{loc.validator.requiredFieldError}"
							minValue="0"
							lowerThanMinError="{loc.validator.requiredFieldError}" 
							source="{documentTypesCombo}"
							property="selectedIndex" 
							/>
		<mx:RegExpValidator id="regExpValidator"
							enabled="false"
							required="false"
							requiredFieldError="{loc.validator.requiredFieldError}"
							flags="g"
							noMatchError="{loc.validator.regExp.noMatchError}"
							expression="{documentTypesCombo.selectedItem.regExp}" 
							source="{idNumberText}" 
							property="text"
							/>
		<mx:NumberValidator id="langValidator"
							enabled="false"
							required="false"
							minValue="0"
							lowerThanMinError="{loc.validator.requiredFieldError}" 
							source="{languagesCombo}"
							property="selectedIndex" 
							/>
		<mx:DateValidator id="dateOfBirthValidator"
						  enabled="false"
						  required="false"
						  inputFormat="{loc.date.format}"
						  formatError="{loc.validator.invalidFieldValueError}"
						  invalidCharError="{loc.validator.invalidFieldValueError}"
						  wrongDayError="{loc.validator.invalidFieldValueError}"
						  wrongLengthError="{loc.validator.invalidFieldValueError}"
						  wrongMonthError="{loc.validator.invalidFieldValueError}"
						  wrongYearError="{loc.validator.invalidFieldValueError}"
						  source="{dateOfBirthChooser}"
						  property="text"
						  />
		<mx:DateValidator id="lastLodgementDateValidator"
						  enabled="false"
						  required="false"
						  inputFormat="{loc.date.format}"
						  formatError="{loc.validator.invalidFieldValueError}"
						  invalidCharError="{loc.validator.invalidFieldValueError}"
						  wrongDayError="{loc.validator.invalidFieldValueError}"
						  wrongLengthError="{loc.validator.invalidFieldValueError}"
						  wrongMonthError="{loc.validator.invalidFieldValueError}"
						  wrongYearError="{loc.validator.invalidFieldValueError}"
						  source="{lastLodgementDateChooser}"
						  property="text"
						  />
		<mx:EmailValidator id="emailValidator" 
						   enabled="false"
						   required="true"
						   requiredFieldError="{loc.validator.requiredFieldError}"
						   invalidCharError="{loc.validator.invalidFieldValueError}"
						   invalidPeriodsInDomainError="{loc.validator.invalidFieldValueError}"
						   missingAtSignError="{loc.validator.invalidFieldValueError}"
						   missingPeriodInDomainError="{loc.validator.invalidFieldValueError}"
						   missingUsernameError="{loc.validator.invalidFieldValueError}"
						   tooManyAtSignsError="{loc.validator.invalidFieldValueError}"
						   source="{emailText}"
						   property="text" 
						   />
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
		</s:stroke>
		<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
	</s:Rect>
	<s:VGroup width="100%" height="100%" paddingLeft="-30" paddingRight="-30" gap="-20" paddingTop="-10">
		<s:HGroup width="100%" height="100%" horizontalAlign="center" paddingTop="0">
			<s:Form>
				<s:layout>
					<s:FormLayout gap="-14"/>
				</s:layout>  
		
				<s:FormItem label="{loc.customer.email}:" required="true">
					<s:TextInput id="emailText" widthInChars="15"/>
				</s:FormItem>
				<s:FormItem label="{loc.customer.firstName}:" >
					<s:TextInput id="firstNameText"/>
				</s:FormItem>
				<s:FormItem label="{loc.customer.lastName}:" >
					<s:TextInput id="lastNameText"/>
				</s:FormItem>
				<s:FormItem id="docTypeItem" label="{loc.documentType.singular}:">
					<s:HGroup>
						<s:ComboBox id="documentTypesCombo" dataProvider="{documentTypes}"
									labelField="name" requireSelection="true"/>
						<s:Button width="24" height="24" click="retrieveDocumentTypes();"
								  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
						<s:Button width="24" height="24" click="addDocumentType();" icon="{Icons.add}"
								  toolTip="{loc.button.add}"/>
					</s:HGroup>
				</s:FormItem>
				<s:FormItem label="{loc.customerPK.idNumber}:">
					<s:TextInput id="idNumberText"/>
				</s:FormItem>
				<s:FormItem label="{loc.customer.profession}:">
					<s:TextInput id="professionText"/>
				</s:FormItem>
				<s:FormItem label="{loc.customer.dateOfBirth}:">
					<mx:DateField id="dateOfBirthChooser" width="120"
								  dayNames="{Locale.getInstance().dayNamesAbbr}" editable="true"
								  formatString="{loc.dateFormat.toUpperCase()}"
								  monthNames="{Locale.getInstance().monthNames}"/>
				</s:FormItem>
			</s:Form>
			<s:Form>
				<s:layout>
					<s:FormLayout gap="-14"/>
				</s:layout>  
				
				<s:FormItem label="{loc.customer.lastLodgementDate}:">
					<mx:DateField id="lastLodgementDateChooser" width="120"
								  dayNames="{Locale.getInstance().dayNamesAbbr}" editable="true"
								  formatString="{loc.dateFormat.toUpperCase()}"
								  monthNames="{Locale.getInstance().monthNames}"/>
				</s:FormItem>
				<s:FormItem id="languageItem" label="{loc.language.singular}:" >
					<s:HGroup>
						<s:ComboBox id="languagesCombo" dataProvider="{languages}" labelField="name" requireSelection="true"/>
						<s:Button width="24" height="24" click="retrieveLanguages();"
								  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
						<s:Button width="24" height="24" click="addLanguage();" icon="{Icons.add}"
								  toolTip="{loc.button.add}"/>
					</s:HGroup>
				</s:FormItem>
				<s:FormItem label="{loc.customer.phoneNumber}:">
					<s:TextInput id="phoneNumberText"/>
				</s:FormItem>
				<s:FormItem label="{loc.customer.cellphoneNumber}:">
					<s:TextInput id="cellphoneNumberText"/>
				</s:FormItem>
				<s:FormItem id="addressItem" label="{loc.customer.address.single}:" >
					<s:HGroup>
						<s:TextArea id="addressText" height="80" editable="false"/>
						<s:Button width="24" height="24" click="editAddress();"
								  icon="{Icons.modify}" toolTip="{loc.button.modify}"/>
						
					</s:HGroup>
				</s:FormItem>
			</s:Form>
		</s:HGroup>
		<!-- BUTTONS -->
		<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" paddingTop="0">
			<s:Button label="{loc.button.save}" click="save()" icon="{Icons.save}"/>
			<s:Button label="{loc.button.cancel}" click="cancel()" icon="{Icons.cancel}"/>
		</s:HGroup>
	</s:VGroup>
</s:Group>
