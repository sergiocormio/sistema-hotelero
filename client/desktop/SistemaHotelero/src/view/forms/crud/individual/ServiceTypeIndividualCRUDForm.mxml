<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" creationComplete="init()">
	<fx:Metadata> 
		[Event(name="cancelClicked", type="flash.events.Event")]
		[Event(name="saveSuccess", type="flash.events.Event")]
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import model.ServiceType;
			import model.ServiceTypeModality;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import services.crud.ServiceTypeService;
			
			import utils.FaultHandler;
			import utils.WindowsUtils;
			
			[Bindable]
			public var loc:Object;
			
			[Bindable]
			public var isUpdate:Boolean;
			
			private var _currentServiceType:ServiceType;
			
			[Bindable]
			private var modalities:ArrayCollection; 
			
			public function get currentServiceType():ServiceType
			{
				return _currentServiceType;
			}
			
			public function set currentServiceType(value:ServiceType):void
			{
				_currentServiceType = value;
				serviceTypeText.text = _currentServiceType.name;
				WindowsUtils.autoSelectDropDownList(modalityList,_currentServiceType.modality);
				includedInBudget.selected = _currentServiceType.includedInBudget;
				includedInBasePrice.selected = _currentServiceType.includedInBasePrice;
				descriptionText.text = _currentServiceType.description;
				
				//avoids showing NaN
				if(_currentServiceType.price >= 0){
					priceText.text = _currentServiceType.price.toString();
				}else{
					priceText.text = '';
				}
			}
			
			private function allFieldsAreValid():Boolean{
				
				setEnabledValidators(true);
				
				var valArray:Array = new Array();
				
				valArray.push(serviceTypeNameValidator);
				valArray.push(priceValidator);
								
				var validatorErrorArray:Array = Validator.validateAll(valArray);
				var isValidForm:Boolean = validatorErrorArray.length == 0;
				
				setEnabledValidators(false);
				
				return isValidForm;
				
			}
			
			private function setEnabledValidators(enabled:Boolean):void{
				serviceTypeNameValidator.enabled = enabled;
				priceValidator.enabled = enabled;
			}
			
			private function save():void{
				// validate all data
				if(!allFieldsAreValid()){
					return;
				}
				
				_currentServiceType.name = serviceTypeText.text;
				_currentServiceType.modality = (modalityList.selectedItem as ServiceTypeModality).id;
				_currentServiceType.includedInBudget = includedInBudget.selected;
				_currentServiceType.includedInBasePrice = includedInBasePrice.selected;
				_currentServiceType.price = Number(priceText.text);
				_currentServiceType.description = descriptionText.text;
				
				//calls service
				if(isUpdate){
					new ServiceTypeService().updateRecord(_currentServiceType,serviceTypeSaved_resultHandler,FaultHandler.defaultFaultHandler);
				}else{
					new ServiceTypeService().createRecord(_currentServiceType,serviceTypeSaved_resultHandler,FaultHandler.defaultFaultHandler);
				}
			}
			
			private function serviceTypeSaved_resultHandler(event:ResultEvent,token:Object=null):void {
				_currentServiceType = event.result as ServiceType;
				dispatchEvent(new Event("saveSuccess"));
			}
			
			private function cancel():void{
				dispatchEvent(new Event("cancelClicked"));
			}
			
			protected function init():void
			{
				currentServiceType = new ServiceType();
				//serviceTypeText.setFocus();
				loadModalities();
				includedInBasePrice.enabled = false;
			}
			
			private function checkIncludedInBasePrice():void{
				
				if(includedInBudget.selected == true){
					includedInBasePrice.enabled = true;
				}
				else{
					includedInBasePrice.selected = false;
					includedInBasePrice.enabled = false;
				}
				
			}
			
			private function loadModalities():void{
				modalities = new ArrayCollection();
				for each (var id:String in ServiceTypeModality.modalityIds){
					modalities.addItem(new ServiceTypeModality(id, loc));
				}
				
				//select by default the first one if there no currentServiceType
				if(currentServiceType == null || currentServiceType.modality == null){
					modalityList.selectedIndex = 0;
				}else{
					WindowsUtils.autoSelectDropDownList(modalityList,currentServiceType.modality);
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:StringValidator id="serviceTypeNameValidator" 
							required="true"
							requiredFieldError="{loc.validator.requiredFieldError}" 
							source="{serviceTypeText}"
							property="text"
							/>
		<mx:NumberValidator id="priceValidator"
							required="true"
							requiredFieldError="{loc.validator.requiredFieldError}"
							minValue="0"
							domain="real"
							allowNegative="false"
							precision="3"
							precisionError="{loc.validator.precisionError}"
							separationError="{loc.validator.invalidFieldValueError}"
							negativeError="{loc.validator.invalidFieldValueError}"
							lowerThanMinError="{loc.validator.invalidFieldValueError}"
							invalidCharError="{loc.validator.invalidFieldValueError}"
							invalidFormatCharsError="{loc.validator.invalidFieldValueError}"
							decimalPointCountError="{loc.validator.invalidFieldValueError}"
							source="{priceText}"
							property="text"
							/>
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
		</s:stroke>
		<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
	</s:Rect>
	<s:VGroup width="100%" height="100%">
		<s:HGroup width="100%" horizontalAlign="center">
			<s:Form>
				<s:layout>
					<s:FormLayout gap="-14"/>
				</s:layout>  
				
				<s:FormItem label="{loc.serviceType.name}:" required="true">
					<s:TextInput id="serviceTypeText"/>
				</s:FormItem>
				
				<s:FormItem label="{loc.serviceType.price}:" required="true">
					<s:TextInput id="priceText"/>
				</s:FormItem>
			
				<s:FormItem label="{loc.serviceType.modality.singular}:" required="true">
					<s:HGroup verticalAlign="middle">
						<s:DropDownList id="modalityList" dataProvider="{modalities}" width="150"/>
						<s:Button width="24" height="24" click="loadModalities();"
								  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
					</s:HGroup>
				</s:FormItem>
	
				<s:FormItem label="{loc.serviceType.includedInBudgetQuery}:">
					<s:CheckBox id="includedInBudget" click="checkIncludedInBasePrice()"/>
				</s:FormItem>
				
				<s:FormItem label="{loc.serviceType.includedInBasePriceQuery}:">
					<s:CheckBox id="includedInBasePrice"/>
				</s:FormItem>
				
			</s:Form>
			<s:Form>
				<s:FormItem label="{loc.serviceType.description}:">
					<s:TextArea id="descriptionText"/>
				</s:FormItem>
			</s:Form>
		</s:HGroup>
		<!-- BUTTONS -->
		<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
			<s:Button label="{loc.button.save}" icon="{Icons.save}" click="save()"/>
			<s:Button label="{loc.button.cancel}" icon="{Icons.cancel}" click="cancel()"/>
		</s:HGroup>
		<s:Spacer height="5"/>
	</s:VGroup>
</s:Group>
