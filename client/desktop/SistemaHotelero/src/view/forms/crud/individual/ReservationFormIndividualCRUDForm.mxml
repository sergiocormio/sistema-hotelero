<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" creationComplete="init()">
	<fx:Metadata> 
		[Event(name="cancelClicked", type="flash.events.Event")]
		[Event(name="saveSuccess", type="flash.events.Event")]
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import flash.sampler.NewObjectSample;
			
			import locales.Locale;
			
			import model.Alternative;
			import model.AlternativeWrapper;
			import model.Occupation;
			import model.ReservationForm;
			import model.Room;
			import model.StateReservationForm;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import services.BudgetService;
			import services.crud.BankService;
			import services.crud.CustomerService;
			import services.crud.ReservationFormService;
			
			import utils.DateTimeUtils;
			import utils.FaultHandler;
			import utils.WindowsUtils;
			
			import view.components.ManualAlternativeForm;
			import view.forms.DisplayBudgetForm;
			
			[Bindable]
			public var loc:Object;
			
			[Bindable]
			public var isUpdate:Boolean;
			
			[Bindable]
			public var customers:ArrayCollection  = new ArrayCollection();
			
			[Bindable]
			public var banks:ArrayCollection  = new ArrayCollection();
			
			[Bindable]
			private var reservationFormStates:ArrayCollection; 
			
			private var _currentReservationForm:ReservationForm;
			
			private var _alternative:Alternative = new Alternative();
			
			private var titleWindow:TitleWindow;
			private var customerForm:CustomerIndividualCRUDForm;
			private var bankForm:BankIndividualCRUDForm;
			private var manualAlternativeForm:ManualAlternativeForm;
			private var budgetForm:DisplayBudgetForm;
			
			public function get alternative():Alternative
			{
				return _alternative;
			}

			public function set alternative(value:Alternative):void
			{
				_alternative = value;
			}

			public function get currentReservationForm():ReservationForm
			{
				return _currentReservationForm;
			}
			
			public function set currentReservationForm(value:ReservationForm):void
			{
				_currentReservationForm = value;
				//load whole form
				if(_currentReservationForm.id != null){
					idText.text = _currentReservationForm.id.toString();
				}else{
					idText.text = "";
				}
				WindowsUtils.autoSelectComboBox(customersCombo,_currentReservationForm.customer);
				WindowsUtils.autoSelectDropDownList(stateList,_currentReservationForm.state);
				//adds creation date
				if(_currentReservationForm.creationDate == null){
					_currentReservationForm.creationDate = new Date();
				}
				creationDateChooser.selectedDate = _currentReservationForm.creationDate;
				dateFromChooser.selectedDate = _currentReservationForm.dateFrom;
				dateToChooser.selectedDate = _currentReservationForm.dateTo;
				adultsQtyStepper.value = _currentReservationForm.adultsQuantity;
				childrenQtyStepper.value = _currentReservationForm.childrenQuantity;
				
				//avoids showing NaN
				if(_currentReservationForm.pricePerDay >= 0){
					pricePerDayText.text = _currentReservationForm.pricePerDay.toString();
					totalPriceText.text = _currentReservationForm.totalPrice.toString();
					monetaryReserveText.text = _currentReservationForm.monetaryReserve.toString();
					remainingAmountText.text = _currentReservationForm.remainingAmount.toString();
				}else{
					pricePerDayText.text = '';
					totalPriceText.text = '';
					monetaryReserveText.text = '';
					remainingAmountText.text = '';
				}
				
				
				WindowsUtils.autoSelectComboBox(banksCombo,_currentReservationForm.bank);
				bankDocumentNumberText.text = _currentReservationForm.bankDocumentNumber;
				//resets alternative
				alternative = new Alternative();
				updateNightsLabel(calculateAmountOfNights());
			}
			
			private function allFieldsAreValid():Boolean{
				
				setEnabledValidators(true);
				
				var valArray:Array = new Array();
				
				valArray.push(customerValidator);
				valArray.push(dateFromValidator);
				valArray.push(dateToValidator);
				
				var validatorErrorArray:Array = Validator.validateAll(valArray);;
				var isValidForm:Boolean = validatorErrorArray.length == 0;
				
				setEnabledValidators(false);
				if(!isValidForm){
					return isValidForm;
				}
				
				
				isValidForm = validateSelectedPeople();
				
				if(!isValidForm){
					Alert.show(loc.validator.reservationFormCreation.peopleQtyNotSelected);
					return isValidForm;
				}
				
				isValidForm = validateRoomsCapacity();
				
				if(!isValidForm){
					Alert.show(loc.validator.reservationFormCreation.noAvalaibleRoomsForThatPeopleQty);
				}
				
				return isValidForm;
				
			}
			
			private function setEnabledValidators(enabled:Boolean):void{
				customerValidator.enabled = enabled;
				dateFromValidator.enabled = enabled;
				dateToValidator.enabled = enabled;
			}
			
			private function save():void{
				//TODO: validate all data
				 if(!allFieldsAreValid()){
					return;
				} 
				_currentReservationForm.customer = customersCombo.selectedItem;
				_currentReservationForm.state = (stateList.selectedItem as StateReservationForm).id;
				//_currentReservationForm.creationDate
				_currentReservationForm.dateFrom = dateFromChooser.selectedDate;
				_currentReservationForm.dateTo = dateToChooser.selectedDate;
				_currentReservationForm.adultsQuantity = adultsQtyStepper.value;
				_currentReservationForm.childrenQuantity = childrenQtyStepper.value;
				
				_currentReservationForm.pricePerDay = Number(pricePerDayText.text);
				_currentReservationForm.totalPrice = Number(totalPriceText.text);
				_currentReservationForm.monetaryReserve = Number(monetaryReserveText.text);
				_currentReservationForm.remainingAmount = Number(remainingAmountText.text);
				
				_currentReservationForm.bank = banksCombo.selectedItem;
				_currentReservationForm.bankDocumentNumber = bankDocumentNumberText.text;
				
				//calls service
				if(isUpdate){
					new ReservationFormService().updateRecord(_currentReservationForm,reservationFormSaved_resultHandler,FaultHandler.defaultFaultHandler);
				}else{
					new ReservationFormService().book(alternative,_currentReservationForm,reservationFormSaved_resultHandler,FaultHandler.defaultFaultHandler);
				}
			}
			
			private function reservationFormSaved_resultHandler(event:ResultEvent,token:Object=null):void {
				_currentReservationForm = event.result as ReservationForm;
				dispatchEvent(new Event("saveSuccess"));
			}
			
			private function cancel():void{
				dispatchEvent(new Event("cancelClicked"));
			}
			
			protected function init():void
			{
				currentReservationForm = new ReservationForm();
				retrieveCustomers();
				loadStates();
				retrieveBanks();
			}
			
			private function retrieveCustomers():void{
				var customerServ:CustomerService = new CustomerService();
				customerServ.retrieveAll(retrieveCustomers_resultHandler,FaultHandler.defaultFaultHandler);
			}
			
			private function retrieveCustomers_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the ComboBox
				customers.removeAll();
				customers.addAll(event.result as ArrayCollection);
			}
			
			private function addCustomer():void{
				customerForm = new CustomerIndividualCRUDForm();
				customerForm.loc = loc;
				customerForm.isUpdate = false;
				customerForm.addEventListener("saveSuccess",customer_saveSuccess);
				customerForm.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.button.newLabel + ": " + loc.customer.singular,customerForm);
			}
			
			private function titleWindow_close(evt:Object):void {
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function customer_saveSuccess(evt:Object):void {
				customers.addItem(customerForm.currentCustomer);
				WindowsUtils.autoSelectComboBox(customersCombo, customerForm.currentCustomer);
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function loadStates():void{
				reservationFormStates = new ArrayCollection();
				for each (var id:String in StateReservationForm.stateReservationIds){
					reservationFormStates.addItem(new StateReservationForm(id, loc));
				}
				
				//select by default the first one if there no current Object
				if(currentReservationForm == null || currentReservationForm.state == null){
					stateList.selectedIndex = 0;
				}else{
					WindowsUtils.autoSelectDropDownList(stateList,currentReservationForm.state);
				}
			}
			
			public function setPossibleStates(states:ArrayCollection):void{
				reservationFormStates = states;
				refreshStates.enabled = false;
			}
			
			private function retrieveBanks():void{
				var bankServ:BankService = new BankService();
				bankServ.retrieveAll(retrieveBanks_resultHandler,FaultHandler.defaultFaultHandler);
			}
			
			private function retrieveBanks_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the ComboBox
				banks.removeAll();
				banks.addAll(event.result as ArrayCollection);
			}
			
			private function addBank():void{
				bankForm = new BankIndividualCRUDForm();
				bankForm.loc = loc;
				bankForm.isUpdate = false;
				bankForm.addEventListener("saveSuccess",bank_saveSuccess);
				bankForm.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.button.newLabel + ": " + loc.bank.singular,bankForm);
			}
			
			private function bank_saveSuccess(evt:Object):void {
				banks.addItem(bankForm.currentBank);
				WindowsUtils.autoSelectComboBox(banksCombo, bankForm.currentBank);
				titleWindow_close(null);
			}
			
			protected function loadManualAlternative():void
			{
				manualAlternativeForm = new ManualAlternativeForm();
				manualAlternativeForm.loc = loc;
				manualAlternativeForm.alternative = alternative;
				manualAlternativeForm.addEventListener("saveClicked",manualAlternative_saveSuccess);
				manualAlternativeForm.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.lodgement.loadLodgementManually,manualAlternativeForm);
			}
			
			private function manualAlternative_saveSuccess(evt:Object):void {
				//enables budget button
				displayBudgetButton.visible = true;
				displayBudgetButton.enabled = true;
				//shows altenative info on form
				alternative = manualAlternativeForm.getManualAlternative();
				var wrapper:AlternativeWrapper = new AlternativeWrapper(alternative); 
				dateFromChooser.selectedDate = wrapper.dateFrom;
				dateToChooser.selectedDate = wrapper.dateTo;
				//pre-load fields: price per day and total price
				updateNightsLabel(calculateAmountOfNights());
				preLoadPrices();
				titleWindow_close(null);
			}
			
			private function preLoadBudget_resultHandler(event:ResultEvent,token:Object=null):void {
				alternative = event.result as Alternative;
				var totalPrice:Number = alternative.budget.basePricePlusAllServicesIncludedInBasePrice;
				var pricePerDay:Number = totalPrice / calculateAmountOfNights();
//				pricePerDayText.text = alternative.budget.pricePerDay.toString();
				pricePerDayText.text = pricePerDay.toString();
				totalPriceText.text = totalPrice.toString();
				calculateRemainingAmount();
			}
			
			private function calculateRemainingAmount():void{
				var totalPrice:Number = Number(totalPriceText.text);
				var reserve:Number = Number(monetaryReserveText.text);
				remainingAmountText.text = (totalPrice - reserve).toString();
			}
			
			//calculates amount of nights
			private function calculateAmountOfNights():Number
			{
				var nights:Number;
				if(dateFromChooser.selectedDate != null && dateToChooser.selectedDate!=null){
					nights = DateTimeUtils.getQuantityOfDays(dateFromChooser.selectedDate, dateToChooser.selectedDate) + 1;
				}else{
					nights = 0;
				}
				return nights;
			}
			
			//updates nights label.
			private function updateNightsLabel(nights:Number):void
			{
				var label:String = "(";
				if(nights==0){
					label+="- " + loc.day.plural;
				}else if(nights == 1){
					label+="1 " + loc.day.singular;
				}else{
					label+= nights + " " + loc.night.plural;
				}
				label +=")";
				amountOfNights.text = label;
			}
			
			private function validateSelectedPeople():Boolean
			{
				if(adultsQtyStepper.value == 0 && childrenQtyStepper.value == 0){
					return false;
				}
				else{
					return true;
				}
			}
			
			private function validateRoomsCapacity():Boolean
			{
				// get the sum of children and adults qty
				var selectedPeopleQuantity:Number = adultsQtyStepper.value + childrenQtyStepper.value;
				
				var distinctRooms:ArrayCollection = getDistinctRooms();
				
				// check if all distinct rooms can store people qty
				for(var i:int = 0; i < distinctRooms.length; i++){
					var room:Room = distinctRooms.getItemAt(i) as Room;
					if(room.peopleQuantity < selectedPeopleQuantity){
						return false;
					}
				}
				return true;
			}
			
			private function getDistinctRooms():ArrayCollection
			{
				var distinctRooms:ArrayCollection = new ArrayCollection();
				var lastRoom:Room = null;
				
				for(var i:int = 0; i < alternative.occupations.length; i++){
					var occupationi:Occupation= alternative.occupations.getItemAt(i) as Occupation;
					var roomi:Room = occupationi.id.room;
					if(lastRoom == null){
						lastRoom = roomi;
						distinctRooms.addItem(lastRoom);
					}
					else if(lastRoom.id != roomi.id){
						lastRoom = roomi;
						distinctRooms.addItem(lastRoom);
					}
				}
				return distinctRooms;
			}
			
			private function displayBudget():void{
				if(manualAlternativeForm != null && manualAlternativeForm.getManualAlternative() != null){
					
					if(!validateSelectedPeople()){
						Alert.show(loc.validator.reservationFormCreation.peopleQtyNotSelected);
						return;
					}
					if(!validateRoomsCapacity()){
						Alert.show(loc.validator.reservationFormCreation.noAvalaibleRoomsForThatPeopleQty);
						return;
					}
					var manualAlternative:Alternative = manualAlternativeForm.getManualAlternative();
					manualAlternative.peopleQuantity = adultsQtyStepper.value + childrenQtyStepper.value;
					
					new BudgetService().populateBudget(manualAlternative, populateBudget_resultHandler, FaultHandler.defaultFaultHandler);
				}
			}
			
			private function populateBudget_resultHandler(event:ResultEvent,token:Object=null):void {
				budgetForm = new DisplayBudgetForm();
				budgetForm.loc = loc;
				
				budgetForm.alternativeSelectedInDefaultPrice = event.result as Alternative;
				
				//budgetForm.addEventListener("saveSuccess",customer_saveSuccess);
				budgetForm.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.budget.title + ":", budgetForm);
			}
			
			private function preLoadPrices():void{
				alternative.peopleQuantity = adultsQtyStepper.value + childrenQtyStepper.value;
				new BudgetService().populateBudget(alternative, preLoadBudget_resultHandler, FaultHandler.defaultFaultHandler);
			}
			
			
		]]>
		
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:NumberValidator id="customerValidator"
							enabled="false"
							required="true"
							requiredFieldError="{loc.validator.requiredFieldError}"
							minValue="0"
							lowerThanMinError="{loc.validator.requiredFieldError}" 
							source="{customersCombo}"
							property="selectedIndex" 
							/>
		<mx:DateValidator id="dateFromValidator"
						  required="true"
						  requiredFieldError="{loc.validator.requiredFieldError}"
						  inputFormat="{loc.date.format}"
						  formatError="{loc.validator.invalidFieldValueError}"
						  invalidCharError="{loc.validator.invalidFieldValueError}"
						  wrongDayError="{loc.validator.invalidFieldValueError}"
						  wrongLengthError="{loc.validator.invalidFieldValueError}"
						  wrongMonthError="{loc.validator.invalidFieldValueError}"
						  wrongYearError="{loc.validator.invalidFieldValueError}"
						  source="{dateFromChooser}"
						  property="text"
						  />
		<mx:DateValidator id="dateToValidator"
						  required="true"
						  requiredFieldError="{loc.validator.requiredFieldError}"
						  inputFormat="{loc.date.format}"
						  formatError="{loc.validator.invalidFieldValueError}"
						  invalidCharError="{loc.validator.invalidFieldValueError}"
						  wrongDayError="{loc.validator.invalidFieldValueError}"
						  wrongLengthError="{loc.validator.invalidFieldValueError}"
						  wrongMonthError="{loc.validator.invalidFieldValueError}"
						  wrongYearError="{loc.validator.invalidFieldValueError}"
						  source="{dateToChooser}"
						  property="text"
						  />
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
		</s:stroke>
		<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
	</s:Rect>
	<s:VGroup width="100%" height="100%" gap="0" paddingTop="0" paddingBottom="0">
		<s:HGroup width="100%" horizontalAlign="center" paddingTop="0" paddingBottom="0" >
			<s:Form>
				<s:layout>
					<s:FormLayout gap="-14"/>
				</s:layout>  
				
				<s:FormItem label="{loc.reservationForm.id}:" required="true" enabled="false">
					<s:TextInput id="idText"/>
				</s:FormItem>
				
				<s:FormItem id="customerItem" label="{loc.customer.singular}:" required="true">
					<s:HGroup>
						<s:ComboBox id="customersCombo" dataProvider="{customers}" labelField="name" width="200"/>
						<s:Button width="24" height="24" click="retrieveCustomers();"
								  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
						<s:Button width="24" height="24" click="addCustomer();" icon="{Icons.add}"
								  toolTip="{loc.button.add}"/>
					</s:HGroup>
				</s:FormItem>
				
				<s:FormItem label="{loc.reservationForm.state.singular}:" required="true" enabled="false">
					<s:HGroup verticalAlign="middle">
						<s:DropDownList id="stateList" dataProvider="{reservationFormStates}" width="150"/>
						<s:Button width="24" height="24" id="refreshStates" click="loadStates();"
								  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
					</s:HGroup>
				</s:FormItem>
				
				<s:FormItem label="{loc.reservationForm.creationDate}:" required="false" enabled="false">
					<mx:DateField id="creationDateChooser" width="120"
								  dayNames="{Locale.getInstance().dayNamesAbbr}" editable="true"
								  formatString="{loc.dateFormat.toUpperCase()}"
								  monthNames="{Locale.getInstance().monthNames}"/>
				</s:FormItem>

				<s:FormItem label="{loc.reservationForm.dateFrom}:" required="true" enabled="false">
					<mx:DateField id="dateFromChooser" width="120"
								  dayNames="{Locale.getInstance().dayNamesAbbr}" editable="true"
								  formatString="{loc.dateFormat.toUpperCase()}"
								  monthNames="{Locale.getInstance().monthNames}"/>
				</s:FormItem>
				
				<s:FormItem label="{loc.reservationForm.dateTo}:" required="true" enabled="false">
					<mx:DateField id="dateToChooser" width="120"
								  dayNames="{Locale.getInstance().dayNamesAbbr}" editable="true"
								  formatString="{loc.dateFormat.toUpperCase()}"
								  monthNames="{Locale.getInstance().monthNames}"/>
				</s:FormItem>
			
				<s:FormItem label="{loc.reservationForm.monetaryReserve}:" required="false">
					<s:TextInput id="monetaryReserveText"/>
				</s:FormItem>
												
			</s:Form>
			
			<s:VGroup paddingLeft="-140">
				<s:Spacer height="130"/>
				<s:Button id="loadManualAlternativeButton" label="{loc.lodgement.singular}" 
						  icon="{Icons.calendarEdit}" iconPlacement="top" click="loadManualAlternative()"
						  enabled="{!isUpdate}"/>
			</s:VGroup>
			
			<s:Form>
				<s:layout>
					<s:FormLayout gap="-14"/>
				</s:layout>  
				
				<s:FormItem label="{loc.reservationForm.adultsQuantity}:" required="true">
					<s:NumericStepper id="adultsQtyStepper" maximum="{Number.MAX_VALUE}" width="50"/>
				</s:FormItem>
				
				<s:FormItem label="{loc.reservationForm.childrenQuantity}:" required="true">
					<s:NumericStepper id="childrenQtyStepper" maximum="{Number.MAX_VALUE}" width="50"/>
				</s:FormItem>
				<s:FormItem label="{loc.reservationForm.pricePerDay}:" required="true">
					<s:TextInput id="pricePerDayText"/>
				</s:FormItem>
				
				<s:FormItem label="{loc.reservationForm.totalPrice}:" required="true">
					<s:HGroup verticalAlign="middle">
						<s:TextInput id="totalPriceText"/>
						<s:Label id="amountOfNights" fontWeight="bold"/>
						<s:Button width="24" height="24" click="preLoadPrices();"
								  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
					</s:HGroup>
				</s:FormItem>
				
				<s:FormItem id="bankItem" label="{loc.bank.singular}:" required="false">
					<s:HGroup verticalAlign="middle">
						<s:ComboBox id="banksCombo" dataProvider="{banks}" labelField="name" width="200"/>
						<s:Button width="24" height="24" click="retrieveBanks();"
								  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
						<s:Button width="24" height="24" click="addBank();" icon="{Icons.add}"
								  toolTip="{loc.button.add}"/>
					</s:HGroup>
				</s:FormItem>
				
				<s:FormItem label="{loc.reservationForm.bankDocumentNumber}:" required="false">
					<s:TextInput id="bankDocumentNumberText"/>
				</s:FormItem>
				
				<s:FormItem label="{loc.reservationForm.remainingAmount}:"  required="true">
					<s:HGroup verticalAlign="middle">
						<s:TextInput id="remainingAmountText"/>
						<s:Button width="24" height="24" click="calculateRemainingAmount();"
								  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
					</s:HGroup>
				</s:FormItem>
			</s:Form>
		</s:HGroup>
		<!-- BUTTONS -->
		<s:HGroup width="100%" horizontalAlign="center" verticalAlign="middle" paddingTop="0" paddingBottom="0">
			<s:Button label="{loc.alternative.buttons.budget}" visible="false" 
					  id="displayBudgetButton" click="displayBudget()" icon="{Icons.moneyBag}"/>
			<s:Button label="{loc.button.save}" icon="{Icons.save}" click="save()"/>
			<s:Button label="{loc.button.cancel}" icon="{Icons.cancel}" click="cancel()"/>
		</s:HGroup>
		<!--<s:Spacer height="5"/>-->
	</s:VGroup>
</s:Group>
