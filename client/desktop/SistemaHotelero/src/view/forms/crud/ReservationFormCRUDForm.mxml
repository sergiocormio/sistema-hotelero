<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:individual="view.forms.crud.individual.*" xmlns:components="view.components.*"
		  creationComplete="init(event)">
	<fx:Metadata> 
		[Event(name="reservationFormHasChanged", type="flash.events.Event")]
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import locales.Locale;
			
			import model.Customer;
			import model.ReservationForm;
			import model.StateReservationForm;
			import model.Transfer;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.effects.Pause;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import services.crud.CustomerService;
			import services.crud.ReservationFormService;
			
			import spark.events.GridSelectionEvent;
			
			import utils.DateTimeUtils;
			import utils.FaultHandler;
			import utils.PdfDisplayer;
			import utils.WindowsUtils;
			import utils.log.DebugLog;
			
			import view.components.Mask;
			import view.forms.crud.individual.CustomerIndividualCRUDForm;
			import view.forms.crud.individual.TransferIndividualCRUDForm;
			
			private var titleWindow:TitleWindow;
			private var customerForm:CustomerIndividualCRUDForm;
			private var transferForm:TransferIndividualCRUDForm;
			
			[Bindable]
			public var loc:Object;
			
			[Bindable]
			private var reservationForms:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var customers:ArrayCollection  = new ArrayCollection();
						
			[Bindable]
			private var reservationFormStates:ArrayCollection;
			
			private function retrieveAll_resultHandler(event:ResultEvent,token:Object=null):void {
				grid.selectedItem = null;
				reservationForms.removeAll();
				reservationForms.addAll(event.result as ArrayCollection);
			}
			
			
			private function delete_resultHandler(event:ResultEvent,token:Object=null):void {
				refreshGrid();
			}
			
			
			protected function init(event:FlexEvent):void{
				//waits until Server Ready to initialize form
				SistemaHotelero.addEventListener(SistemaHotelero.SERVER_READY,initializeForm);
			}
			
			private function initializeForm(event:Event = null):void{
				DebugLog.log("Initializing Reservation Form...");
				retrieveCustomers();
				loadStates();
				
				cleanFilterForm();
				refreshGrid();
				createContextMenu();
			}
			
			private function retrieveCustomers():void{
				var customerServ:CustomerService = new CustomerService();
				customerServ.retrieveAll(retrieveCustomers_resultHandler,FaultHandler.defaultFaultHandler);
			}
			
			private function retrieveCustomers_resultHandler(event:ResultEvent,token:Object=null):void {
				//fills the ComboBox
				customers.removeAll();
				customers.addAll(event.result as ArrayCollection);
			}
			
			private function addCustomer():void{
				customerForm = new CustomerIndividualCRUDForm();
				customerForm.loc = loc;
				customerForm.isUpdate = false;
				customerForm.addEventListener("saveSuccess",customer_saveSuccess);
				customerForm.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.button.newLabel + ": " + loc.customer.singular,customerForm);
			}
			
			private function titleWindow_close(evt:Object):void {
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function customer_saveSuccess(evt:Object):void {
				customers.addItem(customerForm.currentCustomer);
				WindowsUtils.autoSelectComboBox(customersCombo, customerForm.currentCustomer);
				PopUpManager.removePopUp(titleWindow);
			}
			
			private function loadStates():void{
				reservationFormStates = new ArrayCollection();
				for each (var id:String in StateReservationForm.stateReservationIds){
					reservationFormStates.addItem(new StateReservationForm(id, loc));
				}
			}
			
			protected function refreshGrid(event:Event=null,token:Object=null):void
			{
				individual.enabled = false;
				grid.selectedItem = null;
				enabledActionButtons(false);
				retrieveAllReservationForms();
			}
			
			private function retrieveAllReservationForms():void{
				new ReservationFormService().retrieveAll(retrieveAll_resultHandler,FaultHandler.defaultFaultHandler);
			}
			
			private function enabledActionButtons(enabled:Boolean):void{
				confirmReservationButton.enabled = enabled;
				cancelReservationButton.enabled = enabled;
				exportReservationButton.enabled = enabled;
				addTransferButton.enabled = enabled;
			}
			
			protected function displayPDF(event:ResultEvent=null,token:Object=null):void
			{
				var pdfFile:ByteArray = event.result as ByteArray;
				
				PdfDisplayer.displayPdf(pdfFile);
				
				Mask.close();
			}
			
			
			protected function grid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				enabledActionButtons(false);
				if(grid.selectedItem !=null){
					var reservation:ReservationForm = grid.selectedItem as ReservationForm;
					individual.currentReservationForm = reservation;
					individual.alternative = null; //resets its alternative
					if(reservation.state == StateReservationForm.PRE_BOOKING){
						confirmReservationButton.enabled = true;
						cancelReservationButton.enabled = true;
					}else if(reservation.state == StateReservationForm.CONFIRMED){
						cancelReservationButton.enabled = true;
					}
					// always
					exportReservationButton.enabled = true;
					addTransferButton.enabled = true;
				}
				
				individual.enabled = false;
			}
			
			protected function modifyReservationForm():void
			{
				individual.currentReservationForm = grid.selectedItem as ReservationForm;
				individual.isUpdate = true;
				individual.enabled=true;
				individual.displayBudgetButton.visible = false;
				
			}
			
			protected function deleteReservationForm():void
			{
				new ReservationFormService().deleteRecord(grid.selectedItem as ReservationForm,delete_resultHandler,FaultHandler.defaultFaultHandler);
			}
			
			protected function addReservationForm():void
			{
				grid.selectedItem = null;
				individual.currentReservationForm = new ReservationForm();
				individual.isUpdate = false;
				individual.stateList.selectedIndex = 0;
				individual.customersCombo.selectedIndex = 0;
				individual.enabled = true;
				individual.displayBudgetButton.visible = false;
			}
			
			private function dateFormat(item:Object,column:GridColumn):String
			{
				return DateTimeUtils.formatDateWithPattern(item [column.dataField] as Date,loc.dateFormat);
			}
			
			private function booleanFormat(item:Object,column:GridColumn):String
			{
				var value:Boolean = item [column.dataField] as Boolean; 
				if(value){
					return loc.boolean.trueValue;
				}else{
					return loc.boolean.falseValue;
				}
				
			}
			
			private function stateFormat(item:Object,column:GridColumn):String
			{
				var value:String = item [column.dataField] as String; 
				return loc.reservationForm.state[value];
			}
			
			protected function confirmReservationButton_clickHandler(event:MouseEvent):void
			{
				updateCurrentReservationForm(StateReservationForm.CONFIRMED);		
			}
			
			private function updateCurrentReservationForm(stateId:String):void{
				var reservation:ReservationForm = grid.selectedItem as ReservationForm;
				reservation.state = stateId;
				new ReservationFormService().updateRecord(reservation,updateCurrentReservationFormResult,FaultHandler.defaultFaultHandler);				
			}
			
			private function updateCurrentReservationFormResult(event:Object):void{
				refreshGrid();
				dispatchEvent(new Event("reservationFormHasChanged"));
			}
			
			protected function cancelReservationButton_clickHandler(event:MouseEvent):void
			{
				updateCurrentReservationForm(StateReservationForm.CANCELLED);				
			}
			
			protected function exportReservationButton_clickHandler(event:MouseEvent):void
			{
				Mask.show();
				
				var reservation:ReservationForm = grid.selectedItem as ReservationForm;
				new ReservationFormService().exportData(reservation, Locale.getInstance().getLocaleName(), displayPDF, FaultHandler.defaultFaultHandler);
			}
			
			protected function consultButton_clickHandler(event:MouseEvent):void
			{
				if(!validFilters()){
					return;
				}
				
				filterReservationForms();						
			}
			
			protected function cleanButton_clickHandler(event:MouseEvent):void
			{
				cleanFilterForm();
				refreshGrid();
			}
			
			private function cleanFilterForm():void
			{
				dateFromChooser.selectedDate = null;
				dateToChooser.selectedDate = null;
				customersCombo.selectedIndex = -1;
				stateList.selectedIndex = -1;
			}
			
			private function validFilters():Boolean
			{
				var validFilters:Boolean = false;
				if(dateFromChooser.selectedDate != null && dateFromValidator.validate().type == ("valid")){
						
					validFilters = true;
				}
				if(dateToChooser.selectedDate != null && dateToValidator.validate().type == ("valid")){
					
					validFilters = true;
				}
				if(customersCombo.selectedIndex > -1){
					validFilters = true;
				}
				if(stateList.selectedIndex > -1){
					validFilters = true;
					
				}
				
				return validFilters;
			}
			
			private function filterReservationForms():void
			{
				var dateFrom:Date = null;
				var dateTo:Date = null;
				var customer:Customer = null;
				var state:String = null;
				
				if(dateFromChooser.selectedDate != null){
					dateFrom = dateFromChooser.selectedDate 
				}
				if(dateToChooser.selectedDate != null){
					dateTo = dateToChooser.selectedDate
				}
				if(customersCombo.selectedIndex > -1){
					customer = customersCombo.selectedItem as Customer;
				}
				if(stateList.selectedIndex > -1){
					state = (stateList.selectedItem as StateReservationForm).id;
				}
				
				new ReservationFormService().retrieveReservationForms(dateFrom, dateTo, customer, state, retrieveAll_resultHandler, FaultHandler.defaultFaultHandler);
			}
									
			protected function individual_saveSuccessHandler(event:Event):void
			{
				refreshGrid();
				dispatchEvent(new Event("reservationFormHasChanged"));
			}
			
			protected function addTransferButton_clickHandler(event:MouseEvent):void
			{
				transferForm = new TransferIndividualCRUDForm();
				transferForm.loc = loc;
				transferForm.isUpdate = false;
				transferForm.addEventListener("saveSuccess",transfer_saveSuccess);
				transferForm.addEventListener("cancelClicked",titleWindow_close);
				titleWindow = WindowsUtils.openDialog(loc.button.newLabel + ": " + loc.transfer.singular,transferForm);
				//pre loads known information on transfer
				var transfer:Transfer = new Transfer();
				transfer.reservationForm = grid.selectedItem as ReservationForm;
				transfer.date = transfer.reservationForm.dateFrom; 
				transferForm.currentTransfer = transfer;
			}
			
			private function transfer_saveSuccess(evt:Object):void {
				PopUpManager.removePopUp(titleWindow);
			}
			
			public function refreshForm():void{
				retrieveAllReservationForms();
				individual.refreshForm();
			}
			
			// Creates a ContextMenu
			private function createContextMenu():void
			{
				var myContextMenu:ContextMenu = new ContextMenu();
				this.contextMenu = myContextMenu;       //add menu items
				var refreshItem:ContextMenuItem = new ContextMenuItem(loc.button.refresh);
				myContextMenu.customItems = [refreshItem];
				
				//adds event listener to menu item
				refreshItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, refreshGrid);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:DateValidator id="dateFromValidator"
						  required="false"
						  inputFormat="{loc.date.format}"
						  formatError="{loc.validator.invalidFieldValueError}"
						  invalidCharError="{loc.validator.invalidFieldValueError}"
						  wrongDayError="{loc.validator.invalidFieldValueError}"
						  wrongLengthError="{loc.validator.invalidFieldValueError}"
						  wrongMonthError="{loc.validator.invalidFieldValueError}"
						  wrongYearError="{loc.validator.invalidFieldValueError}"
						  source="{dateFromChooser}"
						  property="text"
						  />
		<mx:DateValidator id="dateToValidator"
						  required="false"
						  inputFormat="{loc.date.format}"
						  formatError="{loc.validator.invalidFieldValueError}"
						  invalidCharError="{loc.validator.invalidFieldValueError}"
						  wrongDayError="{loc.validator.invalidFieldValueError}"
						  wrongLengthError="{loc.validator.invalidFieldValueError}"
						  wrongMonthError="{loc.validator.invalidFieldValueError}"
						  wrongYearError="{loc.validator.invalidFieldValueError}"
						  source="{dateToChooser}"
						  property="text"
						  />
	</fx:Declarations>
	<mx:VDividedBox height="100%" width="100%">
		<s:HGroup width="100%" height="53%">
			<s:Group width="100%" height="100%">
				<s:Rect width="100%" height="100%">
					<s:stroke>
						<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
					</s:stroke>
					<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
				</s:Rect>
				<mx:VDividedBox height="100%" width="100%" paddingLeft="10" paddingRight="10" paddingBottom="10">
					<s:VGroup width="100%" verticalAlign="top" gap="0">
						<s:HGroup width="100%" horizontalAlign="center" gap="-50">
								<s:FormItem label="{loc.availability.dateFrom}:">
									<mx:DateField id="dateFromChooser" width="120"
												  dayNames="{Locale.getInstance().dayNamesAbbr}" editable="true"
												  formatString="{loc.dateFormat.toUpperCase()}"
												  monthNames="{Locale.getInstance().monthNames}" selectedDate="{new Date()}"/>
								</s:FormItem>
							
								<s:FormItem label="{loc.availability.dateTo}:">
									<mx:DateField id="dateToChooser" width="120"
												  dayNames="{Locale.getInstance().dayNamesAbbr}" editable="true"
												  formatString="{loc.dateFormat.toUpperCase()}"
												  monthNames="{Locale.getInstance().monthNames}" selectedDate="{new Date()}"/>
								</s:FormItem>
								<s:FormItem id="customerItem" label="{loc.customer.singular}:">
									<s:HGroup>
										<s:ComboBox id="customersCombo" dataProvider="{customers}" labelField="name" width="200"/>
										<s:Button width="24" height="24" click="retrieveCustomers();"
												  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
									</s:HGroup>
								</s:FormItem>
								<s:FormItem label="{loc.reservationForm.state.singular}:">
									<s:HGroup verticalAlign="middle">
										<s:DropDownList id="stateList" dataProvider="{reservationFormStates}" width="120"/>
										<s:Button width="24" height="24" id="refreshStates" click="loadStates();"
												  icon="{Icons.refresh}" toolTip="{loc.button.refresh}"/>
									</s:HGroup>
								</s:FormItem>
						</s:HGroup>
						<s:HGroup width="100%" horizontalAlign="center">
							<s:Button id="consultButton" label="{loc.button.consult}" icon="{Icons.go}" click="consultButton_clickHandler(event)"/>
							<s:Button id="cleanButton" label="{loc.button.clean}" icon="{Icons.clean}" click="cleanButton_clickHandler(event)"/>
						</s:HGroup>
					</s:VGroup>
				
					<s:DataGrid id="grid" width="100%" dataProvider="{reservationForms}" selectionChange="grid_selectionChangeHandler(event)" alternatingRowColors="{Colors.ALTERNATING_ROW_COLORS}" skinClass="view.skins.CustomDataGridSkin">
						<s:columns>
							<s:ArrayList>
								<s:GridColumn dataField="id" headerText="{loc.reservationForm.id}"/>
								<s:GridColumn dataField="customer.name" headerText="{loc.customer.singular}"/>
								<s:GridColumn dataField="state" headerText="{loc.reservationForm.state.singular}"  labelFunction="stateFormat" itemRenderer="view.components.CalendarCustomCellRenderer"/>
								<s:GridColumn dataField="creationDate" headerText="{loc.reservationForm.creationDate}" labelFunction="dateFormat"/>
								<s:GridColumn dataField="dateFrom" headerText="{loc.reservationForm.dateFrom}" labelFunction="dateFormat"/>
								<s:GridColumn dataField="dateTo" headerText="{loc.reservationForm.dateTo}" labelFunction="dateFormat"/>
								<s:GridColumn dataField="adultsQuantity" headerText="{loc.reservationForm.adultsQuantity}"/>
								<s:GridColumn dataField="childrenQuantity" headerText="{loc.reservationForm.childrenQuantity}"/>
								<s:GridColumn dataField="pricePerDayWithDefaultCurrency" headerText="{loc.reservationForm.pricePerDay}"/>
								<s:GridColumn dataField="totalPriceWithDefaultCurrency" headerText="{loc.reservationForm.totalPrice}"/>
								<s:GridColumn dataField="monetaryReserveWithDefaultCurrency" headerText="{loc.reservationForm.monetaryReserve}"/>
								<s:GridColumn dataField="bank.name" headerText="{loc.bank.singular}"/>
								<s:GridColumn dataField="bankDocumentNumber" headerText="{loc.reservationForm.bankDocumentNumber}"/>
							</s:ArrayList>
						</s:columns>
					</s:DataGrid>
				
				</mx:VDividedBox>
			
			</s:Group>
			<!-- BUTTONS -->
			<s:VGroup height="100%">
				<components:CRUDButtons height="100%" refreshClicked="refreshGrid()" addClicked="addReservationForm()"
									modifyClicked="modifyReservationForm()" removeClicked="deleteReservationForm()"
									loc="{loc}" modifyButtonEnabled="{grid.selectedItem!=null}"
									removeButtonEnabled="false"/>
				<s:Group width="100%" height="100%">
					<s:Rect width="100%" height="100%" radiusX="5">
						<s:stroke>
							<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
						</s:stroke>
					</s:Rect>
					<s:VGroup width="100%" height="100%" verticalAlign="top" horizontalAlign="center" paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5">
						<s:Button id="confirmReservationButton" click="confirmReservationButton_clickHandler(event)" label="{loc.reservationForm.buttons.confirm}" 
								  toolTip="{loc.reservationForm.buttons.confirm} {loc.reservationForm.singular}" enabled="false"
								  icon="{Icons.confirmReservation}" iconPlacement="top"/>
						<s:Button id="cancelReservationButton" click="cancelReservationButton_clickHandler(event)" label="{loc.reservationForm.buttons.cancel}" 
								  toolTip="{loc.reservationForm.buttons.cancel} {loc.reservationForm.singular}" enabled="false"
								  icon="{Icons.cancelReservation}" iconPlacement="top"/>
						<s:Button id="addTransferButton" click="addTransferButton_clickHandler(event)" label="{loc.reservationForm.buttons.addTransfer}" 
								  toolTip="{loc.reservationForm.buttons.addTransfer}" enabled="false"
								  icon="{Icons.taxi}" iconPlacement="top"/>
						<s:Button id="exportReservationButton" click="exportReservationButton_clickHandler(event)" label="{loc.reservationForm.buttons.print}" 
								  toolTip="{loc.reservationForm.buttons.print} {loc.reservationForm.singular}" enabled="false"
								  icon="{Icons.exportReservation}" iconPlacement="top"/>
					</s:VGroup>
				</s:Group>
			</s:VGroup>
		</s:HGroup>
		<individual:ReservationFormIndividualCRUDForm id="individual" enabled="false" loc="{loc}" saveSuccess="individual_saveSuccessHandler(event)" cancelClicked="individual.enabled=false;" height="47%"/>
	</mx:VDividedBox>
</s:VGroup>

