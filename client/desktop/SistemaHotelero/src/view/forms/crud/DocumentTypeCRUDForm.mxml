<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:individual="view.forms.crud.individual.*"
		  xmlns:components="view.components.*"
		  width="100%" height="100%" creationComplete="init(event)">
	<fx:Script>
		<![CDATA[
			import model.DocumentType;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import resources.Colors;
			
			import services.crud.DocumentTypeService;
			
			import spark.events.GridSelectionEvent;
			
			[Bindable]
			public var loc:Object;
			
			[Bindable]
			private var documentTypes:ArrayCollection = new ArrayCollection();
			
			// Handle a message fault.
			private function faultHandler(event:FaultEvent,token:Object=null):void {
				var errCode:String = event.fault.rootCause.errorCode;
				
				Alert.show( loc.validator.server.child(errCode).text(), loc.validator.error );
			}
			
			private function retrieveAll_resultHandler(event:ResultEvent,token:Object=null):void {
				grid.selectedItem = null;
				documentTypes.removeAll();
				documentTypes.addAll(event.result as ArrayCollection);
			}
			
			
			private function delete_resultHandler(event:ResultEvent,token:Object=null):void {
				refreshGrid();
			}
			
			
			protected function init(event:FlexEvent):void{
				refreshGrid();
			}
			
			protected function refreshGrid():void
			{
				individual.enabled = false;
				grid.selectedItem = null;
				new DocumentTypeService().retrieveAll(retrieveAll_resultHandler,faultHandler);
			}
			
			protected function grid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if(grid.selectedItem !=null){
					individual.currentDocType = grid.selectedItem as DocumentType;
				}
				individual.enabled = false;
			}
			
			protected function modifyDocumentType():void
			{
				individual.currentDocType = grid.selectedItem as DocumentType;
				individual.isUpdate = true;
				individual.enabled=true;
				
			}
			
			protected function deleteDocumentType():void
			{
				new DocumentTypeService().deleteRecord(grid.selectedItem as DocumentType,delete_resultHandler,faultHandler);
			}
			
			protected function addDocumentType():void
			{
				grid.selectedItem = null;
				var newDocType:DocumentType = new DocumentType();
				//Adds Default RegExp
				newDocType.regExp = DocumentType.DEFAULT_REGEXP;
				individual.currentDocType = newDocType;
				individual.isUpdate = false;
				individual.enabled = true;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<mx:VDividedBox height="100%" width="100%">
		<s:HGroup width="100%" height="70%">
			<s:DataGrid id="grid" width="100%" height="100%" dataProvider="{documentTypes}"
						selectionChange="grid_selectionChangeHandler(event)" alternatingRowColors="{Colors.ALTERNATING_ROW_COLORS}" skinClass="view.skins.CustomDataGridSkin">
				<s:columns>
					<s:ArrayList>
						<s:GridColumn dataField="name" headerText="{loc.documentType.singular}"></s:GridColumn>
						<s:GridColumn dataField="format" headerText="{loc.documentType.format}"></s:GridColumn>
						<s:GridColumn dataField="digits" headerText="{loc.documentType.digitsquantity}"></s:GridColumn>
					</s:ArrayList>
				</s:columns>
			</s:DataGrid>
			<!-- BUTTONS -->
			<components:CRUDButtons height="100%" addClicked="addDocumentType()" loc="{loc}"
									modifyButtonEnabled="{grid.selectedItem!=null}"
									modifyClicked="modifyDocumentType()" refreshClicked="refreshGrid()"
									removeButtonEnabled="{grid.selectedItem!=null}"
									removeClicked="deleteDocumentType()"/>
		</s:HGroup>
		<individual:DocumentTypeIndividualCRUDForm id="individual" height="30%"
												   cancelClicked="individual.enabled=false;"
												   enabled="false" loc="{loc}"
												   saveSuccess="refreshGrid();"/>
	</mx:VDividedBox>
</s:VGroup>