<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="100%" height="100%" creationComplete="init(event)" xmlns:ns="http://www.adobe.com/2006/fc" xmlns:crud="view.forms.crud.*" xmlns:individual="view.forms.crud.individual.*" xmlns:components="view.components.*" >
	<fx:Script>
		<![CDATA[
			import locales.Locale;
			
			import model.Customer;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import services.crud.CustomerService;
			import services.crud.DocumentTypeService;
			
			import spark.events.GridSelectionEvent;
			
			import utils.DateTimeUtils;
			
			[Bindable]
			public var loc:Object;
			
			[Bindable]
			private var customers:ArrayCollection = new ArrayCollection();
			
			// Handle a message fault.
			private function faultHandler(event:FaultEvent,token:Object=null):void {
				var errCode:String = event.fault.rootCause.errorCode;
				
				Alert.show( loc.validator.server.child(errCode).text(), loc.validator.error );
			}
			
			private function retrieveAll_resultHandler(event:ResultEvent,token:Object=null):void {
				grid.selectedItem = null;
				customers.removeAll();
				customers.addAll(event.result as ArrayCollection);
			}

			
			private function delete_resultHandler(event:ResultEvent,token:Object=null):void {
				refreshGrid();
			}

			
			protected function init(event:FlexEvent):void
			{
				refreshGrid();
			}
			
			protected function refreshGrid():void
			{
				individual.enabled = false;
				grid.selectedItem = null;
				new CustomerService().retrieveAll(retrieveAll_resultHandler,faultHandler);
			}
			
			protected function modifyCustomer():void
			{
				individual.currentCustomer = grid.selectedItem as Customer;
				individual.isUpdate = true;
				individual.enabled=true;
				
			}
			
			protected function deleteCustomer():void
			{
				new CustomerService().deleteRecord(grid.selectedItem as Customer,delete_resultHandler,faultHandler);
			}
			
			protected function addCustomer():void
			{
				grid.selectedItem = null;
				individual.currentCustomer = new Customer();
				individual.isUpdate = false;
				individual.enabled = true;
			}
			
			protected function grid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if(grid.selectedItem !=null){
					individual.currentCustomer = grid.selectedItem as Customer;
				}
				individual.enabled = false;
			}
			
			private function dateFormat(item:Object,column:GridColumn):String
			{
				return DateTimeUtils.formatDateWithPattern(item [column.dataField] as Date,loc.dateFormat);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<mx:VDividedBox height="100%" width="100%">
		<s:HGroup width="100%" height="50%">
			<s:DataGrid id="grid" width="100%" height="100%" dataProvider="{customers}" selectionChange="grid_selectionChangeHandler(event)" alternatingRowColors="{Colors.ALTERNATING_ROW_COLORS}" skinClass="view.skins.CustomDataGridSkin">
				<s:columns>
					<s:ArrayList>
						<s:GridColumn dataField="id.docType.name" headerText="{loc.documentType.singular}"></s:GridColumn>
						<s:GridColumn dataField="id.idNumber" headerText="{loc.customerPK.idNumber}"></s:GridColumn>
						<s:GridColumn dataField="firstName" headerText="{loc.customer.firstName}"></s:GridColumn>
						<s:GridColumn dataField="lastName" headerText="{loc.customer.lastName}"></s:GridColumn>
						<s:GridColumn dataField="dateOfBirth" headerText="{loc.customer.dateOfBirth}" labelFunction="dateFormat"></s:GridColumn>
						<s:GridColumn dataField="region.country.name" headerText="{loc.country.singular}"></s:GridColumn>
						<s:GridColumn dataField="region.name" headerText="{loc.region.singular}"></s:GridColumn>
						<s:GridColumn dataField="language.name" headerText="{loc.language.singular}"></s:GridColumn>
						<s:GridColumn dataField="lastLodgementDate" headerText="{loc.customer.lastLodgementDate}" labelFunction="dateFormat"></s:GridColumn>
						<s:GridColumn dataField="profession" headerText="{loc.customer.profession}"></s:GridColumn>
						<s:GridColumn dataField="email" headerText="{loc.customer.email}"></s:GridColumn>
						<s:GridColumn dataField="phoneNumber" headerText="{loc.customer.phoneNumber}"></s:GridColumn>
						<s:GridColumn dataField="cellphoneNumber" headerText="{loc.customer.cellphoneNumber}"></s:GridColumn>
					</s:ArrayList>
				</s:columns>
			</s:DataGrid>
			<!-- BUTTONS -->
			<components:CRUDButtons height="100%" refreshClicked="refreshGrid()" addClicked="addCustomer()"
									modifyClicked="modifyCustomer()" removeClicked="deleteCustomer()"
									loc="{loc}" modifyButtonEnabled="{grid.selectedItem!=null}"
									removeButtonEnabled="{grid.selectedItem!=null}"/>
		</s:HGroup>
		<individual:CustomerIndividualCRUDForm id="individual" height="50%" width="100%" 
										 loc="{loc}" enabled="false" 
										 cancelClicked="individual.enabled=false;"
										 saveSuccess="refreshGrid();"/>
	</mx:VDividedBox>
</s:VGroup>
