<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:individual="view.forms.crud.individual.*" xmlns:components="view.components.*"
		  creationComplete="init(event)">
	<fx:Script>
		<![CDATA[
			import model.Region;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import resources.Colors;
			
			import services.crud.RegionService;
			
			import spark.events.GridSelectionEvent;
			
			[Bindable]
			public var loc:Object;
			
			[Bindable]
			private var regions:ArrayCollection = new ArrayCollection();
			
			// Handle a message fault.
			private function faultHandler(event:FaultEvent,token:Object=null):void {
				var errCode:String = event.fault.rootCause.errorCode;
				
				Alert.show( loc.validator.server.child(errCode).text(), loc.validator.error );
			}
			
			private function retrieveAll_resultHandler(event:ResultEvent,token:Object=null):void {
				grid.selectedItem = null;
				regions.removeAll();
				regions.addAll(event.result as ArrayCollection);
			}
			
			
			private function delete_resultHandler(event:ResultEvent,token:Object=null):void {
				refreshGrid();
			}
			
			
			protected function init(event:FlexEvent):void{
				refreshGrid();
			}
			
			protected function refreshGrid():void
			{
				individual.enabled = false;
				grid.selectedItem = null;
				new RegionService().retrieveAll(retrieveAll_resultHandler,faultHandler);
			}
			
			protected function grid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				if(grid.selectedItem !=null){
					individual.currentRegion = grid.selectedItem as Region;
				}
				individual.enabled = false;
			}
			
			protected function modifyRegion():void
			{
				individual.currentRegion = grid.selectedItem as Region;
				individual.isUpdate = true;
				individual.enabled=true;
				
			}
			
			protected function deleteRegion():void
			{
				new RegionService().deleteRecord(grid.selectedItem as Region,delete_resultHandler,faultHandler);
			}
			
			protected function addRegion():void
			{
				grid.selectedItem = null;
				individual.currentRegion = new Region();
				individual.isUpdate = false;
				individual.enabled = true;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<mx:VDividedBox height="100%" width="100%">
		<s:HGroup width="100%" height="70%">
			<s:DataGrid id="grid" width="100%" height="100%" dataProvider="{regions}" selectionChange="grid_selectionChangeHandler(event)"
						alternatingRowColors="{Colors.ALTERNATING_ROW_COLORS}" skinClass="view.skins.CustomDataGridSkin">
				<s:columns>
					<s:ArrayList>
						<s:GridColumn dataField="country.name" headerText="{loc.country.singular}"></s:GridColumn>
						<s:GridColumn dataField="name" headerText="{loc.region.singular}"></s:GridColumn>
					</s:ArrayList>
				</s:columns>
			</s:DataGrid>
			<!-- BUTTONS -->
			<components:CRUDButtons height="100%" refreshClicked="refreshGrid()" addClicked="addRegion()"
									modifyClicked="modifyRegion()" removeClicked="deleteRegion()"
									loc="{loc}" modifyButtonEnabled="{grid.selectedItem!=null}"
									removeButtonEnabled="{grid.selectedItem!=null}"/>
		</s:HGroup>
		<individual:RegionIndividualCRUDForm id="individual" enabled="false" loc="{loc}" saveSuccess="refreshGrid();" cancelClicked="individual.enabled=false;" height="30%"/>
	</mx:VDividedBox>
</s:VGroup>