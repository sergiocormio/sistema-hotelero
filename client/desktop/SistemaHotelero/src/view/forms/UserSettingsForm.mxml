<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:individual="view.forms.crud.individual.*" xmlns:components="view.components.*"
		  creationComplete="init()" focusInEffect="init()">
	<fx:Script>
		<![CDATA[
			import flash.sampler.getInvocationCount;
			
			import flashx.textLayout.operations.PasteOperation;
			
			import model.ReservationFormExpirationDays;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import resources.Colors;
			import resources.icons.Icons;
			import resources.images.Images;
			
			import services.MigrationService;
			import services.crud.ReservationFormExpirationDaysService;
			
			import utils.FaultHandler;
			import utils.config.UserSettings;
			
			import view.components.Mask;
			
			[Bindable]
			public var loc:Object;
			
			
			protected function init():void
			{
				daysToExpire.value = UserSettings.getInstance().getReservationFormExpDays();
				
				emailSenderText.text = UserSettings.getInstance().getEmailSender();
				
				pswSenderText.text = UserSettings.getInstance().getPassword();
				
				testEmailText.text = UserSettings.getInstance().getEmailTest();

				daysToShow.value = UserSettings.getInstance().getDefaultQuantityOfDaysToShow();
			
			}
			
			
			
			
			
			private function save():void{
				
				if(!allFieldsAreValid()){
					return;
				}
			
				Mask.show();
				
				UserSettings.getInstance().setReservationFormExpDays(daysToExpire.value);
				UserSettings.getInstance().setEmailSender(emailSenderText.text);
				UserSettings.getInstance().setpassword(pswSenderText.text);
				UserSettings.getInstance().setEmailTest(testEmailText.text);
				UserSettings.getInstance().setDefaultQuantityOfDaysToShow(daysToShow.value);
				
				UserSettings.getInstance().update();
				
				// reservationFormExpirationDays should also be persisted in server side, to be able to run the related trigger.
				var reservationFormExpirationDays:ReservationFormExpirationDays = new ReservationFormExpirationDays();
				reservationFormExpirationDays.id = 1;
				reservationFormExpirationDays.daysToExpire = daysToExpire.value;
				new ReservationFormExpirationDaysService().updateRecord(reservationFormExpirationDays, reservationFormExpDays_resultHandler, FaultHandler.defaultFaultHandler);
			}
			
			
			
			
			private function allFieldsAreValid():Boolean{
				
				setEnabledValidators(true);
				
				var valArray:Array = new Array();
				
				valArray.push(emailSenderlValidator);
				valArray.push(pswValidator);
				valArray.push(emailTestlValidator);
				
				var validatorErrorArray:Array = Validator.validateAll(valArray);
				var isValidForm:Boolean = validatorErrorArray.length == 0;
				
				setEnabledValidators(false);
				
				return isValidForm;
				
			}
			
						
			private function setEnabledValidators(enabled:Boolean):void{
				emailSenderlValidator.enabled = enabled;
				pswValidator.enabled = enabled;
				emailTestlValidator.enabled = enabled;
			}
			
			
			private function reservationFormExpDays_resultHandler(event:Event):void
			{
				Mask.close();
			}
			
			public function refreshForm():void{
				init();
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:EmailValidator id="emailSenderlValidator" 
						   enabled="false"
						   required="true"
						   requiredFieldError="{loc.validator.requiredFieldError}"
						   invalidCharError="{loc.validator.invalidFieldValueError}"
						   invalidPeriodsInDomainError="{loc.validator.invalidFieldValueError}"
						   missingAtSignError="{loc.validator.invalidFieldValueError}"
						   missingPeriodInDomainError="{loc.validator.invalidFieldValueError}"
						   missingUsernameError="{loc.validator.invalidFieldValueError}"
						   tooManyAtSignsError="{loc.validator.invalidFieldValueError}"
						   source="{emailSenderText}"
						   property="text" 
						   />
		<mx:StringValidator id="pswValidator"
							enabled="false"
							required="true"
							requiredFieldError="{loc.validator.requiredFieldError}"
							source="{pswSenderText}"
							property="text"
							/>
		<mx:EmailValidator id="emailTestlValidator" 
						   enabled="false"
						   required="true"
						   requiredFieldError="{loc.validator.requiredFieldError}"
						   invalidCharError="{loc.validator.invalidFieldValueError}"
						   invalidPeriodsInDomainError="{loc.validator.invalidFieldValueError}"
						   missingAtSignError="{loc.validator.invalidFieldValueError}"
						   missingPeriodInDomainError="{loc.validator.invalidFieldValueError}"
						   missingUsernameError="{loc.validator.invalidFieldValueError}"
						   tooManyAtSignsError="{loc.validator.invalidFieldValueError}"
						   source="{testEmailText}"
						   property="text" 
						   />
	</fx:Declarations>
	
	<s:Group width="100%" height="100%" horizontalCenter="0" verticalCenter="0">
		
		<s:Rect width="100%" height="100%" horizontalCenter="0" verticalCenter="0">
			<s:stroke>
				<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
			</s:stroke>
			<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
		</s:Rect>
	
		<s:VGroup width="100%" height="100%" verticalAlign="top" paddingTop="10" paddingLeft="40">
			<s:VGroup width="100%">
				
				<s:Form width="100%">
					<s:layout>
						<s:FormLayout gap="0"/>
					</s:layout> 
									
					<s:FormHeading label="- {loc.userSetting.reservationFormExpirationDate.plural}:"
								   fontWeight="bold" fontStyle="italic" fontSize="12" />
					
					<s:FormItem label="{loc.userSetting.reservationFormExpirationDate.descriptionLabel} ({loc.userSetting.reservationFormExpirationDate.days}):" >
						<s:NumericStepper id="daysToExpire" minimum="1" maximum="{Number.MAX_VALUE}" width="50"/>
					</s:FormItem>
				</s:Form>
				
				<s:Line width="90%">
					<s:stroke>
						<s:SolidColorStroke color="{Colors.RED_COLOR}" weight="2"/>
					</s:stroke>
				</s:Line>
			</s:VGroup>
			
			<s:VGroup width="100%">
				<s:Form width="100%">
					<s:layout>
						<s:FormLayout gap="0"/>
					</s:layout> 
						
					<s:FormHeading label="- {loc.userSetting.mail.config}:"
								   fontWeight="bold" fontStyle="italic" fontSize="12" />
					
					<s:FormItem label="{loc.userSetting.mail.emailSender}:">
						<s:TextInput id="emailSenderText" widthInChars="25"/>
					</s:FormItem>
					
					<s:FormItem label="{loc.userSetting.mail.pswSender}:">
						<s:TextInput id="pswSenderText" widthInChars="15"/>
					</s:FormItem>
					
					<!--<s:FormItem label="{loc.userSetting.mail.confirmPswSender}:">
						<s:TextInput id="confirmPswText" widthInChars="15"/>
					</s:FormItem>-->
					
					<s:FormItem label="{loc.userSetting.mail.testEmail}:">
						<s:TextInput id="testEmailText" widthInChars="25"/>
					</s:FormItem>
				
				</s:Form>
				
				<s:Line width="90%">
					<s:stroke>
						<s:SolidColorStroke color="{Colors.RED_COLOR}" weight="2"/>
					</s:stroke>
				</s:Line>
				
			</s:VGroup>
			
			<s:VGroup width="100%">
				<s:Form width="100%">
					<s:layout>
						<s:FormLayout gap="0"/>
					</s:layout> 
					
					<s:FormHeading label="- {loc.userSetting.calendar.single}:"
								   fontWeight="bold" fontStyle="italic" fontSize="12" />
					
					<s:FormItem label="{loc.userSetting.calendar.daysToShow}:" >
						<s:NumericStepper id="daysToShow" minimum="1" maximum="{Number.MAX_VALUE}" width="50"/>
					</s:FormItem>
				</s:Form>
				
				<s:Line width="90%">
					<s:stroke>
						<s:SolidColorStroke color="{Colors.RED_COLOR}" weight="2"/>
					</s:stroke>
				</s:Line>
			</s:VGroup>
				
			<s:Spacer height="5"/>
			
			<s:HGroup verticalAlign="bottom" paddingBottom="30">
				<!-- BUTTONS -->
				<s:Button id="saveButton" label="{loc.button.save}" click="save()" icon="{Icons.save}" />
			</s:HGroup>
			
		</s:VGroup>
	</s:Group>
</s:VGroup>



