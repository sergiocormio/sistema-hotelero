<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="800" height="600"
		 creationComplete="init(event)" xmlns:components="view.components.*">
	<fx:Metadata> 
		[Event(name="saveClicked", type="flash.events.Event")]
		[Event(name="cancelClicked", type="flash.events.Event")]
	</fx:Metadata> 
	<fx:Script>
		<![CDATA[
			import locales.Locale;
			
			import model.Alternative;
			import model.AlternativeWrapper;
			import model.Occupation;
			import model.Room;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import resources.Colors;
			import resources.icons.Icons;
			
			import services.OccupationService;
			import services.crud.RoomService;
			
			import utils.DateTimeUtils;
			import utils.FaultHandler;
			import utils.log.DebugLog;
			[Bindable]
			public var loc:Object = Locale.getInstance().getCurrentLocale();
			
			public var alternative:Alternative;
			
			[Bindable]
			public var readOnly:Boolean; //allows showing the alternative without modification
			
			
			protected function init(event:FlexEvent):void
			{
				/* if(alternative!=null){
					var wrapper:AlternativeWrapper = new AlternativeWrapper(alternative);
					if(wrapper.dateFrom!=null && wrapper.dateTo!=null){
						setDatesToShow(wrapper.dateFrom,wrapper.dateTo);
					}
				} */
				loadRoomsToShow();
			}
			
			private function loadRoomsToShow():void{
				Mask.show();
				new RoomService().retrieveAll(retrieveAllRooms_resultHandler,faultHandler);
			}
			
			private function retrieveAllRooms_resultHandler(event:ResultEvent,token:Object=null):void {
				grid.roomsToShow = event.result as ArrayCollection;
				loadOccupations();
			}
			
			private function loadOccupations():void{
				new OccupationService().retrieveOccupations(calendarNavigationBar.dateFrom,calendarNavigationBar.dateTo,retrieveOccupations_resultHandler,faultHandler);
			}
			
			private function retrieveOccupations_resultHandler(event:ResultEvent,token:Object=null):void {
				grid.occupations = new ArrayCollection();
				grid.occupations.addAll(event.result as ArrayCollection);
				if(alternative!=null && alternative.occupations!=null){
					//TODO this line remove manualOccupations added recently
					grid.manualOccupations = new ArrayCollection();
					grid.manualOccupations.addAll(alternative.occupations);
				}
				Mask.close();
				grid.init();
			}
			
			// Handle a message fault.
			private function faultHandler(event:FaultEvent,token:Object=null):void {
				//var errCode:String = event.fault.rootCause.errorCode;
				Mask.close();
				DebugLog.log("ERROR trying to load rooms and occupations.");
				//Alert.show( loc.validator.server.child(errCode).text(), loc.validator.error );
				FaultHandler.defaultFaultHandler(event,token);
			}
			
			protected function saveButton_clickHandler(event:MouseEvent):void
			{
				if(!selectedOccupationsAreValid()){
					return;
				}
				else{
					dispatchEvent(new Event("saveClicked"));
				}
			}
			
			protected function cancelButton_clickHandler(event:MouseEvent):void
			{
				dispatchEvent(new Event("cancelClicked"));
			}
			
			public function getManualAlternative():Alternative{
				return grid.getUserAlternative();
			}
			
			public function refreshCalendar():void{
				loadRoomsToShow();
			}
			
			private function navigationChanged():void{
				loadRoomsToShow();
			}
			
			private function selectedOccupationsAreValid():Boolean
			{
				if(grid.manualOccupations == null || grid.manualOccupations.length == 0){
					Alert.show(loc.validator.reservationFormCreation.manual.noOccupationsSelected);
					return false;
				}
				// order selected occupations ascending
				var sortedOccupations:ArrayCollection = sortOccupationsByDate(grid.manualOccupations);
				
				// check that are contiguous
				var occupationCurrentDay:Occupation = sortedOccupations.getItemAt(0) as Occupation;
				for(var i:int = 1; i < sortedOccupations.length; i++){
					var occupationNextDay:Occupation = sortedOccupations.getItemAt(i) as Occupation;
					
					if(!areContiguous(occupationCurrentDay, occupationNextDay)){
						Alert.show(loc.validator.reservationFormCreation.manual.occupationsNotContiguous);
						return false;
					}
					
					occupationCurrentDay = occupationNextDay;
				}
				
				return true;
			}
			
			private function sortOccupationsByDate(occupations:ArrayCollection):ArrayCollection
			{
				for(var i:int = 0; i < occupations.length; i++){
					for(var j:int = i; j < occupations.length; j++){
						var occupationi:Occupation = occupations.getItemAt(i) as Occupation;
						var occupationj:Occupation = occupations.getItemAt(j) as Occupation;
						
						if(occupationi.compareTo(occupationj) == 1){ // i > j
							occupations.setItemAt(occupationj, i);
							occupations.setItemAt(occupationi, j);
						}
					}
				}
				return occupations;
				
			}
			
			private function areContiguous(occupationCurrentDay:Occupation, occupationNextDay:Occupation):Boolean
			{
				if(DateTimeUtils.getQuantityOfDays(occupationCurrentDay.id.date, occupationNextDay.id.date) == 1){
					return true;
				}
				else{
					return false;
				}
			}
			
			public function setDatesToShow(dateFrom:Date, dateTo:Date):void{
				calendarNavigationBar.dateFrom = dateFrom;
				calendarNavigationBar.dateTo = dateTo;
				calendarNavigationBar.daysToShow=DateTimeUtils.getQuantityOfDays(dateFrom,dateTo);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:stroke>
			<s:SolidColorStroke color="{Colors.YELLOW_COLOR}" weight="1"/>
		</s:stroke>
		<s:fill><s:SolidColor color="{Colors.GRAY_COLOR}"/></s:fill>
	</s:Rect>
	<s:VGroup width="100%" height="100%" paddingBottom="10" paddingTop="10" paddingLeft="10" paddingRight="10">
		<components:CalendarGrid id="grid" width="100%" height="100%" dateFrom="{calendarNavigationBar.dateFrom}" dateTo="{calendarNavigationBar.dateTo}" loc="{loc}" editable="{!readOnly}"/>
		<components:CalendarNavigationBar id="calendarNavigationBar"  width="100%" loc="{loc}" 
										  navigationChanged="{navigationChanged()}"
										  refreshCalendarPressed="{refreshCalendar()}"
										  />
		<s:HGroup width="100%" horizontalAlign="center">
			<s:Group>
				<s:Button id="okButton" label="{loc.button.close}" icon="{Icons.ok}" click="cancelButton_clickHandler(event)" enabled="{readOnly}" visible="{readOnly}"/>
				<s:Button id="saveButton" label="{loc.button.save}" icon="{Icons.save}" click="saveButton_clickHandler(event)" enabled="{!readOnly}" visible="{!readOnly}"/>
			</s:Group>
			<s:Button id="cancelButton" label="{loc.button.cancel}" icon="{Icons.cancel}" click="cancelButton_clickHandler(event)"/>
		</s:HGroup>
	</s:VGroup>
	
</s:Group>
