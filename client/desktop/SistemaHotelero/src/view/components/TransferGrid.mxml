<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 >
	<fx:Script>
		<![CDATA[
			import locales.Locale;
			
			import model.Alternative;
			import model.Occupation;
			import model.OccupationPK;
			import model.ReservationForm;
			import model.Room;
			import model.StateReservationForm;
			import model.Transfer;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.gridClasses.GridColumn;
			import spark.events.GridEvent;
			import spark.skins.spark.DefaultGridItemRenderer;
			
			import utils.DateTimeUtils;
			import utils.WindowsUtils;
			
			import view.forms.ReservationFormSummary;
			import view.forms.TransferSummary;
			
			
			[Bindable]
			private var calendarRows:ArrayCollection;
			
			private var hourToCalendarRowMap:Dictionary; //hour -> calendarRow
			
			private var titleWindow:TitleWindow;
			
			private const DAY_PREFIX_COLUMN:String = "day_";
			
			private const HOUR_COLUMN:String = "hour";
			
			[Bindable]
			public var loc:Object = Locale.getInstance().getCurrentLocale();
			
			public var dateFrom:Date;
			
			public var dateTo:Date;
			
			public var hoursToShow:ArrayCollection;
			
			[Bindable]
			public var transfers:ArrayCollection;
			
			public var editable:Boolean = false; //grid is not editable by default
			
			//cell Renderers
			private var defaultGridItemRenderer:IFactory = new ClassFactory(DefaultGridItemRenderer);
			private var calendarCustomCellRenderer:IFactory = new ClassFactory(view.components.CalendarCustomCellRenderer);
			
			private function addHourColumn():void{
				var hourColumn:GridColumn = new GridColumn();
				hourColumn.headerText = loc.transfer.hour;
				hourColumn.dataField = HOUR_COLUMN;
				hourColumn.itemRendererFunction = selectRenderer;
				hourColumn.width = 50;
				
				grid.columns.addItem(hourColumn);
			}
			
			private function addDayColumns(dateFrom:Date,dateTo:Date):void{
				var i:int = 0;
				while(DateTimeUtils.rollDaysToDate(dateFrom,i) <= dateTo){
					var auxDate:Date = DateTimeUtils.rollDaysToDate(dateFrom,i);
					var col:GridColumn = DateTimeUtils.getColumnForDate(auxDate,DAY_PREFIX_COLUMN + i);
					col.labelFunction = calendarFormat;
					col.itemRendererFunction = selectRenderer;
					
					grid.columns.addItem(col);
					i++;
				}
			}
			
			/**
			 * Chooses a renderer dependendig on "column"
			 */ 
			private function selectRenderer(item:Object, column: GridColumn):IFactory
			{
				  if(item!=null){
					return calendarCustomCellRenderer;
				}else{   
					return defaultGridItemRenderer;
				}
			}
			
			private function calendarFormat(item:Object,column:GridColumn):String
			{
				var qtyBus:int = 0;
				var qtyAirport:int = 0;
				
				var result:String = '';
				var value:ArrayCollection = item [column.dataField] as ArrayCollection;
				if(value != null){
					for each (var o:Object in value){
						if (o is Transfer){
							var transfer:Transfer = o as Transfer;
							switch(transfer.serviceType.transferType){
								case "ONE_WAY_BUS":
								case "ROUND_TRIP_BUS":
									qtyBus++;
									break;
								case "ONE_WAY_FLIGHT":
								case "ROUND_TRIP_FLIGHT":
									qtyAirport++;
									break;
							}
						}
					}
					//Calculates result based on quantities
					if(qtyBus>0){
						result += loc.transfer.bus;
					}
					if(qtyAirport>0){
						if (result.length > 0 ) {result += ", "}
						result += loc.transfer.airport;
					}
					
				}
				
				return result;
			}
			
			private function loadHoursToShow():void{
				for (var i:int=0;i<24;i++){
					var row:Object = new Object();
					row[HOUR_COLUMN] = i;
					calendarRows.addItem(row);
					hourToCalendarRowMap[i] = row;
				}
			}
			
			public function init():void
			{
				hourToCalendarRowMap = new Dictionary();
				calendarRows = new ArrayCollection();
				
				loadHoursToShow();
				//adds columns to the grid
				grid.columns = new ArrayList();
				addHourColumn();
				addDayColumns(dateFrom,dateTo);
				
				loadTransfersOnGrid(transfers);
			}
			
			private function loadTransfersOnGrid(transfers:ArrayCollection):void{
				for each (var transfer:Transfer in transfers){
					var isNew:Boolean = false;
					var hour:int = transfer.date.hours;
					var row:Object = hourToCalendarRowMap[hour];
					var attributeName:String = DAY_PREFIX_COLUMN + DateTimeUtils.getQuantityOfDays(dateFrom,transfer.date);
					if( row[attributeName] == null){
						//every cell has an ArrayCollection, could have more than 1 transfers
						row[attributeName] = new ArrayCollection();
					}
					
					var cellArray:ArrayCollection = row[attributeName] as ArrayCollection;
					cellArray.addItem(transfer);
				}
			}
			
			
			protected function gridClickHandler(event:GridEvent):void
			{
				/* if(!editable){	return;	} */
				var row:Object = event.item;
				//if there was a valid row o user clicked on room cell, do nothing.
				if(row == null || event.columnIndex < 1) { 
					return;
				}
				
				//i.e: event.item has a room and a day_0 that it's an ArrayCollection
				var day:String = event.column.dataField;
				var transfersInDay:ArrayCollection = row[day];
				
				if(editable){
					//nothing to do
				}else{ //if it is not editable
					//if it's not an empty cell... shows the transfers summary
					if(transfersInDay != null){
						var form:TransferSummary = new TransferSummary();
						form.loc = loc;
						form.transfers = transfersInDay;
						form.addEventListener("okClicked",titleWindow_close);
						titleWindow = WindowsUtils.openDialog(loc.transfer.plural + " - " + event.column.headerText,form);
					}
				}
			}
			
			private function titleWindow_close(evt:Object):void {
				PopUpManager.removePopUp(titleWindow);
			}
						
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:DataGrid id="grid" width="100%" height="100%" dataProvider="{calendarRows}" skinClass="view.skins.CustomDataGridSkin"
				toolTip="{loc.messages.clickForMoreInfo}"	gridClick="gridClickHandler(event)" 
				requestedRowCount="24" requestedMaxRowCount="24" requestedMinRowCount="24" variableRowHeight="true"/>
</s:Group>
